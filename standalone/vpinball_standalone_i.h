/*** Autogenerated by WIDL 8.21 from ../../vpinball.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __vpinball_standalone_i_h__
#define __vpinball_standalone_i_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __ICollection_FWD_DEFINED__
#define __ICollection_FWD_DEFINED__
typedef interface ICollection ICollection;
#ifdef __cplusplus
interface ICollection;
#endif /* __cplusplus */
#endif

#ifndef __ICollectionEvents_FWD_DEFINED__
#define __ICollectionEvents_FWD_DEFINED__
typedef interface ICollectionEvents ICollectionEvents;
#ifdef __cplusplus
interface ICollectionEvents;
#endif /* __cplusplus */
#endif

#ifndef __ITable_FWD_DEFINED__
#define __ITable_FWD_DEFINED__
typedef interface ITable ITable;
#ifdef __cplusplus
interface ITable;
#endif /* __cplusplus */
#endif

#ifndef __ITableGlobal_FWD_DEFINED__
#define __ITableGlobal_FWD_DEFINED__
typedef interface ITableGlobal ITableGlobal;
#ifdef __cplusplus
interface ITableGlobal;
#endif /* __cplusplus */
#endif

#ifndef __ITableEvents_FWD_DEFINED__
#define __ITableEvents_FWD_DEFINED__
typedef interface ITableEvents ITableEvents;
#ifdef __cplusplus
interface ITableEvents;
#endif /* __cplusplus */
#endif

#ifndef __IVPDebug_FWD_DEFINED__
#define __IVPDebug_FWD_DEFINED__
typedef interface IVPDebug IVPDebug;
#ifdef __cplusplus
interface IVPDebug;
#endif /* __cplusplus */
#endif

#ifndef __IWall_FWD_DEFINED__
#define __IWall_FWD_DEFINED__
typedef interface IWall IWall;
#ifdef __cplusplus
interface IWall;
#endif /* __cplusplus */
#endif

#ifndef __IWallEvents_FWD_DEFINED__
#define __IWallEvents_FWD_DEFINED__
typedef interface IWallEvents IWallEvents;
#ifdef __cplusplus
interface IWallEvents;
#endif /* __cplusplus */
#endif

#ifndef __IControlPoint_FWD_DEFINED__
#define __IControlPoint_FWD_DEFINED__
typedef interface IControlPoint IControlPoint;
#ifdef __cplusplus
interface IControlPoint;
#endif /* __cplusplus */
#endif

#ifndef __IFlipper_FWD_DEFINED__
#define __IFlipper_FWD_DEFINED__
typedef interface IFlipper IFlipper;
#ifdef __cplusplus
interface IFlipper;
#endif /* __cplusplus */
#endif

#ifndef __IFlipperEvents_FWD_DEFINED__
#define __IFlipperEvents_FWD_DEFINED__
typedef interface IFlipperEvents IFlipperEvents;
#ifdef __cplusplus
interface IFlipperEvents;
#endif /* __cplusplus */
#endif

#ifndef __ITimer_FWD_DEFINED__
#define __ITimer_FWD_DEFINED__
typedef interface ITimer ITimer;
#ifdef __cplusplus
interface ITimer;
#endif /* __cplusplus */
#endif

#ifndef __ITimerEvents_FWD_DEFINED__
#define __ITimerEvents_FWD_DEFINED__
typedef interface ITimerEvents ITimerEvents;
#ifdef __cplusplus
interface ITimerEvents;
#endif /* __cplusplus */
#endif

#ifndef __IPlunger_FWD_DEFINED__
#define __IPlunger_FWD_DEFINED__
typedef interface IPlunger IPlunger;
#ifdef __cplusplus
interface IPlunger;
#endif /* __cplusplus */
#endif

#ifndef __IPlungerEvents_FWD_DEFINED__
#define __IPlungerEvents_FWD_DEFINED__
typedef interface IPlungerEvents IPlungerEvents;
#ifdef __cplusplus
interface IPlungerEvents;
#endif /* __cplusplus */
#endif

#ifndef __ITextbox_FWD_DEFINED__
#define __ITextbox_FWD_DEFINED__
typedef interface ITextbox ITextbox;
#ifdef __cplusplus
interface ITextbox;
#endif /* __cplusplus */
#endif

#ifndef __ITextboxEvents_FWD_DEFINED__
#define __ITextboxEvents_FWD_DEFINED__
typedef interface ITextboxEvents ITextboxEvents;
#ifdef __cplusplus
interface ITextboxEvents;
#endif /* __cplusplus */
#endif

#ifndef __IBumper_FWD_DEFINED__
#define __IBumper_FWD_DEFINED__
typedef interface IBumper IBumper;
#ifdef __cplusplus
interface IBumper;
#endif /* __cplusplus */
#endif

#ifndef __IBumperEvents_FWD_DEFINED__
#define __IBumperEvents_FWD_DEFINED__
typedef interface IBumperEvents IBumperEvents;
#ifdef __cplusplus
interface IBumperEvents;
#endif /* __cplusplus */
#endif

#ifndef __ITrigger_FWD_DEFINED__
#define __ITrigger_FWD_DEFINED__
typedef interface ITrigger ITrigger;
#ifdef __cplusplus
interface ITrigger;
#endif /* __cplusplus */
#endif

#ifndef __ITriggerEvents_FWD_DEFINED__
#define __ITriggerEvents_FWD_DEFINED__
typedef interface ITriggerEvents ITriggerEvents;
#ifdef __cplusplus
interface ITriggerEvents;
#endif /* __cplusplus */
#endif

#ifndef __ILight_FWD_DEFINED__
#define __ILight_FWD_DEFINED__
typedef interface ILight ILight;
#ifdef __cplusplus
interface ILight;
#endif /* __cplusplus */
#endif

#ifndef __ILightEvents_FWD_DEFINED__
#define __ILightEvents_FWD_DEFINED__
typedef interface ILightEvents ILightEvents;
#ifdef __cplusplus
interface ILightEvents;
#endif /* __cplusplus */
#endif

#ifndef __IKicker_FWD_DEFINED__
#define __IKicker_FWD_DEFINED__
typedef interface IKicker IKicker;
#ifdef __cplusplus
interface IKicker;
#endif /* __cplusplus */
#endif

#ifndef __IKickerEvents_FWD_DEFINED__
#define __IKickerEvents_FWD_DEFINED__
typedef interface IKickerEvents IKickerEvents;
#ifdef __cplusplus
interface IKickerEvents;
#endif /* __cplusplus */
#endif

#ifndef __IDecal_FWD_DEFINED__
#define __IDecal_FWD_DEFINED__
typedef interface IDecal IDecal;
#ifdef __cplusplus
interface IDecal;
#endif /* __cplusplus */
#endif

#ifndef __IPrimitive_FWD_DEFINED__
#define __IPrimitive_FWD_DEFINED__
typedef interface IPrimitive IPrimitive;
#ifdef __cplusplus
interface IPrimitive;
#endif /* __cplusplus */
#endif

#ifndef __IPrimitiveEvents_FWD_DEFINED__
#define __IPrimitiveEvents_FWD_DEFINED__
typedef interface IPrimitiveEvents IPrimitiveEvents;
#ifdef __cplusplus
interface IPrimitiveEvents;
#endif /* __cplusplus */
#endif

#ifndef __IHitTarget_FWD_DEFINED__
#define __IHitTarget_FWD_DEFINED__
typedef interface IHitTarget IHitTarget;
#ifdef __cplusplus
interface IHitTarget;
#endif /* __cplusplus */
#endif

#ifndef __IHitTargetEvents_FWD_DEFINED__
#define __IHitTargetEvents_FWD_DEFINED__
typedef interface IHitTargetEvents IHitTargetEvents;
#ifdef __cplusplus
interface IHitTargetEvents;
#endif /* __cplusplus */
#endif

#ifndef __IGate_FWD_DEFINED__
#define __IGate_FWD_DEFINED__
typedef interface IGate IGate;
#ifdef __cplusplus
interface IGate;
#endif /* __cplusplus */
#endif

#ifndef __IGateEvents_FWD_DEFINED__
#define __IGateEvents_FWD_DEFINED__
typedef interface IGateEvents IGateEvents;
#ifdef __cplusplus
interface IGateEvents;
#endif /* __cplusplus */
#endif

#ifndef __ISpinner_FWD_DEFINED__
#define __ISpinner_FWD_DEFINED__
typedef interface ISpinner ISpinner;
#ifdef __cplusplus
interface ISpinner;
#endif /* __cplusplus */
#endif

#ifndef __ISpinnerEvents_FWD_DEFINED__
#define __ISpinnerEvents_FWD_DEFINED__
typedef interface ISpinnerEvents ISpinnerEvents;
#ifdef __cplusplus
interface ISpinnerEvents;
#endif /* __cplusplus */
#endif

#ifndef __IRamp_FWD_DEFINED__
#define __IRamp_FWD_DEFINED__
typedef interface IRamp IRamp;
#ifdef __cplusplus
interface IRamp;
#endif /* __cplusplus */
#endif

#ifndef __IFlasher_FWD_DEFINED__
#define __IFlasher_FWD_DEFINED__
typedef interface IFlasher IFlasher;
#ifdef __cplusplus
interface IFlasher;
#endif /* __cplusplus */
#endif

#ifndef __IRubber_FWD_DEFINED__
#define __IRubber_FWD_DEFINED__
typedef interface IRubber IRubber;
#ifdef __cplusplus
interface IRubber;
#endif /* __cplusplus */
#endif

#ifndef __IBall_FWD_DEFINED__
#define __IBall_FWD_DEFINED__
typedef interface IBall IBall;
#ifdef __cplusplus
interface IBall;
#endif /* __cplusplus */
#endif

#ifndef __IRampEvents_FWD_DEFINED__
#define __IRampEvents_FWD_DEFINED__
typedef interface IRampEvents IRampEvents;
#ifdef __cplusplus
interface IRampEvents;
#endif /* __cplusplus */
#endif

#ifndef __IFlasherEvents_FWD_DEFINED__
#define __IFlasherEvents_FWD_DEFINED__
typedef interface IFlasherEvents IFlasherEvents;
#ifdef __cplusplus
interface IFlasherEvents;
#endif /* __cplusplus */
#endif

#ifndef __IRubberEvents_FWD_DEFINED__
#define __IRubberEvents_FWD_DEFINED__
typedef interface IRubberEvents IRubberEvents;
#ifdef __cplusplus
interface IRubberEvents;
#endif /* __cplusplus */
#endif

#ifndef __IDispReel_FWD_DEFINED__
#define __IDispReel_FWD_DEFINED__
typedef interface IDispReel IDispReel;
#ifdef __cplusplus
interface IDispReel;
#endif /* __cplusplus */
#endif

#ifndef __IDispReelEvents_FWD_DEFINED__
#define __IDispReelEvents_FWD_DEFINED__
typedef interface IDispReelEvents IDispReelEvents;
#ifdef __cplusplus
interface IDispReelEvents;
#endif /* __cplusplus */
#endif

#ifndef __ILightSeq_FWD_DEFINED__
#define __ILightSeq_FWD_DEFINED__
typedef interface ILightSeq ILightSeq;
#ifdef __cplusplus
interface ILightSeq;
#endif /* __cplusplus */
#endif

#ifndef __ILightSeqEvents_FWD_DEFINED__
#define __ILightSeqEvents_FWD_DEFINED__
typedef interface ILightSeqEvents ILightSeqEvents;
#ifdef __cplusplus
interface ILightSeqEvents;
#endif /* __cplusplus */
#endif

#ifndef __Table_FWD_DEFINED__
#define __Table_FWD_DEFINED__
#ifdef __cplusplus
typedef class Table Table;
#else
typedef struct Table Table;
#endif /* defined __cplusplus */
#endif /* defined __Table_FWD_DEFINED__ */

#ifndef __Wall_FWD_DEFINED__
#define __Wall_FWD_DEFINED__
#ifdef __cplusplus
typedef class Wall Wall;
#else
typedef struct Wall Wall;
#endif /* defined __cplusplus */
#endif /* defined __Wall_FWD_DEFINED__ */

#ifndef __DragPoint_FWD_DEFINED__
#define __DragPoint_FWD_DEFINED__
#ifdef __cplusplus
typedef class DragPoint DragPoint;
#else
typedef struct DragPoint DragPoint;
#endif /* defined __cplusplus */
#endif /* defined __DragPoint_FWD_DEFINED__ */

#ifndef __Flipper_FWD_DEFINED__
#define __Flipper_FWD_DEFINED__
#ifdef __cplusplus
typedef class Flipper Flipper;
#else
typedef struct Flipper Flipper;
#endif /* defined __cplusplus */
#endif /* defined __Flipper_FWD_DEFINED__ */

#ifndef __Timer_FWD_DEFINED__
#define __Timer_FWD_DEFINED__
#ifdef __cplusplus
typedef class Timer Timer;
#else
typedef struct Timer Timer;
#endif /* defined __cplusplus */
#endif /* defined __Timer_FWD_DEFINED__ */

#ifndef __Plunger_FWD_DEFINED__
#define __Plunger_FWD_DEFINED__
#ifdef __cplusplus
typedef class Plunger Plunger;
#else
typedef struct Plunger Plunger;
#endif /* defined __cplusplus */
#endif /* defined __Plunger_FWD_DEFINED__ */

#ifndef __Textbox_FWD_DEFINED__
#define __Textbox_FWD_DEFINED__
#ifdef __cplusplus
typedef class Textbox Textbox;
#else
typedef struct Textbox Textbox;
#endif /* defined __cplusplus */
#endif /* defined __Textbox_FWD_DEFINED__ */

#ifndef __Bumper_FWD_DEFINED__
#define __Bumper_FWD_DEFINED__
#ifdef __cplusplus
typedef class Bumper Bumper;
#else
typedef struct Bumper Bumper;
#endif /* defined __cplusplus */
#endif /* defined __Bumper_FWD_DEFINED__ */

#ifndef __Trigger_FWD_DEFINED__
#define __Trigger_FWD_DEFINED__
#ifdef __cplusplus
typedef class Trigger Trigger;
#else
typedef struct Trigger Trigger;
#endif /* defined __cplusplus */
#endif /* defined __Trigger_FWD_DEFINED__ */

#ifndef __Light_FWD_DEFINED__
#define __Light_FWD_DEFINED__
#ifdef __cplusplus
typedef class Light Light;
#else
typedef struct Light Light;
#endif /* defined __cplusplus */
#endif /* defined __Light_FWD_DEFINED__ */

#ifndef __Kicker_FWD_DEFINED__
#define __Kicker_FWD_DEFINED__
#ifdef __cplusplus
typedef class Kicker Kicker;
#else
typedef struct Kicker Kicker;
#endif /* defined __cplusplus */
#endif /* defined __Kicker_FWD_DEFINED__ */

#ifndef __Gate_FWD_DEFINED__
#define __Gate_FWD_DEFINED__
#ifdef __cplusplus
typedef class Gate Gate;
#else
typedef struct Gate Gate;
#endif /* defined __cplusplus */
#endif /* defined __Gate_FWD_DEFINED__ */

#ifndef __Spinner_FWD_DEFINED__
#define __Spinner_FWD_DEFINED__
#ifdef __cplusplus
typedef class Spinner Spinner;
#else
typedef struct Spinner Spinner;
#endif /* defined __cplusplus */
#endif /* defined __Spinner_FWD_DEFINED__ */

#ifndef __Ramp_FWD_DEFINED__
#define __Ramp_FWD_DEFINED__
#ifdef __cplusplus
typedef class Ramp Ramp;
#else
typedef struct Ramp Ramp;
#endif /* defined __cplusplus */
#endif /* defined __Ramp_FWD_DEFINED__ */

#ifndef __Flasher_FWD_DEFINED__
#define __Flasher_FWD_DEFINED__
#ifdef __cplusplus
typedef class Flasher Flasher;
#else
typedef struct Flasher Flasher;
#endif /* defined __cplusplus */
#endif /* defined __Flasher_FWD_DEFINED__ */

#ifndef __Rubber_FWD_DEFINED__
#define __Rubber_FWD_DEFINED__
#ifdef __cplusplus
typedef class Rubber Rubber;
#else
typedef struct Rubber Rubber;
#endif /* defined __cplusplus */
#endif /* defined __Rubber_FWD_DEFINED__ */

#ifndef __Ball_FWD_DEFINED__
#define __Ball_FWD_DEFINED__
#ifdef __cplusplus
typedef class Ball Ball;
#else
typedef struct Ball Ball;
#endif /* defined __cplusplus */
#endif /* defined __Ball_FWD_DEFINED__ */

#ifndef __Collection_FWD_DEFINED__
#define __Collection_FWD_DEFINED__
#ifdef __cplusplus
typedef class Collection Collection;
#else
typedef struct Collection Collection;
#endif /* defined __cplusplus */
#endif /* defined __Collection_FWD_DEFINED__ */

#ifndef __DispReel_FWD_DEFINED__
#define __DispReel_FWD_DEFINED__
#ifdef __cplusplus
typedef class DispReel DispReel;
#else
typedef struct DispReel DispReel;
#endif /* defined __cplusplus */
#endif /* defined __DispReel_FWD_DEFINED__ */

#ifndef __LightSeq_FWD_DEFINED__
#define __LightSeq_FWD_DEFINED__
#ifdef __cplusplus
typedef class LightSeq LightSeq;
#else
typedef struct LightSeq LightSeq;
#endif /* defined __cplusplus */
#endif /* defined __LightSeq_FWD_DEFINED__ */

#ifndef __Primitive_FWD_DEFINED__
#define __Primitive_FWD_DEFINED__
#ifdef __cplusplus
typedef class Primitive Primitive;
#else
typedef struct Primitive Primitive;
#endif /* defined __cplusplus */
#endif /* defined __Primitive_FWD_DEFINED__ */

#ifndef __HitTarget_FWD_DEFINED__
#define __HitTarget_FWD_DEFINED__
#ifdef __cplusplus
typedef class HitTarget HitTarget;
#else
typedef struct HitTarget HitTarget;
#endif /* defined __cplusplus */
#endif /* defined __HitTarget_FWD_DEFINED__ */

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __IBall_FWD_DEFINED__
#define __IBall_FWD_DEFINED__
typedef interface IBall IBall;
#ifdef __cplusplus
interface IBall;
#endif /* __cplusplus */
#endif

#ifndef __VPinballLib_LIBRARY_DEFINED__
#define __VPinballLib_LIBRARY_DEFINED__

DEFINE_GUID(LIBID_VPinballLib, 0x384df69d, 0x3592, 0x4041, 0x84,0x8d, 0x9a,0x2d,0x5c,0xd0,0x81,0xa0);

typedef enum LightState {
    LightStateOff = 0,
    LightStateOn = 1,
    LightStateBlinking = 2
} LightState;
typedef enum BackglassIndex {
    DESKTOP = 110,
    FULLSCREEN = 111,
    FULL_SINGLE_SCREEN = 112
} BackglassIndex;
typedef enum Filters {
    Filter_None = 0,
    Filter_Additive = 1,
    Filter_Overlay = 2,
    Filter_Multiply = 3,
    Filter_Screen = 4
} Filters;
typedef enum ImageAlignment {
    ImageAlignWorld = 0,
    ImageAlignTopLeft = 1,
    ImageAlignCenter = 2
} ImageAlignment;
typedef enum Shape {
    ShapeCircle = 0,
    ShapeCustom = 1
} Shape;
typedef enum TriggerShape {
    TriggerNone = 0,
    TriggerWireA = 1,
    TriggerStar = 2,
    TriggerWireB = 3,
    TriggerButton = 4,
    TriggerWireC = 5,
    TriggerWireD = 6,
    TriggerInder = 7
} TriggerShape;
typedef enum RampType {
    RampTypeFlat = 0,
    RampType4Wire = 1,
    RampType2Wire = 2,
    RampType3WireLeft = 3,
    RampType3WireRight = 4,
    RampType1Wire = 5
} RampType;
typedef enum PlungerType {
    PlungerTypeModern = 1,
    PlungerTypeFlat = 2,
    PlungerTypeCustom = 3
} PlungerType;
typedef enum UserDefaultOnOff {
    Default = -1,
    Off = 0,
    On = 1
} UserDefaultOnOff;
typedef enum FXAASettings {
    Defaults = -1,
    Disabled = 0,
    Fast_FXAA = 1,
    Standard_FXAA = 2,
    Quality_FXAA = 3,
    Fast_NFAA = 4,
    Standard_DLAA = 5,
    Quality_SMAA = 6
} FXAASettings;
typedef enum PhysicsSet {
    Disable = 0,
    Set1 = 1,
    Set2 = 2,
    Set3 = 3,
    Set4 = 4,
    Set5 = 5,
    Set6 = 6,
    Set7 = 7,
    Set8 = 8
} PhysicsSet;
typedef enum TargetType {
    DropTargetBeveled = 1,
    DropTargetSimple = 2,
    HitTargetRound = 3,
    HitTargetRectangle = 4,
    HitFatTargetRectangle = 5,
    HitFatTargetSquare = 6,
    DropTargetFlatSimple = 7,
    HitFatTargetSlim = 8,
    HitTargetSlim = 9
} TargetType;
typedef enum GateType {
    GateWireW = 1,
    GateWireRectangle = 2,
    GatePlate = 3,
    GateLongPlate = 4
} GateType;
typedef enum TextAlignment {
    TextAlignLeft = 0,
    TextAlignCenter = 1,
    TextAlignRight = 2
} TextAlignment;
typedef enum DecalType {
    DecalText = 0,
    DecalImage = 1
} DecalType;
typedef enum SequencerState {
    SeqUpOn = 1,
    SeqUpOff = 2,
    SeqDownOn = 3,
    SeqDownOff = 4,
    SeqRightOn = 5,
    SeqRightOff = 6,
    SeqLeftOn = 7,
    SeqLeftOff = 8,
    SeqDiagUpRightOn = 9,
    SeqDiagUpRightOff = 10,
    SeqDiagUpLeftOn = 11,
    SeqDiagUpLeftOff = 12,
    SeqDiagDownRightOn = 13,
    SeqDiagDownRightOff = 14,
    SeqDiagDownLeftOn = 15,
    SeqDiagDownLeftOff = 16,
    SeqMiddleOutHorizOn = 17,
    SeqMiddleOutHorizOff = 18,
    SeqMiddleInHorizOn = 19,
    SeqMiddleInHorizOff = 20,
    SeqMiddleOutVertOn = 21,
    SeqMiddleOutVertOff = 22,
    SeqMiddleInVertOn = 23,
    SeqMiddleInVertOff = 24,
    SeqStripe1HorizOn = 25,
    SeqStripe1HorizOff = 26,
    SeqStripe2HorizOn = 27,
    SeqStripe2HorizOff = 28,
    SeqStripe1VertOn = 29,
    SeqStripe1VertOff = 30,
    SeqStripe2VertOn = 31,
    SeqStripe2VertOff = 32,
    SeqHatch1HorizOn = 33,
    SeqHatch1HorizOff = 34,
    SeqHatch2HorizOn = 35,
    SeqHatch2HorizOff = 36,
    SeqHatch1VertOn = 37,
    SeqHatch1VertOff = 38,
    SeqHatch2VertOn = 39,
    SeqHatch2VertOff = 40,
    SeqCircleOutOn = 41,
    SeqCircleOutOff = 42,
    SeqCircleInOn = 43,
    SeqCircleInOff = 44,
    SeqClockRightOn = 45,
    SeqClockRightOff = 46,
    SeqClockLeftOn = 47,
    SeqClockLeftOff = 48,
    SeqRadarRightOn = 49,
    SeqRadarRightOff = 50,
    SeqRadarLeftOn = 51,
    SeqRadarLeftOff = 52,
    SeqWiperRightOn = 53,
    SeqWiperRightOff = 54,
    SeqWiperLeftOn = 55,
    SeqWiperLeftOff = 56,
    SeqFanLeftUpOn = 57,
    SeqFanLeftUpOff = 58,
    SeqFanLeftDownOn = 59,
    SeqFanLeftDownOff = 60,
    SeqFanRightUpOn = 61,
    SeqFanRightUpOff = 62,
    SeqFanRightDownOn = 63,
    SeqFanRightDownOff = 64,
    SeqArcBottomLeftUpOn = 65,
    SeqArcBottomLeftUpOff = 66,
    SeqArcBottomLeftDownOn = 67,
    SeqArcBottomLeftDownOff = 68,
    SeqArcBottomRightUpOn = 69,
    SeqArcBottomRightUpOff = 70,
    SeqArcBottomRightDownOn = 71,
    SeqArcBottomRightDownOff = 72,
    SeqArcTopLeftUpOn = 73,
    SeqArcTopLeftUpOff = 74,
    SeqArcTopLeftDownOn = 75,
    SeqArcTopLeftDownOff = 76,
    SeqArcTopRightUpOn = 77,
    SeqArcTopRightUpOff = 78,
    SeqArcTopRightDownOn = 79,
    SeqArcTopRightDownOff = 80,
    SeqScrewRightOn = 81,
    SeqScrewRightOff = 82,
    SeqScrewLeftOn = 83,
    SeqScrewLeftOff = 84,
    SeqLastDynamic = 85,
    SeqAllOff = 1000,
    SeqAllOn = 1001,
    SeqBlinking = 1002,
    SeqRandom = 1003
} SequencerState;
typedef enum SizingType {
    AutoSize = 0,
    AutoWidth = 1,
    ManualSize = 2
} SizingType;
typedef enum KickerType {
    KickerInvisible = 0,
    KickerHole = 1,
    KickerCup = 2,
    KickerHoleSimple = 3,
    KickerWilliams = 4,
    KickerGottlieb = 5,
    KickerCup2 = 6
} KickerType;
typedef enum RampImageAlignment {
    ImageModeWorld = 0,
    ImageModeWrap = 1
} RampImageAlignment;
typedef enum VBColors {
    vbBlack = 0x0,
    vbRed = 0xff,
    vbGreen = 0xff00,
    vbYellow = 0xffff,
    vbBlue = 0xff0000,
    vbMagenta = 0xff00ff,
    vbCyan = 0xffff00,
    vbWhite = 0xffffff
} VBColors;
typedef enum VBComparison {
    vbBinaryCompare = 0,
    vbTextCompare = 1
} VBComparison;
typedef enum VBDateTime {
    vbSunday = 1,
    vbMonday = 2,
    vbTuesday = 3,
    vbWednesday = 4,
    vbThursday = 5,
    vbFriday = 6,
    vbSaturday = 7,
    vbUseSystem = 0,
    vbUseSystemDayOfWeek = 0,
    vbFirstJan1 = 1,
    vbFirstFourDays = 2,
    vbFirstFullWeek = 3
} VBDateTime;
typedef enum VBDateFormat {
    vbGeneralDate = 0,
    vbLongDate = 1,
    vbShortDate = 2,
    vbLongTime = 3,
    vbShortTime = 4
} VBDateFormat;
typedef enum VBMsgBox {
    vbOKOnly = 0,
    vbOKCancel = 1,
    vbAbortRetryIgnore = 2,
    vbYesNoCancel = 3,
    vbYesNo = 4,
    vbRetryCancel = 5,
    vbCritical = 16,
    vbQuestion = 32,
    vbExclamation = 48,
    vbInformation = 64,
    vbDefaultButton1 = 0,
    vbDefaultButton2 = 256,
    vbDefaultButton3 = 512,
    vbDefaultButton4 = 768,
    vbApplicationModal = 0,
    vbSystemModal = 4096
} VBMsgBox;
typedef enum VBMsgBoxReturn {
    vbOK = 1,
    vbCancel = 2,
    vbAbort = 3,
    vbRetry = 4,
    vbIgnore = 5,
    vbYes = 6,
    vbNo = 7
} VBMsgBoxReturn;
typedef enum VBTriState {
    vbUseDefault = -2,
    vbTrue = -1,
    vbFalse = 0
} VTriState;
typedef enum VBVarType {
    vbEmpty = 0,
    vbNull = 1,
    vbInteger = 2,
    vbLong = 3,
    vbSingle = 4,
    vbDouble = 5,
    vbCurrency = 6,
    vbDate = 7,
    vbString = 8,
    vbObject = 9,
    vbError = 10,
    vbBoolean = 11,
    vbVariant = 12,
    vbDataObject = 13,
    vbDecimal = 14,
    vbByte = 17,
    vbArray = 8192
} VBVarType;
/*****************************************************************************
 * ICollection interface
 */
#ifndef __ICollection_INTERFACE_DEFINED__
#define __ICollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICollection, 0xbe073465, 0x7189, 0x4489, 0x93,0xbc, 0x5b,0x6a,0xbb,0xe1,0xf8,0x80);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("be073465-7189-4489-93bc-5b6abbe1f880")
ICollection : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppunk) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        long Index,
        IDispatch **ppobject) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        long *Count) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICollection, 0xbe073465, 0x7189, 0x4489, 0x93,0xbc, 0x5b,0x6a,0xbb,0xe1,0xf8,0x80)
#endif
#else
typedef struct ICollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICollection *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ICollection *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ICollection *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ICollection *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ICollection *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ICollection methods ***/
    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        ICollection *This,
        IUnknown **ppunk);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        ICollection *This,
        long Index,
        IDispatch **ppobject);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        ICollection *This,
        long *Count);

    END_INTERFACE
} ICollectionVtbl;

interface ICollection {
    CONST_VTBL ICollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICollection_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ICollection_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ICollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ICollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ICollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ICollection methods ***/
#define ICollection_get__NewEnum(This,ppunk) (This)->lpVtbl->get__NewEnum(This,ppunk)
#define ICollection_get_Item(This,Index,ppobject) (This)->lpVtbl->get_Item(This,Index,ppobject)
#define ICollection_get_Count(This,Count) (This)->lpVtbl->get_Count(This,Count)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ICollection_QueryInterface(ICollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ICollection_AddRef(ICollection* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ICollection_Release(ICollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ICollection_GetTypeInfoCount(ICollection* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ICollection_GetTypeInfo(ICollection* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ICollection_GetIDsOfNames(ICollection* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ICollection_Invoke(ICollection* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ICollection methods ***/
static __WIDL_INLINE HRESULT ICollection_get__NewEnum(ICollection* This,IUnknown **ppunk) {
    return This->lpVtbl->get__NewEnum(This,ppunk);
}
static __WIDL_INLINE HRESULT ICollection_get_Item(ICollection* This,long Index,IDispatch **ppobject) {
    return This->lpVtbl->get_Item(This,Index,ppobject);
}
static __WIDL_INLINE HRESULT ICollection_get_Count(ICollection* This,long *Count) {
    return This->lpVtbl->get_Count(This,Count);
}
#endif
#endif

#endif


#endif  /* __ICollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICollectionEvents dispinterface
 */
#ifndef __ICollectionEvents_DISPINTERFACE_DEFINED__
#define __ICollectionEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ICollectionEvents, 0x5b214770, 0xee20, 0x47f4, 0x9b,0x18, 0xd6,0x49,0x1d,0xc5,0x9d,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5b214770-ee20-47f4-9b18-d6491dc59d45")
ICollectionEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICollectionEvents, 0x5b214770, 0xee20, 0x47f4, 0x9b,0x18, 0xd6,0x49,0x1d,0xc5,0x9d,0x45)
#endif
#else
typedef struct ICollectionEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICollectionEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICollectionEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICollectionEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ICollectionEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ICollectionEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ICollectionEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ICollectionEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ICollectionEventsVtbl;

interface ICollectionEvents {
    CONST_VTBL ICollectionEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICollectionEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICollectionEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICollectionEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ICollectionEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ICollectionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ICollectionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ICollectionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ICollectionEvents_QueryInterface(ICollectionEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ICollectionEvents_AddRef(ICollectionEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ICollectionEvents_Release(ICollectionEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ICollectionEvents_GetTypeInfoCount(ICollectionEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ICollectionEvents_GetTypeInfo(ICollectionEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ICollectionEvents_GetIDsOfNames(ICollectionEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ICollectionEvents_Invoke(ICollectionEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ICollectionEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ITable interface
 */
#ifndef __ITable_INTERFACE_DEFINED__
#define __ITable_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITable, 0xae85bcac, 0x1734, 0x4e5c, 0x81,0xda, 0x07,0x5a,0xd4,0x7a,0x13,0x6e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ae85bcac-1734-4e5c-81da-075ad47a136e")
ITable : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_GlassHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GlassHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlayfieldMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlayfieldMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackdropColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackdropColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlopeMax(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlopeMax(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlopeMin(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlopeMin(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Inclination(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Inclination(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FieldOfView(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FieldOfView(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Layback(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Layback(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Rotation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Rotation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scalex(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scalex(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scaley(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scaley(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scalez(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scalez(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Xlatex(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Xlatex(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Xlatey(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Xlatey(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Xlatez(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Xlatez(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Gravity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Gravity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DefaultScatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DefaultScatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NudgeTime(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NudgeTime(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlungerNormalize(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlungerNormalize(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsLoopTime(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsLoopTime(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlungerFilter(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlungerFilter(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_YieldTime(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_YieldTime(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallImage(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallImage(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackdropImage_DT(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackdropImage_DT(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackdropImage_FS(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackdropImage_FS(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackdropImage_FSS(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackdropImage_FSS(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackdropImageApplyNightDay(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackdropImageApplyNightDay(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ColorGradeImage(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ColorGradeImage(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MaxSeparation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MaxSeparation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ZPD(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ZPD(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Offset(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Offset(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GlobalStereo3D(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GlobalStereo3D(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallDecalMode(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallDecalMode(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FileName(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableAntialiasing(
        UserDefaultOnOff *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableAntialiasing(
        UserDefaultOnOff newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableAO(
        UserDefaultOnOff *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableAO(
        UserDefaultOnOff newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableFXAA(
        FXAASettings *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableFXAA(
        FXAASettings newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableSSR(
        UserDefaultOnOff *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableSSR(
        UserDefaultOnOff newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BloomStrength(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BloomStrength(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallFrontDecal(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallFrontDecal(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverridePhysics(
        PhysicsSet *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverridePhysics(
        PhysicsSet newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverridePhysicsFlippers(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverridePhysicsFlippers(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableEMReels(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableEMReels(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableDecals(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableDecals(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowDT(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowFSS(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectElementsOnPlayfield(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectElementsOnPlayfield(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnvironmentImage(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnvironmentImage(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackglassMode(
        BackglassIndex *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackglassMode(
        BackglassIndex newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Accelerometer(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Accelerometer(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AccelNormalMount(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AccelNormalMount(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AccelerometerAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AccelerometerAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GlobalDifficulty(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GlobalDifficulty(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TableHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TableHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DeadZone(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DeadZone(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LightAmbient(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LightAmbient(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Light0Emission(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Light0Emission(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LightHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LightHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LightRange(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LightRange(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnvironmentEmissionScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnvironmentEmissionScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LightEmissionScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LightEmissionScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AOScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AOScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SSRScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SSRScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TableSoundVolume(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TableSoundVolume(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TableMusicVolume(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TableMusicVolume(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TableAdaptiveVSync(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TableAdaptiveVSync(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallReflection(
        UserDefaultOnOff *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallReflection(
        UserDefaultOnOff newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlayfieldReflectionStrength(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlayfieldReflectionStrength(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallTrail(
        UserDefaultOnOff *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallTrail(
        UserDefaultOnOff newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TrailStrength(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TrailStrength(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BallPlayfieldReflectionScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BallPlayfieldReflectionScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DefaultBulbIntensityScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DefaultBulbIntensityScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DetailLevel(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DetailLevel(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NightDay(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NightDay(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GlobalAlphaAcc(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GlobalAlphaAcc(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GlobalDayNight(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GlobalDayNight(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Version(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionMajor(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionMinor(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionRevision(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VPBuildVersion(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Option(
        BSTR OptionName,
        float MinValue,
        float MaxValue,
        float Step,
        float DefaultValue,
        int Unit,
        VARIANT values,
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Option(
        BSTR OptionName,
        float MinValue,
        float MaxValue,
        float Step,
        float DefaultValue,
        int Unit,
        VARIANT values,
        float val) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITable, 0xae85bcac, 0x1734, 0x4e5c, 0x81,0xda, 0x07,0x5a,0xd4,0x7a,0x13,0x6e)
#endif
#else
typedef struct ITableVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITable *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITable *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITable *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITable *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITable *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITable *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITable *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITable methods ***/
    HRESULT (STDMETHODCALLTYPE *get_GlassHeight)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GlassHeight)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_PlayfieldMaterial)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PlayfieldMaterial)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackdropColor)(
        ITable *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackdropColor)(
        ITable *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlopeMax)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlopeMax)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlopeMin)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlopeMin)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Inclination)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Inclination)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FieldOfView)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FieldOfView)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Layback)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Layback)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Rotation)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Rotation)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scalex)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scalex)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scaley)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scaley)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scalez)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scalez)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Xlatex)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Xlatex)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Xlatey)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Xlatey)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Xlatez)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Xlatez)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Gravity)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Gravity)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DefaultScatter)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DefaultScatter)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_NudgeTime)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_NudgeTime)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_PlungerNormalize)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PlungerNormalize)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsLoopTime)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsLoopTime)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_PlungerFilter)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PlungerFilter)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_YieldTime)(
        ITable *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_YieldTime)(
        ITable *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallImage)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallImage)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackdropImage_DT)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackdropImage_DT)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackdropImage_FS)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackdropImage_FS)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackdropImage_FSS)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackdropImage_FSS)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackdropImageApplyNightDay)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackdropImageApplyNightDay)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ColorGradeImage)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ColorGradeImage)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_MaxSeparation)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MaxSeparation)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ZPD)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ZPD)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Offset)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Offset)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_GlobalStereo3D)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GlobalStereo3D)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallDecalMode)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallDecalMode)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_FileName)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableAntialiasing)(
        ITable *This,
        UserDefaultOnOff *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableAntialiasing)(
        ITable *This,
        UserDefaultOnOff newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableAO)(
        ITable *This,
        UserDefaultOnOff *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableAO)(
        ITable *This,
        UserDefaultOnOff newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableFXAA)(
        ITable *This,
        FXAASettings *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableFXAA)(
        ITable *This,
        FXAASettings newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableSSR)(
        ITable *This,
        UserDefaultOnOff *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableSSR)(
        ITable *This,
        UserDefaultOnOff newVal);

    HRESULT (STDMETHODCALLTYPE *get_BloomStrength)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BloomStrength)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallFrontDecal)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallFrontDecal)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverridePhysics)(
        ITable *This,
        PhysicsSet *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverridePhysics)(
        ITable *This,
        PhysicsSet newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverridePhysicsFlippers)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverridePhysicsFlippers)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableEMReels)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableEMReels)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableDecals)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableDecals)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowDT)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowFSS)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectElementsOnPlayfield)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectElementsOnPlayfield)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnvironmentImage)(
        ITable *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnvironmentImage)(
        ITable *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackglassMode)(
        ITable *This,
        BackglassIndex *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackglassMode)(
        ITable *This,
        BackglassIndex newVal);

    HRESULT (STDMETHODCALLTYPE *get_Accelerometer)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Accelerometer)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_AccelNormalMount)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AccelNormalMount)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_AccelerometerAngle)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AccelerometerAngle)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_GlobalDifficulty)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GlobalDifficulty)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TableHeight)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TableHeight)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DeadZone)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DeadZone)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_LightAmbient)(
        ITable *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LightAmbient)(
        ITable *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Light0Emission)(
        ITable *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Light0Emission)(
        ITable *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_LightHeight)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LightHeight)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_LightRange)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LightRange)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnvironmentEmissionScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnvironmentEmissionScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_LightEmissionScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LightEmissionScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AOScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AOScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SSRScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SSRScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TableSoundVolume)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TableSoundVolume)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_TableMusicVolume)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TableMusicVolume)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_TableAdaptiveVSync)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TableAdaptiveVSync)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallReflection)(
        ITable *This,
        UserDefaultOnOff *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallReflection)(
        ITable *This,
        UserDefaultOnOff newVal);

    HRESULT (STDMETHODCALLTYPE *get_PlayfieldReflectionStrength)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PlayfieldReflectionStrength)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallTrail)(
        ITable *This,
        UserDefaultOnOff *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallTrail)(
        ITable *This,
        UserDefaultOnOff newVal);

    HRESULT (STDMETHODCALLTYPE *get_TrailStrength)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TrailStrength)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_BallPlayfieldReflectionScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BallPlayfieldReflectionScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DefaultBulbIntensityScale)(
        ITable *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DefaultBulbIntensityScale)(
        ITable *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DetailLevel)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DetailLevel)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_NightDay)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_NightDay)(
        ITable *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_GlobalAlphaAcc)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GlobalAlphaAcc)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_GlobalDayNight)(
        ITable *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GlobalDayNight)(
        ITable *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionMajor)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionMinor)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionRevision)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VPBuildVersion)(
        ITable *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Option)(
        ITable *This,
        BSTR OptionName,
        float MinValue,
        float MaxValue,
        float Step,
        float DefaultValue,
        int Unit,
        VARIANT values,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Option)(
        ITable *This,
        BSTR OptionName,
        float MinValue,
        float MaxValue,
        float Step,
        float DefaultValue,
        int Unit,
        VARIANT values,
        float val);

    END_INTERFACE
} ITableVtbl;

interface ITable {
    CONST_VTBL ITableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITable_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITable_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITable_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITable_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITable methods ***/
#define ITable_get_GlassHeight(This,pVal) (This)->lpVtbl->get_GlassHeight(This,pVal)
#define ITable_put_GlassHeight(This,newVal) (This)->lpVtbl->put_GlassHeight(This,newVal)
#define ITable_get_PlayfieldMaterial(This,pVal) (This)->lpVtbl->get_PlayfieldMaterial(This,pVal)
#define ITable_put_PlayfieldMaterial(This,newVal) (This)->lpVtbl->put_PlayfieldMaterial(This,newVal)
#define ITable_get_BackdropColor(This,pVal) (This)->lpVtbl->get_BackdropColor(This,pVal)
#define ITable_put_BackdropColor(This,newVal) (This)->lpVtbl->put_BackdropColor(This,newVal)
#define ITable_get_SlopeMax(This,pVal) (This)->lpVtbl->get_SlopeMax(This,pVal)
#define ITable_put_SlopeMax(This,newVal) (This)->lpVtbl->put_SlopeMax(This,newVal)
#define ITable_get_SlopeMin(This,pVal) (This)->lpVtbl->get_SlopeMin(This,pVal)
#define ITable_put_SlopeMin(This,newVal) (This)->lpVtbl->put_SlopeMin(This,newVal)
#define ITable_get_Inclination(This,pVal) (This)->lpVtbl->get_Inclination(This,pVal)
#define ITable_put_Inclination(This,newVal) (This)->lpVtbl->put_Inclination(This,newVal)
#define ITable_get_FieldOfView(This,pVal) (This)->lpVtbl->get_FieldOfView(This,pVal)
#define ITable_put_FieldOfView(This,newVal) (This)->lpVtbl->put_FieldOfView(This,newVal)
#define ITable_get_Layback(This,pVal) (This)->lpVtbl->get_Layback(This,pVal)
#define ITable_put_Layback(This,newVal) (This)->lpVtbl->put_Layback(This,newVal)
#define ITable_get_Rotation(This,pVal) (This)->lpVtbl->get_Rotation(This,pVal)
#define ITable_put_Rotation(This,newVal) (This)->lpVtbl->put_Rotation(This,newVal)
#define ITable_get_Scalex(This,pVal) (This)->lpVtbl->get_Scalex(This,pVal)
#define ITable_put_Scalex(This,newVal) (This)->lpVtbl->put_Scalex(This,newVal)
#define ITable_get_Scaley(This,pVal) (This)->lpVtbl->get_Scaley(This,pVal)
#define ITable_put_Scaley(This,newVal) (This)->lpVtbl->put_Scaley(This,newVal)
#define ITable_get_Scalez(This,pVal) (This)->lpVtbl->get_Scalez(This,pVal)
#define ITable_put_Scalez(This,newVal) (This)->lpVtbl->put_Scalez(This,newVal)
#define ITable_get_Xlatex(This,pVal) (This)->lpVtbl->get_Xlatex(This,pVal)
#define ITable_put_Xlatex(This,newVal) (This)->lpVtbl->put_Xlatex(This,newVal)
#define ITable_get_Xlatey(This,pVal) (This)->lpVtbl->get_Xlatey(This,pVal)
#define ITable_put_Xlatey(This,newVal) (This)->lpVtbl->put_Xlatey(This,newVal)
#define ITable_get_Xlatez(This,pVal) (This)->lpVtbl->get_Xlatez(This,pVal)
#define ITable_put_Xlatez(This,newVal) (This)->lpVtbl->put_Xlatez(This,newVal)
#define ITable_get_Gravity(This,pVal) (This)->lpVtbl->get_Gravity(This,pVal)
#define ITable_put_Gravity(This,newVal) (This)->lpVtbl->put_Gravity(This,newVal)
#define ITable_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define ITable_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define ITable_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define ITable_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define ITable_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define ITable_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define ITable_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define ITable_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define ITable_get_DefaultScatter(This,pVal) (This)->lpVtbl->get_DefaultScatter(This,pVal)
#define ITable_put_DefaultScatter(This,newVal) (This)->lpVtbl->put_DefaultScatter(This,newVal)
#define ITable_get_NudgeTime(This,pVal) (This)->lpVtbl->get_NudgeTime(This,pVal)
#define ITable_put_NudgeTime(This,newVal) (This)->lpVtbl->put_NudgeTime(This,newVal)
#define ITable_get_PlungerNormalize(This,pVal) (This)->lpVtbl->get_PlungerNormalize(This,pVal)
#define ITable_put_PlungerNormalize(This,newVal) (This)->lpVtbl->put_PlungerNormalize(This,newVal)
#define ITable_get_PhysicsLoopTime(This,pVal) (This)->lpVtbl->get_PhysicsLoopTime(This,pVal)
#define ITable_put_PhysicsLoopTime(This,newVal) (This)->lpVtbl->put_PhysicsLoopTime(This,newVal)
#define ITable_get_PlungerFilter(This,pVal) (This)->lpVtbl->get_PlungerFilter(This,pVal)
#define ITable_put_PlungerFilter(This,newVal) (This)->lpVtbl->put_PlungerFilter(This,newVal)
#define ITable_get_YieldTime(This,pVal) (This)->lpVtbl->get_YieldTime(This,pVal)
#define ITable_put_YieldTime(This,newVal) (This)->lpVtbl->put_YieldTime(This,newVal)
#define ITable_get_BallImage(This,pVal) (This)->lpVtbl->get_BallImage(This,pVal)
#define ITable_put_BallImage(This,newVal) (This)->lpVtbl->put_BallImage(This,newVal)
#define ITable_get_BackdropImage_DT(This,pVal) (This)->lpVtbl->get_BackdropImage_DT(This,pVal)
#define ITable_put_BackdropImage_DT(This,newVal) (This)->lpVtbl->put_BackdropImage_DT(This,newVal)
#define ITable_get_BackdropImage_FS(This,pVal) (This)->lpVtbl->get_BackdropImage_FS(This,pVal)
#define ITable_put_BackdropImage_FS(This,newVal) (This)->lpVtbl->put_BackdropImage_FS(This,newVal)
#define ITable_get_BackdropImage_FSS(This,pVal) (This)->lpVtbl->get_BackdropImage_FSS(This,pVal)
#define ITable_put_BackdropImage_FSS(This,newVal) (This)->lpVtbl->put_BackdropImage_FSS(This,newVal)
#define ITable_get_BackdropImageApplyNightDay(This,pVal) (This)->lpVtbl->get_BackdropImageApplyNightDay(This,pVal)
#define ITable_put_BackdropImageApplyNightDay(This,newVal) (This)->lpVtbl->put_BackdropImageApplyNightDay(This,newVal)
#define ITable_get_ColorGradeImage(This,pVal) (This)->lpVtbl->get_ColorGradeImage(This,pVal)
#define ITable_put_ColorGradeImage(This,newVal) (This)->lpVtbl->put_ColorGradeImage(This,newVal)
#define ITable_get_Width(This,pVal) (This)->lpVtbl->get_Width(This,pVal)
#define ITable_put_Width(This,newVal) (This)->lpVtbl->put_Width(This,newVal)
#define ITable_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define ITable_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define ITable_get_MaxSeparation(This,pVal) (This)->lpVtbl->get_MaxSeparation(This,pVal)
#define ITable_put_MaxSeparation(This,newVal) (This)->lpVtbl->put_MaxSeparation(This,newVal)
#define ITable_get_ZPD(This,pVal) (This)->lpVtbl->get_ZPD(This,pVal)
#define ITable_put_ZPD(This,newVal) (This)->lpVtbl->put_ZPD(This,newVal)
#define ITable_get_Offset(This,pVal) (This)->lpVtbl->get_Offset(This,pVal)
#define ITable_put_Offset(This,newVal) (This)->lpVtbl->put_Offset(This,newVal)
#define ITable_get_GlobalStereo3D(This,pVal) (This)->lpVtbl->get_GlobalStereo3D(This,pVal)
#define ITable_put_GlobalStereo3D(This,newVal) (This)->lpVtbl->put_GlobalStereo3D(This,newVal)
#define ITable_get_BallDecalMode(This,pVal) (This)->lpVtbl->get_BallDecalMode(This,pVal)
#define ITable_put_BallDecalMode(This,newVal) (This)->lpVtbl->put_BallDecalMode(This,newVal)
#define ITable_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define ITable_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define ITable_get_FileName(This,pVal) (This)->lpVtbl->get_FileName(This,pVal)
#define ITable_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ITable_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ITable_get_EnableAntialiasing(This,pVal) (This)->lpVtbl->get_EnableAntialiasing(This,pVal)
#define ITable_put_EnableAntialiasing(This,newVal) (This)->lpVtbl->put_EnableAntialiasing(This,newVal)
#define ITable_get_EnableAO(This,pVal) (This)->lpVtbl->get_EnableAO(This,pVal)
#define ITable_put_EnableAO(This,newVal) (This)->lpVtbl->put_EnableAO(This,newVal)
#define ITable_get_EnableFXAA(This,pVal) (This)->lpVtbl->get_EnableFXAA(This,pVal)
#define ITable_put_EnableFXAA(This,newVal) (This)->lpVtbl->put_EnableFXAA(This,newVal)
#define ITable_get_EnableSSR(This,pVal) (This)->lpVtbl->get_EnableSSR(This,pVal)
#define ITable_put_EnableSSR(This,newVal) (This)->lpVtbl->put_EnableSSR(This,newVal)
#define ITable_get_BloomStrength(This,pVal) (This)->lpVtbl->get_BloomStrength(This,pVal)
#define ITable_put_BloomStrength(This,newVal) (This)->lpVtbl->put_BloomStrength(This,newVal)
#define ITable_get_BallFrontDecal(This,pVal) (This)->lpVtbl->get_BallFrontDecal(This,pVal)
#define ITable_put_BallFrontDecal(This,newVal) (This)->lpVtbl->put_BallFrontDecal(This,newVal)
#define ITable_get_OverridePhysics(This,pVal) (This)->lpVtbl->get_OverridePhysics(This,pVal)
#define ITable_put_OverridePhysics(This,newVal) (This)->lpVtbl->put_OverridePhysics(This,newVal)
#define ITable_get_OverridePhysicsFlippers(This,pVal) (This)->lpVtbl->get_OverridePhysicsFlippers(This,pVal)
#define ITable_put_OverridePhysicsFlippers(This,newVal) (This)->lpVtbl->put_OverridePhysicsFlippers(This,newVal)
#define ITable_get_EnableEMReels(This,pVal) (This)->lpVtbl->get_EnableEMReels(This,pVal)
#define ITable_put_EnableEMReels(This,newVal) (This)->lpVtbl->put_EnableEMReels(This,newVal)
#define ITable_get_EnableDecals(This,pVal) (This)->lpVtbl->get_EnableDecals(This,pVal)
#define ITable_put_EnableDecals(This,newVal) (This)->lpVtbl->put_EnableDecals(This,newVal)
#define ITable_get_ShowDT(This,pVal) (This)->lpVtbl->get_ShowDT(This,pVal)
#define ITable_get_ShowFSS(This,pVal) (This)->lpVtbl->get_ShowFSS(This,pVal)
#define ITable_get_ReflectElementsOnPlayfield(This,pVal) (This)->lpVtbl->get_ReflectElementsOnPlayfield(This,pVal)
#define ITable_put_ReflectElementsOnPlayfield(This,newVal) (This)->lpVtbl->put_ReflectElementsOnPlayfield(This,newVal)
#define ITable_get_EnvironmentImage(This,pVal) (This)->lpVtbl->get_EnvironmentImage(This,pVal)
#define ITable_put_EnvironmentImage(This,newVal) (This)->lpVtbl->put_EnvironmentImage(This,newVal)
#define ITable_get_BackglassMode(This,pVal) (This)->lpVtbl->get_BackglassMode(This,pVal)
#define ITable_put_BackglassMode(This,newVal) (This)->lpVtbl->put_BackglassMode(This,newVal)
#define ITable_get_Accelerometer(This,pVal) (This)->lpVtbl->get_Accelerometer(This,pVal)
#define ITable_put_Accelerometer(This,newVal) (This)->lpVtbl->put_Accelerometer(This,newVal)
#define ITable_get_AccelNormalMount(This,pVal) (This)->lpVtbl->get_AccelNormalMount(This,pVal)
#define ITable_put_AccelNormalMount(This,newVal) (This)->lpVtbl->put_AccelNormalMount(This,newVal)
#define ITable_get_AccelerometerAngle(This,pVal) (This)->lpVtbl->get_AccelerometerAngle(This,pVal)
#define ITable_put_AccelerometerAngle(This,newVal) (This)->lpVtbl->put_AccelerometerAngle(This,newVal)
#define ITable_get_GlobalDifficulty(This,pVal) (This)->lpVtbl->get_GlobalDifficulty(This,pVal)
#define ITable_put_GlobalDifficulty(This,newVal) (This)->lpVtbl->put_GlobalDifficulty(This,newVal)
#define ITable_get_TableHeight(This,pVal) (This)->lpVtbl->get_TableHeight(This,pVal)
#define ITable_put_TableHeight(This,newVal) (This)->lpVtbl->put_TableHeight(This,newVal)
#define ITable_get_DeadZone(This,pVal) (This)->lpVtbl->get_DeadZone(This,pVal)
#define ITable_put_DeadZone(This,newVal) (This)->lpVtbl->put_DeadZone(This,newVal)
#define ITable_get_LightAmbient(This,pVal) (This)->lpVtbl->get_LightAmbient(This,pVal)
#define ITable_put_LightAmbient(This,newVal) (This)->lpVtbl->put_LightAmbient(This,newVal)
#define ITable_get_Light0Emission(This,pVal) (This)->lpVtbl->get_Light0Emission(This,pVal)
#define ITable_put_Light0Emission(This,newVal) (This)->lpVtbl->put_Light0Emission(This,newVal)
#define ITable_get_LightHeight(This,pVal) (This)->lpVtbl->get_LightHeight(This,pVal)
#define ITable_put_LightHeight(This,newVal) (This)->lpVtbl->put_LightHeight(This,newVal)
#define ITable_get_LightRange(This,pVal) (This)->lpVtbl->get_LightRange(This,pVal)
#define ITable_put_LightRange(This,newVal) (This)->lpVtbl->put_LightRange(This,newVal)
#define ITable_get_EnvironmentEmissionScale(This,pVal) (This)->lpVtbl->get_EnvironmentEmissionScale(This,pVal)
#define ITable_put_EnvironmentEmissionScale(This,newVal) (This)->lpVtbl->put_EnvironmentEmissionScale(This,newVal)
#define ITable_get_LightEmissionScale(This,pVal) (This)->lpVtbl->get_LightEmissionScale(This,pVal)
#define ITable_put_LightEmissionScale(This,newVal) (This)->lpVtbl->put_LightEmissionScale(This,newVal)
#define ITable_get_AOScale(This,pVal) (This)->lpVtbl->get_AOScale(This,pVal)
#define ITable_put_AOScale(This,newVal) (This)->lpVtbl->put_AOScale(This,newVal)
#define ITable_get_SSRScale(This,pVal) (This)->lpVtbl->get_SSRScale(This,pVal)
#define ITable_put_SSRScale(This,newVal) (This)->lpVtbl->put_SSRScale(This,newVal)
#define ITable_get_TableSoundVolume(This,pVal) (This)->lpVtbl->get_TableSoundVolume(This,pVal)
#define ITable_put_TableSoundVolume(This,newVal) (This)->lpVtbl->put_TableSoundVolume(This,newVal)
#define ITable_get_TableMusicVolume(This,pVal) (This)->lpVtbl->get_TableMusicVolume(This,pVal)
#define ITable_put_TableMusicVolume(This,newVal) (This)->lpVtbl->put_TableMusicVolume(This,newVal)
#define ITable_get_TableAdaptiveVSync(This,pVal) (This)->lpVtbl->get_TableAdaptiveVSync(This,pVal)
#define ITable_put_TableAdaptiveVSync(This,newVal) (This)->lpVtbl->put_TableAdaptiveVSync(This,newVal)
#define ITable_get_BallReflection(This,pVal) (This)->lpVtbl->get_BallReflection(This,pVal)
#define ITable_put_BallReflection(This,newVal) (This)->lpVtbl->put_BallReflection(This,newVal)
#define ITable_get_PlayfieldReflectionStrength(This,pVal) (This)->lpVtbl->get_PlayfieldReflectionStrength(This,pVal)
#define ITable_put_PlayfieldReflectionStrength(This,newVal) (This)->lpVtbl->put_PlayfieldReflectionStrength(This,newVal)
#define ITable_get_BallTrail(This,pVal) (This)->lpVtbl->get_BallTrail(This,pVal)
#define ITable_put_BallTrail(This,newVal) (This)->lpVtbl->put_BallTrail(This,newVal)
#define ITable_get_TrailStrength(This,pVal) (This)->lpVtbl->get_TrailStrength(This,pVal)
#define ITable_put_TrailStrength(This,newVal) (This)->lpVtbl->put_TrailStrength(This,newVal)
#define ITable_get_BallPlayfieldReflectionScale(This,pVal) (This)->lpVtbl->get_BallPlayfieldReflectionScale(This,pVal)
#define ITable_put_BallPlayfieldReflectionScale(This,newVal) (This)->lpVtbl->put_BallPlayfieldReflectionScale(This,newVal)
#define ITable_get_DefaultBulbIntensityScale(This,pVal) (This)->lpVtbl->get_DefaultBulbIntensityScale(This,pVal)
#define ITable_put_DefaultBulbIntensityScale(This,newVal) (This)->lpVtbl->put_DefaultBulbIntensityScale(This,newVal)
#define ITable_get_DetailLevel(This,pVal) (This)->lpVtbl->get_DetailLevel(This,pVal)
#define ITable_put_DetailLevel(This,newVal) (This)->lpVtbl->put_DetailLevel(This,newVal)
#define ITable_get_NightDay(This,pVal) (This)->lpVtbl->get_NightDay(This,pVal)
#define ITable_put_NightDay(This,newVal) (This)->lpVtbl->put_NightDay(This,newVal)
#define ITable_get_GlobalAlphaAcc(This,pVal) (This)->lpVtbl->get_GlobalAlphaAcc(This,pVal)
#define ITable_put_GlobalAlphaAcc(This,newVal) (This)->lpVtbl->put_GlobalAlphaAcc(This,newVal)
#define ITable_get_GlobalDayNight(This,pVal) (This)->lpVtbl->get_GlobalDayNight(This,pVal)
#define ITable_put_GlobalDayNight(This,newVal) (This)->lpVtbl->put_GlobalDayNight(This,newVal)
#define ITable_get_Version(This,pVal) (This)->lpVtbl->get_Version(This,pVal)
#define ITable_get_VersionMajor(This,pVal) (This)->lpVtbl->get_VersionMajor(This,pVal)
#define ITable_get_VersionMinor(This,pVal) (This)->lpVtbl->get_VersionMinor(This,pVal)
#define ITable_get_VersionRevision(This,pVal) (This)->lpVtbl->get_VersionRevision(This,pVal)
#define ITable_get_VPBuildVersion(This,pVal) (This)->lpVtbl->get_VPBuildVersion(This,pVal)
#define ITable_get_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,pVal) (This)->lpVtbl->get_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,pVal)
#define ITable_put_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,val) (This)->lpVtbl->put_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,val)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITable_QueryInterface(ITable* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITable_AddRef(ITable* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITable_Release(ITable* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITable_GetTypeInfoCount(ITable* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITable_GetTypeInfo(ITable* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITable_GetIDsOfNames(ITable* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITable_Invoke(ITable* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITable methods ***/
static __WIDL_INLINE HRESULT ITable_get_GlassHeight(ITable* This,float *pVal) {
    return This->lpVtbl->get_GlassHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_GlassHeight(ITable* This,float newVal) {
    return This->lpVtbl->put_GlassHeight(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_PlayfieldMaterial(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_PlayfieldMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_PlayfieldMaterial(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_PlayfieldMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackdropColor(ITable* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_BackdropColor(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackdropColor(ITable* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_BackdropColor(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_SlopeMax(ITable* This,float *pVal) {
    return This->lpVtbl->get_SlopeMax(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_SlopeMax(ITable* This,float newVal) {
    return This->lpVtbl->put_SlopeMax(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_SlopeMin(ITable* This,float *pVal) {
    return This->lpVtbl->get_SlopeMin(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_SlopeMin(ITable* This,float newVal) {
    return This->lpVtbl->put_SlopeMin(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Inclination(ITable* This,float *pVal) {
    return This->lpVtbl->get_Inclination(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Inclination(ITable* This,float newVal) {
    return This->lpVtbl->put_Inclination(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_FieldOfView(ITable* This,float *pVal) {
    return This->lpVtbl->get_FieldOfView(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_FieldOfView(ITable* This,float newVal) {
    return This->lpVtbl->put_FieldOfView(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Layback(ITable* This,float *pVal) {
    return This->lpVtbl->get_Layback(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Layback(ITable* This,float newVal) {
    return This->lpVtbl->put_Layback(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Rotation(ITable* This,float *pVal) {
    return This->lpVtbl->get_Rotation(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Rotation(ITable* This,float newVal) {
    return This->lpVtbl->put_Rotation(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Scalex(ITable* This,float *pVal) {
    return This->lpVtbl->get_Scalex(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Scalex(ITable* This,float newVal) {
    return This->lpVtbl->put_Scalex(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Scaley(ITable* This,float *pVal) {
    return This->lpVtbl->get_Scaley(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Scaley(ITable* This,float newVal) {
    return This->lpVtbl->put_Scaley(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Scalez(ITable* This,float *pVal) {
    return This->lpVtbl->get_Scalez(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Scalez(ITable* This,float newVal) {
    return This->lpVtbl->put_Scalez(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Xlatex(ITable* This,float *pVal) {
    return This->lpVtbl->get_Xlatex(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Xlatex(ITable* This,float newVal) {
    return This->lpVtbl->put_Xlatex(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Xlatey(ITable* This,float *pVal) {
    return This->lpVtbl->get_Xlatey(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Xlatey(ITable* This,float newVal) {
    return This->lpVtbl->put_Xlatey(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Xlatez(ITable* This,float *pVal) {
    return This->lpVtbl->get_Xlatez(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Xlatez(ITable* This,float newVal) {
    return This->lpVtbl->put_Xlatez(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Gravity(ITable* This,float *pVal) {
    return This->lpVtbl->get_Gravity(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Gravity(ITable* This,float newVal) {
    return This->lpVtbl->put_Gravity(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Friction(ITable* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Friction(ITable* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Elasticity(ITable* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Elasticity(ITable* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_ElasticityFalloff(ITable* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_ElasticityFalloff(ITable* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Scatter(ITable* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Scatter(ITable* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_DefaultScatter(ITable* This,float *pVal) {
    return This->lpVtbl->get_DefaultScatter(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_DefaultScatter(ITable* This,float newVal) {
    return This->lpVtbl->put_DefaultScatter(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_NudgeTime(ITable* This,float *pVal) {
    return This->lpVtbl->get_NudgeTime(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_NudgeTime(ITable* This,float newVal) {
    return This->lpVtbl->put_NudgeTime(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_PlungerNormalize(ITable* This,int *pVal) {
    return This->lpVtbl->get_PlungerNormalize(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_PlungerNormalize(ITable* This,int newVal) {
    return This->lpVtbl->put_PlungerNormalize(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_PhysicsLoopTime(ITable* This,int *pVal) {
    return This->lpVtbl->get_PhysicsLoopTime(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_PhysicsLoopTime(ITable* This,int newVal) {
    return This->lpVtbl->put_PhysicsLoopTime(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_PlungerFilter(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_PlungerFilter(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_PlungerFilter(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_PlungerFilter(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_YieldTime(ITable* This,long *pVal) {
    return This->lpVtbl->get_YieldTime(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_YieldTime(ITable* This,long newVal) {
    return This->lpVtbl->put_YieldTime(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallImage(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_BallImage(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallImage(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_BallImage(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackdropImage_DT(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_BackdropImage_DT(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackdropImage_DT(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_BackdropImage_DT(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackdropImage_FS(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_BackdropImage_FS(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackdropImage_FS(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_BackdropImage_FS(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackdropImage_FSS(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_BackdropImage_FSS(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackdropImage_FSS(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_BackdropImage_FSS(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackdropImageApplyNightDay(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_BackdropImageApplyNightDay(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackdropImageApplyNightDay(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_BackdropImageApplyNightDay(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_ColorGradeImage(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_ColorGradeImage(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_ColorGradeImage(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_ColorGradeImage(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Width(ITable* This,float *pVal) {
    return This->lpVtbl->get_Width(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Width(ITable* This,float newVal) {
    return This->lpVtbl->put_Width(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Height(ITable* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Height(ITable* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_MaxSeparation(ITable* This,float *pVal) {
    return This->lpVtbl->get_MaxSeparation(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_MaxSeparation(ITable* This,float newVal) {
    return This->lpVtbl->put_MaxSeparation(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_ZPD(ITable* This,float *pVal) {
    return This->lpVtbl->get_ZPD(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_ZPD(ITable* This,float newVal) {
    return This->lpVtbl->put_ZPD(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Offset(ITable* This,float *pVal) {
    return This->lpVtbl->get_Offset(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Offset(ITable* This,float newVal) {
    return This->lpVtbl->put_Offset(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_GlobalStereo3D(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_GlobalStereo3D(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_GlobalStereo3D(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_GlobalStereo3D(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallDecalMode(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_BallDecalMode(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallDecalMode(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_BallDecalMode(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Image(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Image(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_FileName(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_FileName(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_Name(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Name(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableAntialiasing(ITable* This,UserDefaultOnOff *pVal) {
    return This->lpVtbl->get_EnableAntialiasing(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableAntialiasing(ITable* This,UserDefaultOnOff newVal) {
    return This->lpVtbl->put_EnableAntialiasing(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableAO(ITable* This,UserDefaultOnOff *pVal) {
    return This->lpVtbl->get_EnableAO(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableAO(ITable* This,UserDefaultOnOff newVal) {
    return This->lpVtbl->put_EnableAO(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableFXAA(ITable* This,FXAASettings *pVal) {
    return This->lpVtbl->get_EnableFXAA(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableFXAA(ITable* This,FXAASettings newVal) {
    return This->lpVtbl->put_EnableFXAA(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableSSR(ITable* This,UserDefaultOnOff *pVal) {
    return This->lpVtbl->get_EnableSSR(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableSSR(ITable* This,UserDefaultOnOff newVal) {
    return This->lpVtbl->put_EnableSSR(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BloomStrength(ITable* This,float *pVal) {
    return This->lpVtbl->get_BloomStrength(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BloomStrength(ITable* This,float newVal) {
    return This->lpVtbl->put_BloomStrength(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallFrontDecal(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_BallFrontDecal(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallFrontDecal(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_BallFrontDecal(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_OverridePhysics(ITable* This,PhysicsSet *pVal) {
    return This->lpVtbl->get_OverridePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_OverridePhysics(ITable* This,PhysicsSet newVal) {
    return This->lpVtbl->put_OverridePhysics(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_OverridePhysicsFlippers(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverridePhysicsFlippers(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_OverridePhysicsFlippers(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverridePhysicsFlippers(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableEMReels(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableEMReels(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableEMReels(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableEMReels(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnableDecals(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableDecals(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnableDecals(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableDecals(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_ShowDT(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowDT(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_ShowFSS(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowFSS(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_ReflectElementsOnPlayfield(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectElementsOnPlayfield(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_ReflectElementsOnPlayfield(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectElementsOnPlayfield(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnvironmentImage(ITable* This,BSTR *pVal) {
    return This->lpVtbl->get_EnvironmentImage(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnvironmentImage(ITable* This,BSTR newVal) {
    return This->lpVtbl->put_EnvironmentImage(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BackglassMode(ITable* This,BackglassIndex *pVal) {
    return This->lpVtbl->get_BackglassMode(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BackglassMode(ITable* This,BackglassIndex newVal) {
    return This->lpVtbl->put_BackglassMode(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Accelerometer(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Accelerometer(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Accelerometer(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Accelerometer(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_AccelNormalMount(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_AccelNormalMount(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_AccelNormalMount(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_AccelNormalMount(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_AccelerometerAngle(ITable* This,float *pVal) {
    return This->lpVtbl->get_AccelerometerAngle(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_AccelerometerAngle(ITable* This,float newVal) {
    return This->lpVtbl->put_AccelerometerAngle(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_GlobalDifficulty(ITable* This,float *pVal) {
    return This->lpVtbl->get_GlobalDifficulty(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_GlobalDifficulty(ITable* This,float newVal) {
    return This->lpVtbl->put_GlobalDifficulty(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_TableHeight(ITable* This,float *pVal) {
    return This->lpVtbl->get_TableHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_TableHeight(ITable* This,float newVal) {
    return This->lpVtbl->put_TableHeight(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_DeadZone(ITable* This,int *pVal) {
    return This->lpVtbl->get_DeadZone(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_DeadZone(ITable* This,int newVal) {
    return This->lpVtbl->put_DeadZone(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_LightAmbient(ITable* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_LightAmbient(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_LightAmbient(ITable* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_LightAmbient(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Light0Emission(ITable* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_Light0Emission(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Light0Emission(ITable* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_Light0Emission(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_LightHeight(ITable* This,float *pVal) {
    return This->lpVtbl->get_LightHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_LightHeight(ITable* This,float newVal) {
    return This->lpVtbl->put_LightHeight(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_LightRange(ITable* This,float *pVal) {
    return This->lpVtbl->get_LightRange(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_LightRange(ITable* This,float newVal) {
    return This->lpVtbl->put_LightRange(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_EnvironmentEmissionScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_EnvironmentEmissionScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_EnvironmentEmissionScale(ITable* This,float newVal) {
    return This->lpVtbl->put_EnvironmentEmissionScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_LightEmissionScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_LightEmissionScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_LightEmissionScale(ITable* This,float newVal) {
    return This->lpVtbl->put_LightEmissionScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_AOScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_AOScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_AOScale(ITable* This,float newVal) {
    return This->lpVtbl->put_AOScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_SSRScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_SSRScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_SSRScale(ITable* This,float newVal) {
    return This->lpVtbl->put_SSRScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_TableSoundVolume(ITable* This,int *pVal) {
    return This->lpVtbl->get_TableSoundVolume(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_TableSoundVolume(ITable* This,int newVal) {
    return This->lpVtbl->put_TableSoundVolume(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_TableMusicVolume(ITable* This,int *pVal) {
    return This->lpVtbl->get_TableMusicVolume(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_TableMusicVolume(ITable* This,int newVal) {
    return This->lpVtbl->put_TableMusicVolume(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_TableAdaptiveVSync(ITable* This,int *pVal) {
    return This->lpVtbl->get_TableAdaptiveVSync(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_TableAdaptiveVSync(ITable* This,int newVal) {
    return This->lpVtbl->put_TableAdaptiveVSync(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallReflection(ITable* This,UserDefaultOnOff *pVal) {
    return This->lpVtbl->get_BallReflection(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallReflection(ITable* This,UserDefaultOnOff newVal) {
    return This->lpVtbl->put_BallReflection(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_PlayfieldReflectionStrength(ITable* This,int *pVal) {
    return This->lpVtbl->get_PlayfieldReflectionStrength(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_PlayfieldReflectionStrength(ITable* This,int newVal) {
    return This->lpVtbl->put_PlayfieldReflectionStrength(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallTrail(ITable* This,UserDefaultOnOff *pVal) {
    return This->lpVtbl->get_BallTrail(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallTrail(ITable* This,UserDefaultOnOff newVal) {
    return This->lpVtbl->put_BallTrail(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_TrailStrength(ITable* This,int *pVal) {
    return This->lpVtbl->get_TrailStrength(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_TrailStrength(ITable* This,int newVal) {
    return This->lpVtbl->put_TrailStrength(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_BallPlayfieldReflectionScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_BallPlayfieldReflectionScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_BallPlayfieldReflectionScale(ITable* This,float newVal) {
    return This->lpVtbl->put_BallPlayfieldReflectionScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_DefaultBulbIntensityScale(ITable* This,float *pVal) {
    return This->lpVtbl->get_DefaultBulbIntensityScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_DefaultBulbIntensityScale(ITable* This,float newVal) {
    return This->lpVtbl->put_DefaultBulbIntensityScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_DetailLevel(ITable* This,int *pVal) {
    return This->lpVtbl->get_DetailLevel(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_DetailLevel(ITable* This,int newVal) {
    return This->lpVtbl->put_DetailLevel(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_NightDay(ITable* This,int *pVal) {
    return This->lpVtbl->get_NightDay(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_NightDay(ITable* This,int newVal) {
    return This->lpVtbl->put_NightDay(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_GlobalAlphaAcc(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_GlobalAlphaAcc(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_GlobalAlphaAcc(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_GlobalAlphaAcc(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_GlobalDayNight(ITable* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_GlobalDayNight(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_GlobalDayNight(ITable* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_GlobalDayNight(This,newVal);
}
static __WIDL_INLINE HRESULT ITable_get_Version(ITable* This,int *pVal) {
    return This->lpVtbl->get_Version(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_VersionMajor(ITable* This,int *pVal) {
    return This->lpVtbl->get_VersionMajor(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_VersionMinor(ITable* This,int *pVal) {
    return This->lpVtbl->get_VersionMinor(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_VersionRevision(ITable* This,int *pVal) {
    return This->lpVtbl->get_VersionRevision(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_VPBuildVersion(ITable* This,int *pVal) {
    return This->lpVtbl->get_VPBuildVersion(This,pVal);
}
static __WIDL_INLINE HRESULT ITable_get_Option(ITable* This,BSTR OptionName,float MinValue,float MaxValue,float Step,float DefaultValue,int Unit,VARIANT values,float *pVal) {
    return This->lpVtbl->get_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,pVal);
}
static __WIDL_INLINE HRESULT ITable_put_Option(ITable* This,BSTR OptionName,float MinValue,float MaxValue,float Step,float DefaultValue,int Unit,VARIANT values,float val) {
    return This->lpVtbl->put_Option(This,OptionName,MinValue,MaxValue,Step,DefaultValue,Unit,values,val);
}
#endif
#endif

#endif


#endif  /* __ITable_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITableGlobal interface
 */
#ifndef __ITableGlobal_INTERFACE_DEFINED__
#define __ITableGlobal_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITableGlobal, 0x2981e0e0, 0x8e64, 0x44fc, 0x9a,0x01, 0x64,0xcf,0xfa,0x1f,0x7d,0xba);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2981e0e0-8e64-44fc-9a01-64cffa1f7dba")
ITableGlobal : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE PlaySound(
        BSTR Sound,
        long LoopCount = 1,
        float Volume = 1,
        float pan = 0,
        float randompitch = 0,
        long pitch = 0,
        VARIANT_BOOL usesame = 0,
        VARIANT_BOOL restart = 1,
        float front_rear_fade = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LeftFlipperKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RightFlipperKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StagedLeftFlipperKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StagedRightFlipperKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LeftTiltKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RightTiltKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CenterTiltKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlungerKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE PlayMusic(
        BSTR str,
        float Volume = 1) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MusicVolume(
        float Volume) = 0;

    virtual HRESULT STDMETHODCALLTYPE EndMusic(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StartGameKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserDirectory(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TablesDirectory(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MusicDirectory(
        VARIANT pSubDir,
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScriptsDirectory(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlatformOS(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlatformCPU(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlatformBits(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowCursor(
        VARIANT_BOOL show) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GetPlayerHWnd(
        SIZE_T *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE StopSound(
        BSTR Sound) = 0;

    virtual HRESULT STDMETHODCALLTYPE SaveValue(
        BSTR TableName,
        BSTR ValueName,
        VARIANT Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE LoadValue(
        BSTR TableName,
        BSTR ValueName,
        VARIANT *Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActiveBall(
        IBall **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AddCreditKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AddCreditKey2(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GameTime(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SystemTime(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCustomParam(
        long index,
        BSTR *param) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Setting(
        BSTR Section,
        BSTR SettingName,
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTextFile(
        BSTR FileName,
        BSTR *pContents) = 0;

    virtual HRESULT STDMETHODCALLTYPE BeginModal(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE EndModal(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Nudge(
        float Angle,
        float Force) = 0;

    virtual HRESULT STDMETHODCALLTYPE NudgeGetCalibration(
        VARIANT *XMax,
        VARIANT *YMax,
        VARIANT *XGain,
        VARIANT *YGain,
        VARIANT *DeadZone,
        VARIANT *TiltSensitivty) = 0;

    virtual HRESULT STDMETHODCALLTYPE NudgeSetCalibration(
        int XMax,
        int YMax,
        int XGain,
        int YGain,
        int DeadZone,
        int TiltSensitivty) = 0;

    virtual HRESULT STDMETHODCALLTYPE NudgeSensorStatus(
        VARIANT *XNudge,
        VARIANT *YNudge) = 0;

    virtual HRESULT STDMETHODCALLTYPE NudgeTiltStatus(
        VARIANT *XPlumb,
        VARIANT *YPlumb,
        VARIANT *TiltPercent) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MechanicalTilt(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LeftMagnaSave(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RightMagnaSave(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ExitGame(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LockbarKey(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_JoyCustomKey(
        long index,
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE FireKnocker(
        int Count = 1) = 0;

    virtual HRESULT STDMETHODCALLTYPE QuitPlayer(
        int CloseType = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowDT(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowFSS(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NightDay(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBalls(
        SAFEARRAY **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetElements(
        SAFEARRAY **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetElementByName(
        BSTR name,
        IDispatch **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActiveTable(
        ITable **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDWidth(
        int pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDHeight(
        int pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDPixels(
        VARIANT pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDColoredPixels(
        VARIANT pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Version(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionMajor(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionMinor(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VersionRevision(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VPBuildVersion(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSerialDevices(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenSerial(
        BSTR device) = 0;

    virtual HRESULT STDMETHODCALLTYPE CloseSerial(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE FlushSerial(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetupSerial(
        int baud,
        int bits,
        int parity,
        int stopbit,
        VARIANT_BOOL rts,
        VARIANT_BOOL dtr) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadSerial(
        int size,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteSerial(
        VARIANT pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RenderingMode(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE UpdateMaterial(
        BSTR pVal,
        float wrapLighting,
        float roughness,
        float glossyImageLerp,
        float thickness,
        float edge,
        float edgeAlpha,
        float opacity,
        OLE_COLOR base,
        OLE_COLOR glossy,
        OLE_COLOR clearcoat,
        VARIANT_BOOL isMetal,
        VARIANT_BOOL opacityActive,
        float elasticity,
        float elasticityFalloff,
        float friction,
        float scatterAngle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMaterial(
        BSTR pVal,
        VARIANT *wrapLighting,
        VARIANT *roughness,
        VARIANT *glossyImageLerp,
        VARIANT *thickness,
        VARIANT *edge,
        VARIANT *edgeAlpha,
        VARIANT *opacity,
        VARIANT *base,
        VARIANT *glossy,
        VARIANT *clearcoat,
        VARIANT *isMetal,
        VARIANT *opacityActive,
        VARIANT *elasticity,
        VARIANT *elasticityFalloff,
        VARIANT *friction,
        VARIANT *scatterAngle) = 0;

    virtual HRESULT STDMETHODCALLTYPE UpdateMaterialPhysics(
        BSTR pVal,
        float elasticity,
        float elasticityFalloff,
        float friction,
        float scatterAngle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMaterialPhysics(
        BSTR pVal,
        VARIANT *elasticity,
        VARIANT *elasticityFalloff,
        VARIANT *friction,
        VARIANT *scatterAngle) = 0;

    virtual HRESULT STDMETHODCALLTYPE MaterialColor(
        BSTR name,
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WindowWidth(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WindowHeight(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisableStaticPrerendering(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisableStaticPrerendering(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE LoadTexture(
        BSTR imageName,
        BSTR fileName) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITableGlobal, 0x2981e0e0, 0x8e64, 0x44fc, 0x9a,0x01, 0x64,0xcf,0xfa,0x1f,0x7d,0xba)
#endif
#else
typedef struct ITableGlobalVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITableGlobal *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITableGlobal *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITableGlobal *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITableGlobal *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITableGlobal *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITableGlobal *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITableGlobal *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITableGlobal methods ***/
    HRESULT (STDMETHODCALLTYPE *PlaySound)(
        ITableGlobal *This,
        BSTR Sound,
        long LoopCount,
        float Volume,
        float pan,
        float randompitch,
        long pitch,
        VARIANT_BOOL usesame,
        VARIANT_BOOL restart,
        float front_rear_fade);

    HRESULT (STDMETHODCALLTYPE *get_LeftFlipperKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RightFlipperKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_StagedLeftFlipperKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_StagedRightFlipperKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_LeftTiltKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RightTiltKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_CenterTiltKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_PlungerKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *PlayMusic)(
        ITableGlobal *This,
        BSTR str,
        float Volume);

    HRESULT (STDMETHODCALLTYPE *put_MusicVolume)(
        ITableGlobal *This,
        float Volume);

    HRESULT (STDMETHODCALLTYPE *EndMusic)(
        ITableGlobal *This);

    HRESULT (STDMETHODCALLTYPE *get_StartGameKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_UserDirectory)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_TablesDirectory)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_MusicDirectory)(
        ITableGlobal *This,
        VARIANT pSubDir,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ScriptsDirectory)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_PlatformOS)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_PlatformCPU)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_PlatformBits)(
        ITableGlobal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowCursor)(
        ITableGlobal *This,
        VARIANT_BOOL show);

    HRESULT (STDMETHODCALLTYPE *get_GetPlayerHWnd)(
        ITableGlobal *This,
        SIZE_T *pVal);

    HRESULT (STDMETHODCALLTYPE *StopSound)(
        ITableGlobal *This,
        BSTR Sound);

    HRESULT (STDMETHODCALLTYPE *SaveValue)(
        ITableGlobal *This,
        BSTR TableName,
        BSTR ValueName,
        VARIANT Value);

    HRESULT (STDMETHODCALLTYPE *LoadValue)(
        ITableGlobal *This,
        BSTR TableName,
        BSTR ValueName,
        VARIANT *Value);

    HRESULT (STDMETHODCALLTYPE *get_ActiveBall)(
        ITableGlobal *This,
        IBall **pVal);

    HRESULT (STDMETHODCALLTYPE *get_AddCreditKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_AddCreditKey2)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_GameTime)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_SystemTime)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *GetCustomParam)(
        ITableGlobal *This,
        long index,
        BSTR *param);

    HRESULT (STDMETHODCALLTYPE *get_Setting)(
        ITableGlobal *This,
        BSTR Section,
        BSTR SettingName,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *GetTextFile)(
        ITableGlobal *This,
        BSTR FileName,
        BSTR *pContents);

    HRESULT (STDMETHODCALLTYPE *BeginModal)(
        ITableGlobal *This);

    HRESULT (STDMETHODCALLTYPE *EndModal)(
        ITableGlobal *This);

    HRESULT (STDMETHODCALLTYPE *Nudge)(
        ITableGlobal *This,
        float Angle,
        float Force);

    HRESULT (STDMETHODCALLTYPE *NudgeGetCalibration)(
        ITableGlobal *This,
        VARIANT *XMax,
        VARIANT *YMax,
        VARIANT *XGain,
        VARIANT *YGain,
        VARIANT *DeadZone,
        VARIANT *TiltSensitivty);

    HRESULT (STDMETHODCALLTYPE *NudgeSetCalibration)(
        ITableGlobal *This,
        int XMax,
        int YMax,
        int XGain,
        int YGain,
        int DeadZone,
        int TiltSensitivty);

    HRESULT (STDMETHODCALLTYPE *NudgeSensorStatus)(
        ITableGlobal *This,
        VARIANT *XNudge,
        VARIANT *YNudge);

    HRESULT (STDMETHODCALLTYPE *NudgeTiltStatus)(
        ITableGlobal *This,
        VARIANT *XPlumb,
        VARIANT *YPlumb,
        VARIANT *TiltPercent);

    HRESULT (STDMETHODCALLTYPE *get_MechanicalTilt)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_LeftMagnaSave)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RightMagnaSave)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ExitGame)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_LockbarKey)(
        ITableGlobal *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *get_JoyCustomKey)(
        ITableGlobal *This,
        long index,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *FireKnocker)(
        ITableGlobal *This,
        int Count);

    HRESULT (STDMETHODCALLTYPE *QuitPlayer)(
        ITableGlobal *This,
        int CloseType);

    HRESULT (STDMETHODCALLTYPE *get_ShowDT)(
        ITableGlobal *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowFSS)(
        ITableGlobal *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_NightDay)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *GetBalls)(
        ITableGlobal *This,
        SAFEARRAY **pVal);

    HRESULT (STDMETHODCALLTYPE *GetElements)(
        ITableGlobal *This,
        SAFEARRAY **pVal);

    HRESULT (STDMETHODCALLTYPE *GetElementByName)(
        ITableGlobal *This,
        BSTR name,
        IDispatch **pVal);

    HRESULT (STDMETHODCALLTYPE *get_ActiveTable)(
        ITableGlobal *This,
        ITable **pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDWidth)(
        ITableGlobal *This,
        int pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDHeight)(
        ITableGlobal *This,
        int pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDPixels)(
        ITableGlobal *This,
        VARIANT pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDColoredPixels)(
        ITableGlobal *This,
        VARIANT pVal);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionMajor)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionMinor)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VersionRevision)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_VPBuildVersion)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *GetSerialDevices)(
        ITableGlobal *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *OpenSerial)(
        ITableGlobal *This,
        BSTR device);

    HRESULT (STDMETHODCALLTYPE *CloseSerial)(
        ITableGlobal *This);

    HRESULT (STDMETHODCALLTYPE *FlushSerial)(
        ITableGlobal *This);

    HRESULT (STDMETHODCALLTYPE *SetupSerial)(
        ITableGlobal *This,
        int baud,
        int bits,
        int parity,
        int stopbit,
        VARIANT_BOOL rts,
        VARIANT_BOOL dtr);

    HRESULT (STDMETHODCALLTYPE *ReadSerial)(
        ITableGlobal *This,
        int size,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *WriteSerial)(
        ITableGlobal *This,
        VARIANT pVal);

    HRESULT (STDMETHODCALLTYPE *get_RenderingMode)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *UpdateMaterial)(
        ITableGlobal *This,
        BSTR pVal,
        float wrapLighting,
        float roughness,
        float glossyImageLerp,
        float thickness,
        float edge,
        float edgeAlpha,
        float opacity,
        OLE_COLOR base,
        OLE_COLOR glossy,
        OLE_COLOR clearcoat,
        VARIANT_BOOL isMetal,
        VARIANT_BOOL opacityActive,
        float elasticity,
        float elasticityFalloff,
        float friction,
        float scatterAngle);

    HRESULT (STDMETHODCALLTYPE *GetMaterial)(
        ITableGlobal *This,
        BSTR pVal,
        VARIANT *wrapLighting,
        VARIANT *roughness,
        VARIANT *glossyImageLerp,
        VARIANT *thickness,
        VARIANT *edge,
        VARIANT *edgeAlpha,
        VARIANT *opacity,
        VARIANT *base,
        VARIANT *glossy,
        VARIANT *clearcoat,
        VARIANT *isMetal,
        VARIANT *opacityActive,
        VARIANT *elasticity,
        VARIANT *elasticityFalloff,
        VARIANT *friction,
        VARIANT *scatterAngle);

    HRESULT (STDMETHODCALLTYPE *UpdateMaterialPhysics)(
        ITableGlobal *This,
        BSTR pVal,
        float elasticity,
        float elasticityFalloff,
        float friction,
        float scatterAngle);

    HRESULT (STDMETHODCALLTYPE *GetMaterialPhysics)(
        ITableGlobal *This,
        BSTR pVal,
        VARIANT *elasticity,
        VARIANT *elasticityFalloff,
        VARIANT *friction,
        VARIANT *scatterAngle);

    HRESULT (STDMETHODCALLTYPE *MaterialColor)(
        ITableGlobal *This,
        BSTR name,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_WindowWidth)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_WindowHeight)(
        ITableGlobal *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_DisableStaticPrerendering)(
        ITableGlobal *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisableStaticPrerendering)(
        ITableGlobal *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *LoadTexture)(
        ITableGlobal *This,
        BSTR imageName,
        BSTR fileName);

    END_INTERFACE
} ITableGlobalVtbl;

interface ITableGlobal {
    CONST_VTBL ITableGlobalVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITableGlobal_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITableGlobal_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITableGlobal_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITableGlobal_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITableGlobal_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITableGlobal_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITableGlobal_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITableGlobal methods ***/
#define ITableGlobal_PlaySound(This,Sound,LoopCount,Volume,pan,randompitch,pitch,usesame,restart,front_rear_fade) (This)->lpVtbl->PlaySound(This,Sound,LoopCount,Volume,pan,randompitch,pitch,usesame,restart,front_rear_fade)
#define ITableGlobal_get_LeftFlipperKey(This,pVal) (This)->lpVtbl->get_LeftFlipperKey(This,pVal)
#define ITableGlobal_get_RightFlipperKey(This,pVal) (This)->lpVtbl->get_RightFlipperKey(This,pVal)
#define ITableGlobal_get_StagedLeftFlipperKey(This,pVal) (This)->lpVtbl->get_StagedLeftFlipperKey(This,pVal)
#define ITableGlobal_get_StagedRightFlipperKey(This,pVal) (This)->lpVtbl->get_StagedRightFlipperKey(This,pVal)
#define ITableGlobal_get_LeftTiltKey(This,pVal) (This)->lpVtbl->get_LeftTiltKey(This,pVal)
#define ITableGlobal_get_RightTiltKey(This,pVal) (This)->lpVtbl->get_RightTiltKey(This,pVal)
#define ITableGlobal_get_CenterTiltKey(This,pVal) (This)->lpVtbl->get_CenterTiltKey(This,pVal)
#define ITableGlobal_get_PlungerKey(This,pVal) (This)->lpVtbl->get_PlungerKey(This,pVal)
#define ITableGlobal_PlayMusic(This,str,Volume) (This)->lpVtbl->PlayMusic(This,str,Volume)
#define ITableGlobal_put_MusicVolume(This,Volume) (This)->lpVtbl->put_MusicVolume(This,Volume)
#define ITableGlobal_EndMusic(This) (This)->lpVtbl->EndMusic(This)
#define ITableGlobal_get_StartGameKey(This,pVal) (This)->lpVtbl->get_StartGameKey(This,pVal)
#define ITableGlobal_get_UserDirectory(This,pVal) (This)->lpVtbl->get_UserDirectory(This,pVal)
#define ITableGlobal_get_TablesDirectory(This,pVal) (This)->lpVtbl->get_TablesDirectory(This,pVal)
#define ITableGlobal_get_MusicDirectory(This,pSubDir,pVal) (This)->lpVtbl->get_MusicDirectory(This,pSubDir,pVal)
#define ITableGlobal_get_ScriptsDirectory(This,pVal) (This)->lpVtbl->get_ScriptsDirectory(This,pVal)
#define ITableGlobal_get_PlatformOS(This,pVal) (This)->lpVtbl->get_PlatformOS(This,pVal)
#define ITableGlobal_get_PlatformCPU(This,pVal) (This)->lpVtbl->get_PlatformCPU(This,pVal)
#define ITableGlobal_get_PlatformBits(This,pVal) (This)->lpVtbl->get_PlatformBits(This,pVal)
#define ITableGlobal_put_ShowCursor(This,show) (This)->lpVtbl->put_ShowCursor(This,show)
#define ITableGlobal_get_GetPlayerHWnd(This,pVal) (This)->lpVtbl->get_GetPlayerHWnd(This,pVal)
#define ITableGlobal_StopSound(This,Sound) (This)->lpVtbl->StopSound(This,Sound)
#define ITableGlobal_SaveValue(This,TableName,ValueName,Value) (This)->lpVtbl->SaveValue(This,TableName,ValueName,Value)
#define ITableGlobal_LoadValue(This,TableName,ValueName,Value) (This)->lpVtbl->LoadValue(This,TableName,ValueName,Value)
#define ITableGlobal_get_ActiveBall(This,pVal) (This)->lpVtbl->get_ActiveBall(This,pVal)
#define ITableGlobal_get_AddCreditKey(This,pVal) (This)->lpVtbl->get_AddCreditKey(This,pVal)
#define ITableGlobal_get_AddCreditKey2(This,pVal) (This)->lpVtbl->get_AddCreditKey2(This,pVal)
#define ITableGlobal_get_GameTime(This,pVal) (This)->lpVtbl->get_GameTime(This,pVal)
#define ITableGlobal_get_SystemTime(This,pVal) (This)->lpVtbl->get_SystemTime(This,pVal)
#define ITableGlobal_GetCustomParam(This,index,param) (This)->lpVtbl->GetCustomParam(This,index,param)
#define ITableGlobal_get_Setting(This,Section,SettingName,pVal) (This)->lpVtbl->get_Setting(This,Section,SettingName,pVal)
#define ITableGlobal_GetTextFile(This,FileName,pContents) (This)->lpVtbl->GetTextFile(This,FileName,pContents)
#define ITableGlobal_BeginModal(This) (This)->lpVtbl->BeginModal(This)
#define ITableGlobal_EndModal(This) (This)->lpVtbl->EndModal(This)
#define ITableGlobal_Nudge(This,Angle,Force) (This)->lpVtbl->Nudge(This,Angle,Force)
#define ITableGlobal_NudgeGetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty) (This)->lpVtbl->NudgeGetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty)
#define ITableGlobal_NudgeSetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty) (This)->lpVtbl->NudgeSetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty)
#define ITableGlobal_NudgeSensorStatus(This,XNudge,YNudge) (This)->lpVtbl->NudgeSensorStatus(This,XNudge,YNudge)
#define ITableGlobal_NudgeTiltStatus(This,XPlumb,YPlumb,TiltPercent) (This)->lpVtbl->NudgeTiltStatus(This,XPlumb,YPlumb,TiltPercent)
#define ITableGlobal_get_MechanicalTilt(This,pVal) (This)->lpVtbl->get_MechanicalTilt(This,pVal)
#define ITableGlobal_get_LeftMagnaSave(This,pVal) (This)->lpVtbl->get_LeftMagnaSave(This,pVal)
#define ITableGlobal_get_RightMagnaSave(This,pVal) (This)->lpVtbl->get_RightMagnaSave(This,pVal)
#define ITableGlobal_get_ExitGame(This,pVal) (This)->lpVtbl->get_ExitGame(This,pVal)
#define ITableGlobal_get_LockbarKey(This,pVal) (This)->lpVtbl->get_LockbarKey(This,pVal)
#define ITableGlobal_get_JoyCustomKey(This,index,pVal) (This)->lpVtbl->get_JoyCustomKey(This,index,pVal)
#define ITableGlobal_FireKnocker(This,Count) (This)->lpVtbl->FireKnocker(This,Count)
#define ITableGlobal_QuitPlayer(This,CloseType) (This)->lpVtbl->QuitPlayer(This,CloseType)
#define ITableGlobal_get_ShowDT(This,pVal) (This)->lpVtbl->get_ShowDT(This,pVal)
#define ITableGlobal_get_ShowFSS(This,pVal) (This)->lpVtbl->get_ShowFSS(This,pVal)
#define ITableGlobal_get_NightDay(This,pVal) (This)->lpVtbl->get_NightDay(This,pVal)
#define ITableGlobal_GetBalls(This,pVal) (This)->lpVtbl->GetBalls(This,pVal)
#define ITableGlobal_GetElements(This,pVal) (This)->lpVtbl->GetElements(This,pVal)
#define ITableGlobal_GetElementByName(This,name,pVal) (This)->lpVtbl->GetElementByName(This,name,pVal)
#define ITableGlobal_get_ActiveTable(This,pVal) (This)->lpVtbl->get_ActiveTable(This,pVal)
#define ITableGlobal_put_DMDWidth(This,pVal) (This)->lpVtbl->put_DMDWidth(This,pVal)
#define ITableGlobal_put_DMDHeight(This,pVal) (This)->lpVtbl->put_DMDHeight(This,pVal)
#define ITableGlobal_put_DMDPixels(This,pVal) (This)->lpVtbl->put_DMDPixels(This,pVal)
#define ITableGlobal_put_DMDColoredPixels(This,pVal) (This)->lpVtbl->put_DMDColoredPixels(This,pVal)
#define ITableGlobal_get_Version(This,pVal) (This)->lpVtbl->get_Version(This,pVal)
#define ITableGlobal_get_VersionMajor(This,pVal) (This)->lpVtbl->get_VersionMajor(This,pVal)
#define ITableGlobal_get_VersionMinor(This,pVal) (This)->lpVtbl->get_VersionMinor(This,pVal)
#define ITableGlobal_get_VersionRevision(This,pVal) (This)->lpVtbl->get_VersionRevision(This,pVal)
#define ITableGlobal_get_VPBuildVersion(This,pVal) (This)->lpVtbl->get_VPBuildVersion(This,pVal)
#define ITableGlobal_GetSerialDevices(This,pVal) (This)->lpVtbl->GetSerialDevices(This,pVal)
#define ITableGlobal_OpenSerial(This,device) (This)->lpVtbl->OpenSerial(This,device)
#define ITableGlobal_CloseSerial(This) (This)->lpVtbl->CloseSerial(This)
#define ITableGlobal_FlushSerial(This) (This)->lpVtbl->FlushSerial(This)
#define ITableGlobal_SetupSerial(This,baud,bits,parity,stopbit,rts,dtr) (This)->lpVtbl->SetupSerial(This,baud,bits,parity,stopbit,rts,dtr)
#define ITableGlobal_ReadSerial(This,size,pVal) (This)->lpVtbl->ReadSerial(This,size,pVal)
#define ITableGlobal_WriteSerial(This,pVal) (This)->lpVtbl->WriteSerial(This,pVal)
#define ITableGlobal_get_RenderingMode(This,pVal) (This)->lpVtbl->get_RenderingMode(This,pVal)
#define ITableGlobal_UpdateMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle) (This)->lpVtbl->UpdateMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle)
#define ITableGlobal_GetMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle) (This)->lpVtbl->GetMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle)
#define ITableGlobal_UpdateMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle) (This)->lpVtbl->UpdateMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle)
#define ITableGlobal_GetMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle) (This)->lpVtbl->GetMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle)
#define ITableGlobal_MaterialColor(This,name,newVal) (This)->lpVtbl->MaterialColor(This,name,newVal)
#define ITableGlobal_get_WindowWidth(This,pVal) (This)->lpVtbl->get_WindowWidth(This,pVal)
#define ITableGlobal_get_WindowHeight(This,pVal) (This)->lpVtbl->get_WindowHeight(This,pVal)
#define ITableGlobal_get_DisableStaticPrerendering(This,pVal) (This)->lpVtbl->get_DisableStaticPrerendering(This,pVal)
#define ITableGlobal_put_DisableStaticPrerendering(This,newVal) (This)->lpVtbl->put_DisableStaticPrerendering(This,newVal)
#define ITableGlobal_LoadTexture(This,imageName,fileName) (This)->lpVtbl->LoadTexture(This,imageName,fileName)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITableGlobal_QueryInterface(ITableGlobal* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITableGlobal_AddRef(ITableGlobal* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITableGlobal_Release(ITableGlobal* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITableGlobal_GetTypeInfoCount(ITableGlobal* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetTypeInfo(ITableGlobal* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetIDsOfNames(ITableGlobal* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITableGlobal_Invoke(ITableGlobal* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITableGlobal methods ***/
static __WIDL_INLINE HRESULT ITableGlobal_PlaySound(ITableGlobal* This,BSTR Sound,long LoopCount,float Volume,float pan,float randompitch,long pitch,VARIANT_BOOL usesame,VARIANT_BOOL restart,float front_rear_fade) {
    return This->lpVtbl->PlaySound(This,Sound,LoopCount,Volume,pan,randompitch,pitch,usesame,restart,front_rear_fade);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_LeftFlipperKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_LeftFlipperKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_RightFlipperKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_RightFlipperKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_StagedLeftFlipperKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_StagedLeftFlipperKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_StagedRightFlipperKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_StagedRightFlipperKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_LeftTiltKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_LeftTiltKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_RightTiltKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_RightTiltKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_CenterTiltKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_CenterTiltKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_PlungerKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_PlungerKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_PlayMusic(ITableGlobal* This,BSTR str,float Volume) {
    return This->lpVtbl->PlayMusic(This,str,Volume);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_MusicVolume(ITableGlobal* This,float Volume) {
    return This->lpVtbl->put_MusicVolume(This,Volume);
}
static __WIDL_INLINE HRESULT ITableGlobal_EndMusic(ITableGlobal* This) {
    return This->lpVtbl->EndMusic(This);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_StartGameKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_StartGameKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_UserDirectory(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_UserDirectory(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_TablesDirectory(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_TablesDirectory(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_MusicDirectory(ITableGlobal* This,VARIANT pSubDir,BSTR *pVal) {
    return This->lpVtbl->get_MusicDirectory(This,pSubDir,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ScriptsDirectory(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_ScriptsDirectory(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_PlatformOS(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_PlatformOS(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_PlatformCPU(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_PlatformCPU(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_PlatformBits(ITableGlobal* This,BSTR *pVal) {
    return This->lpVtbl->get_PlatformBits(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_ShowCursor(ITableGlobal* This,VARIANT_BOOL show) {
    return This->lpVtbl->put_ShowCursor(This,show);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_GetPlayerHWnd(ITableGlobal* This,SIZE_T *pVal) {
    return This->lpVtbl->get_GetPlayerHWnd(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_StopSound(ITableGlobal* This,BSTR Sound) {
    return This->lpVtbl->StopSound(This,Sound);
}
static __WIDL_INLINE HRESULT ITableGlobal_SaveValue(ITableGlobal* This,BSTR TableName,BSTR ValueName,VARIANT Value) {
    return This->lpVtbl->SaveValue(This,TableName,ValueName,Value);
}
static __WIDL_INLINE HRESULT ITableGlobal_LoadValue(ITableGlobal* This,BSTR TableName,BSTR ValueName,VARIANT *Value) {
    return This->lpVtbl->LoadValue(This,TableName,ValueName,Value);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ActiveBall(ITableGlobal* This,IBall **pVal) {
    return This->lpVtbl->get_ActiveBall(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_AddCreditKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_AddCreditKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_AddCreditKey2(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_AddCreditKey2(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_GameTime(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_GameTime(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_SystemTime(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_SystemTime(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetCustomParam(ITableGlobal* This,long index,BSTR *param) {
    return This->lpVtbl->GetCustomParam(This,index,param);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_Setting(ITableGlobal* This,BSTR Section,BSTR SettingName,BSTR *pVal) {
    return This->lpVtbl->get_Setting(This,Section,SettingName,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetTextFile(ITableGlobal* This,BSTR FileName,BSTR *pContents) {
    return This->lpVtbl->GetTextFile(This,FileName,pContents);
}
static __WIDL_INLINE HRESULT ITableGlobal_BeginModal(ITableGlobal* This) {
    return This->lpVtbl->BeginModal(This);
}
static __WIDL_INLINE HRESULT ITableGlobal_EndModal(ITableGlobal* This) {
    return This->lpVtbl->EndModal(This);
}
static __WIDL_INLINE HRESULT ITableGlobal_Nudge(ITableGlobal* This,float Angle,float Force) {
    return This->lpVtbl->Nudge(This,Angle,Force);
}
static __WIDL_INLINE HRESULT ITableGlobal_NudgeGetCalibration(ITableGlobal* This,VARIANT *XMax,VARIANT *YMax,VARIANT *XGain,VARIANT *YGain,VARIANT *DeadZone,VARIANT *TiltSensitivty) {
    return This->lpVtbl->NudgeGetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty);
}
static __WIDL_INLINE HRESULT ITableGlobal_NudgeSetCalibration(ITableGlobal* This,int XMax,int YMax,int XGain,int YGain,int DeadZone,int TiltSensitivty) {
    return This->lpVtbl->NudgeSetCalibration(This,XMax,YMax,XGain,YGain,DeadZone,TiltSensitivty);
}
static __WIDL_INLINE HRESULT ITableGlobal_NudgeSensorStatus(ITableGlobal* This,VARIANT *XNudge,VARIANT *YNudge) {
    return This->lpVtbl->NudgeSensorStatus(This,XNudge,YNudge);
}
static __WIDL_INLINE HRESULT ITableGlobal_NudgeTiltStatus(ITableGlobal* This,VARIANT *XPlumb,VARIANT *YPlumb,VARIANT *TiltPercent) {
    return This->lpVtbl->NudgeTiltStatus(This,XPlumb,YPlumb,TiltPercent);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_MechanicalTilt(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_MechanicalTilt(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_LeftMagnaSave(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_LeftMagnaSave(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_RightMagnaSave(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_RightMagnaSave(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ExitGame(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_ExitGame(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_LockbarKey(ITableGlobal* This,long *pVal) {
    return This->lpVtbl->get_LockbarKey(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_JoyCustomKey(ITableGlobal* This,long index,long *pVal) {
    return This->lpVtbl->get_JoyCustomKey(This,index,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_FireKnocker(ITableGlobal* This,int Count) {
    return This->lpVtbl->FireKnocker(This,Count);
}
static __WIDL_INLINE HRESULT ITableGlobal_QuitPlayer(ITableGlobal* This,int CloseType) {
    return This->lpVtbl->QuitPlayer(This,CloseType);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ShowDT(ITableGlobal* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowDT(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ShowFSS(ITableGlobal* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowFSS(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_NightDay(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_NightDay(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetBalls(ITableGlobal* This,SAFEARRAY **pVal) {
    return This->lpVtbl->GetBalls(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetElements(ITableGlobal* This,SAFEARRAY **pVal) {
    return This->lpVtbl->GetElements(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetElementByName(ITableGlobal* This,BSTR name,IDispatch **pVal) {
    return This->lpVtbl->GetElementByName(This,name,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_ActiveTable(ITableGlobal* This,ITable **pVal) {
    return This->lpVtbl->get_ActiveTable(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_DMDWidth(ITableGlobal* This,int pVal) {
    return This->lpVtbl->put_DMDWidth(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_DMDHeight(ITableGlobal* This,int pVal) {
    return This->lpVtbl->put_DMDHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_DMDPixels(ITableGlobal* This,VARIANT pVal) {
    return This->lpVtbl->put_DMDPixels(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_DMDColoredPixels(ITableGlobal* This,VARIANT pVal) {
    return This->lpVtbl->put_DMDColoredPixels(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_Version(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_Version(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_VersionMajor(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_VersionMajor(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_VersionMinor(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_VersionMinor(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_VersionRevision(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_VersionRevision(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_VPBuildVersion(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_VPBuildVersion(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetSerialDevices(ITableGlobal* This,VARIANT *pVal) {
    return This->lpVtbl->GetSerialDevices(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_OpenSerial(ITableGlobal* This,BSTR device) {
    return This->lpVtbl->OpenSerial(This,device);
}
static __WIDL_INLINE HRESULT ITableGlobal_CloseSerial(ITableGlobal* This) {
    return This->lpVtbl->CloseSerial(This);
}
static __WIDL_INLINE HRESULT ITableGlobal_FlushSerial(ITableGlobal* This) {
    return This->lpVtbl->FlushSerial(This);
}
static __WIDL_INLINE HRESULT ITableGlobal_SetupSerial(ITableGlobal* This,int baud,int bits,int parity,int stopbit,VARIANT_BOOL rts,VARIANT_BOOL dtr) {
    return This->lpVtbl->SetupSerial(This,baud,bits,parity,stopbit,rts,dtr);
}
static __WIDL_INLINE HRESULT ITableGlobal_ReadSerial(ITableGlobal* This,int size,VARIANT *pVal) {
    return This->lpVtbl->ReadSerial(This,size,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_WriteSerial(ITableGlobal* This,VARIANT pVal) {
    return This->lpVtbl->WriteSerial(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_RenderingMode(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_RenderingMode(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_UpdateMaterial(ITableGlobal* This,BSTR pVal,float wrapLighting,float roughness,float glossyImageLerp,float thickness,float edge,float edgeAlpha,float opacity,OLE_COLOR base,OLE_COLOR glossy,OLE_COLOR clearcoat,VARIANT_BOOL isMetal,VARIANT_BOOL opacityActive,float elasticity,float elasticityFalloff,float friction,float scatterAngle) {
    return This->lpVtbl->UpdateMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetMaterial(ITableGlobal* This,BSTR pVal,VARIANT *wrapLighting,VARIANT *roughness,VARIANT *glossyImageLerp,VARIANT *thickness,VARIANT *edge,VARIANT *edgeAlpha,VARIANT *opacity,VARIANT *base,VARIANT *glossy,VARIANT *clearcoat,VARIANT *isMetal,VARIANT *opacityActive,VARIANT *elasticity,VARIANT *elasticityFalloff,VARIANT *friction,VARIANT *scatterAngle) {
    return This->lpVtbl->GetMaterial(This,pVal,wrapLighting,roughness,glossyImageLerp,thickness,edge,edgeAlpha,opacity,base,glossy,clearcoat,isMetal,opacityActive,elasticity,elasticityFalloff,friction,scatterAngle);
}
static __WIDL_INLINE HRESULT ITableGlobal_UpdateMaterialPhysics(ITableGlobal* This,BSTR pVal,float elasticity,float elasticityFalloff,float friction,float scatterAngle) {
    return This->lpVtbl->UpdateMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle);
}
static __WIDL_INLINE HRESULT ITableGlobal_GetMaterialPhysics(ITableGlobal* This,BSTR pVal,VARIANT *elasticity,VARIANT *elasticityFalloff,VARIANT *friction,VARIANT *scatterAngle) {
    return This->lpVtbl->GetMaterialPhysics(This,pVal,elasticity,elasticityFalloff,friction,scatterAngle);
}
static __WIDL_INLINE HRESULT ITableGlobal_MaterialColor(ITableGlobal* This,BSTR name,OLE_COLOR newVal) {
    return This->lpVtbl->MaterialColor(This,name,newVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_WindowWidth(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_WindowWidth(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_WindowHeight(ITableGlobal* This,int *pVal) {
    return This->lpVtbl->get_WindowHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_get_DisableStaticPrerendering(ITableGlobal* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisableStaticPrerendering(This,pVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_put_DisableStaticPrerendering(ITableGlobal* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisableStaticPrerendering(This,newVal);
}
static __WIDL_INLINE HRESULT ITableGlobal_LoadTexture(ITableGlobal* This,BSTR imageName,BSTR fileName) {
    return This->lpVtbl->LoadTexture(This,imageName,fileName);
}
#endif
#endif

#endif


#endif  /* __ITableGlobal_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITableEvents dispinterface
 */
#ifndef __ITableEvents_DISPINTERFACE_DEFINED__
#define __ITableEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ITableEvents, 0xd3ad16e8, 0x633b, 0x47de, 0xa3,0xb8, 0x92,0x50,0x7f,0x37,0xcf,0x65);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d3ad16e8-633b-47de-a3b8-92507f37cf65")
ITableEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITableEvents, 0xd3ad16e8, 0x633b, 0x47de, 0xa3,0xb8, 0x92,0x50,0x7f,0x37,0xcf,0x65)
#endif
#else
typedef struct ITableEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITableEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITableEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITableEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITableEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITableEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITableEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITableEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ITableEventsVtbl;

interface ITableEvents {
    CONST_VTBL ITableEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITableEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITableEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITableEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITableEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITableEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITableEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITableEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITableEvents_QueryInterface(ITableEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITableEvents_AddRef(ITableEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITableEvents_Release(ITableEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITableEvents_GetTypeInfoCount(ITableEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITableEvents_GetTypeInfo(ITableEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITableEvents_GetIDsOfNames(ITableEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITableEvents_Invoke(ITableEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ITableEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IVPDebug interface
 */
#ifndef __IVPDebug_INTERFACE_DEFINED__
#define __IVPDebug_INTERFACE_DEFINED__

DEFINE_GUID(IID_IVPDebug, 0x8668327a, 0x610e, 0x4041, 0x91,0xc4, 0xaf,0x69,0xd2,0x61,0xe3,0x81);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8668327a-610e-4041-91c4-af69d261e381")
IVPDebug : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Print(
        VARIANT *pvar) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IVPDebug, 0x8668327a, 0x610e, 0x4041, 0x91,0xc4, 0xaf,0x69,0xd2,0x61,0xe3,0x81)
#endif
#else
typedef struct IVPDebugVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IVPDebug *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IVPDebug *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IVPDebug *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IVPDebug *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IVPDebug *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IVPDebug *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IVPDebug *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IVPDebug methods ***/
    HRESULT (STDMETHODCALLTYPE *Print)(
        IVPDebug *This,
        VARIANT *pvar);

    END_INTERFACE
} IVPDebugVtbl;

interface IVPDebug {
    CONST_VTBL IVPDebugVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IVPDebug_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IVPDebug_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IVPDebug_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IVPDebug_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IVPDebug_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IVPDebug_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IVPDebug_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IVPDebug methods ***/
#define IVPDebug_Print(This,pvar) (This)->lpVtbl->Print(This,pvar)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IVPDebug_QueryInterface(IVPDebug* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IVPDebug_AddRef(IVPDebug* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IVPDebug_Release(IVPDebug* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IVPDebug_GetTypeInfoCount(IVPDebug* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IVPDebug_GetTypeInfo(IVPDebug* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IVPDebug_GetIDsOfNames(IVPDebug* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IVPDebug_Invoke(IVPDebug* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IVPDebug methods ***/
static __WIDL_INLINE HRESULT IVPDebug_Print(IVPDebug* This,VARIANT *pvar) {
    return This->lpVtbl->Print(This,pvar);
}
#endif
#endif

#endif


#endif  /* __IVPDebug_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWall interface
 */
#ifndef __IWall_INTERFACE_DEFINED__
#define __IWall_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWall, 0x882f3e68, 0x8503, 0x4300, 0x8a,0xc0, 0x91,0xe8,0xdf,0x3f,0x8d,0x6d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("882f3e68-8503-4300-8ac0-91e8df3f8d6d")
IWall : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Threshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Threshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SideMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SideMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageAlignment(
        ImageAlignment *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageAlignment(
        ImageAlignment newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HeightBottom(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HeightBottom(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HeightTop(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HeightTop(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TopMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TopMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CanDrop(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CanDrop(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsDropped(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsDropped(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayTexture(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisplayTexture(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlingshotStrength(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlingshotStrength(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SideImage(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SideImage(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Disabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Disabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SideVisible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SideVisible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlingshotMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlingshotMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlingshotThreshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlingshotThreshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SlingshotAnimation(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SlingshotAnimation(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FlipbookAnimation(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FlipbookAnimation(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsBottomSolid(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsBottomSolid(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisableLighting(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisableLighting(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLighting(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLighting(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLightingFromBelow(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLightingFromBelow(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE PlaySlingshotHit(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverwritePhysics(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverwritePhysics(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWall, 0x882f3e68, 0x8503, 0x4300, 0x8a,0xc0, 0x91,0xe8,0xdf,0x3f,0x8d,0x6d)
#endif
#else
typedef struct IWallVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWall *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWall *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWall *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWall *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWall *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWall *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWall *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWall methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IWall *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IWall *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Threshold)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Threshold)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SideMaterial)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SideMaterial)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageAlignment)(
        IWall *This,
        ImageAlignment *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageAlignment)(
        IWall *This,
        ImageAlignment newVal);

    HRESULT (STDMETHODCALLTYPE *get_HeightBottom)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HeightBottom)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HeightTop)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HeightTop)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TopMaterial)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TopMaterial)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_CanDrop)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CanDrop)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsDropped)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsDropped)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DisplayTexture)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisplayTexture)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlingshotStrength)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlingshotStrength)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SideImage)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SideImage)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Disabled)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Disabled)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_SideVisible)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SideVisible)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IWall *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IWall *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlingshotMaterial)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlingshotMaterial)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlingshotThreshold)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlingshotThreshold)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SlingshotAnimation)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SlingshotAnimation)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_FlipbookAnimation)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FlipbookAnimation)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsBottomSolid)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsBottomSolid)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DisableLighting)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisableLighting)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLighting)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLighting)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLightingFromBelow)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLightingFromBelow)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IWall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IWall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IWall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *PlaySlingshotHit)(
        IWall *This);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsMaterial)(
        IWall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsMaterial)(
        IWall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverwritePhysics)(
        IWall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverwritePhysics)(
        IWall *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IWallVtbl;

interface IWall {
    CONST_VTBL IWallVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWall_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWall_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWall_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWall_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWall_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWall_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWall_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWall methods ***/
#define IWall_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IWall_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IWall_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IWall_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IWall_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IWall_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IWall_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IWall_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IWall_get_Threshold(This,pVal) (This)->lpVtbl->get_Threshold(This,pVal)
#define IWall_put_Threshold(This,newVal) (This)->lpVtbl->put_Threshold(This,newVal)
#define IWall_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IWall_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IWall_get_SideMaterial(This,pVal) (This)->lpVtbl->get_SideMaterial(This,pVal)
#define IWall_put_SideMaterial(This,newVal) (This)->lpVtbl->put_SideMaterial(This,newVal)
#define IWall_get_ImageAlignment(This,pVal) (This)->lpVtbl->get_ImageAlignment(This,pVal)
#define IWall_put_ImageAlignment(This,newVal) (This)->lpVtbl->put_ImageAlignment(This,newVal)
#define IWall_get_HeightBottom(This,pVal) (This)->lpVtbl->get_HeightBottom(This,pVal)
#define IWall_put_HeightBottom(This,newVal) (This)->lpVtbl->put_HeightBottom(This,newVal)
#define IWall_get_HeightTop(This,pVal) (This)->lpVtbl->get_HeightTop(This,pVal)
#define IWall_put_HeightTop(This,newVal) (This)->lpVtbl->put_HeightTop(This,newVal)
#define IWall_get_TopMaterial(This,pVal) (This)->lpVtbl->get_TopMaterial(This,pVal)
#define IWall_put_TopMaterial(This,newVal) (This)->lpVtbl->put_TopMaterial(This,newVal)
#define IWall_get_CanDrop(This,pVal) (This)->lpVtbl->get_CanDrop(This,pVal)
#define IWall_put_CanDrop(This,newVal) (This)->lpVtbl->put_CanDrop(This,newVal)
#define IWall_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IWall_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IWall_get_IsDropped(This,pVal) (This)->lpVtbl->get_IsDropped(This,pVal)
#define IWall_put_IsDropped(This,newVal) (This)->lpVtbl->put_IsDropped(This,newVal)
#define IWall_get_DisplayTexture(This,pVal) (This)->lpVtbl->get_DisplayTexture(This,pVal)
#define IWall_put_DisplayTexture(This,newVal) (This)->lpVtbl->put_DisplayTexture(This,newVal)
#define IWall_get_SlingshotStrength(This,pVal) (This)->lpVtbl->get_SlingshotStrength(This,pVal)
#define IWall_put_SlingshotStrength(This,newVal) (This)->lpVtbl->put_SlingshotStrength(This,newVal)
#define IWall_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IWall_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IWall_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define IWall_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define IWall_get_SideImage(This,pVal) (This)->lpVtbl->get_SideImage(This,pVal)
#define IWall_put_SideImage(This,newVal) (This)->lpVtbl->put_SideImage(This,newVal)
#define IWall_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IWall_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IWall_get_Disabled(This,pVal) (This)->lpVtbl->get_Disabled(This,pVal)
#define IWall_put_Disabled(This,newVal) (This)->lpVtbl->put_Disabled(This,newVal)
#define IWall_get_SideVisible(This,pVal) (This)->lpVtbl->get_SideVisible(This,pVal)
#define IWall_put_SideVisible(This,newVal) (This)->lpVtbl->put_SideVisible(This,newVal)
#define IWall_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IWall_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IWall_get_SlingshotMaterial(This,pVal) (This)->lpVtbl->get_SlingshotMaterial(This,pVal)
#define IWall_put_SlingshotMaterial(This,newVal) (This)->lpVtbl->put_SlingshotMaterial(This,newVal)
#define IWall_get_SlingshotThreshold(This,pVal) (This)->lpVtbl->get_SlingshotThreshold(This,pVal)
#define IWall_put_SlingshotThreshold(This,newVal) (This)->lpVtbl->put_SlingshotThreshold(This,newVal)
#define IWall_get_SlingshotAnimation(This,pVal) (This)->lpVtbl->get_SlingshotAnimation(This,pVal)
#define IWall_put_SlingshotAnimation(This,newVal) (This)->lpVtbl->put_SlingshotAnimation(This,newVal)
#define IWall_get_FlipbookAnimation(This,pVal) (This)->lpVtbl->get_FlipbookAnimation(This,pVal)
#define IWall_put_FlipbookAnimation(This,newVal) (This)->lpVtbl->put_FlipbookAnimation(This,newVal)
#define IWall_get_IsBottomSolid(This,pVal) (This)->lpVtbl->get_IsBottomSolid(This,pVal)
#define IWall_put_IsBottomSolid(This,newVal) (This)->lpVtbl->put_IsBottomSolid(This,newVal)
#define IWall_get_DisableLighting(This,pVal) (This)->lpVtbl->get_DisableLighting(This,pVal)
#define IWall_put_DisableLighting(This,newVal) (This)->lpVtbl->put_DisableLighting(This,newVal)
#define IWall_get_BlendDisableLighting(This,pVal) (This)->lpVtbl->get_BlendDisableLighting(This,pVal)
#define IWall_put_BlendDisableLighting(This,newVal) (This)->lpVtbl->put_BlendDisableLighting(This,newVal)
#define IWall_get_BlendDisableLightingFromBelow(This,pVal) (This)->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal)
#define IWall_put_BlendDisableLightingFromBelow(This,newVal) (This)->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal)
#define IWall_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IWall_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IWall_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IWall_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IWall_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IWall_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IWall_PlaySlingshotHit(This) (This)->lpVtbl->PlaySlingshotHit(This)
#define IWall_get_PhysicsMaterial(This,pVal) (This)->lpVtbl->get_PhysicsMaterial(This,pVal)
#define IWall_put_PhysicsMaterial(This,newVal) (This)->lpVtbl->put_PhysicsMaterial(This,newVal)
#define IWall_get_OverwritePhysics(This,pVal) (This)->lpVtbl->get_OverwritePhysics(This,pVal)
#define IWall_put_OverwritePhysics(This,newVal) (This)->lpVtbl->put_OverwritePhysics(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWall_QueryInterface(IWall* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWall_AddRef(IWall* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWall_Release(IWall* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWall_GetTypeInfoCount(IWall* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWall_GetTypeInfo(IWall* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWall_GetIDsOfNames(IWall* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWall_Invoke(IWall* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWall methods ***/
static __WIDL_INLINE HRESULT IWall_get_Name(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Name(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_TimerEnabled(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_TimerEnabled(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_TimerInterval(IWall* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_TimerInterval(IWall* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_HasHitEvent(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_HasHitEvent(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Threshold(IWall* This,float *pVal) {
    return This->lpVtbl->get_Threshold(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Threshold(IWall* This,float newVal) {
    return This->lpVtbl->put_Threshold(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Image(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Image(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SideMaterial(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_SideMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SideMaterial(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_SideMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_ImageAlignment(IWall* This,ImageAlignment *pVal) {
    return This->lpVtbl->get_ImageAlignment(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_ImageAlignment(IWall* This,ImageAlignment newVal) {
    return This->lpVtbl->put_ImageAlignment(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_HeightBottom(IWall* This,float *pVal) {
    return This->lpVtbl->get_HeightBottom(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_HeightBottom(IWall* This,float newVal) {
    return This->lpVtbl->put_HeightBottom(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_HeightTop(IWall* This,float *pVal) {
    return This->lpVtbl->get_HeightTop(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_HeightTop(IWall* This,float newVal) {
    return This->lpVtbl->put_HeightTop(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_TopMaterial(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_TopMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_TopMaterial(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_TopMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_CanDrop(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_CanDrop(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_CanDrop(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_CanDrop(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Collidable(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Collidable(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_IsDropped(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsDropped(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_IsDropped(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsDropped(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_DisplayTexture(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisplayTexture(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_DisplayTexture(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisplayTexture(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SlingshotStrength(IWall* This,float *pVal) {
    return This->lpVtbl->get_SlingshotStrength(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SlingshotStrength(IWall* This,float newVal) {
    return This->lpVtbl->put_SlingshotStrength(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Elasticity(IWall* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Elasticity(IWall* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_ElasticityFalloff(IWall* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_ElasticityFalloff(IWall* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SideImage(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_SideImage(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SideImage(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_SideImage(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Visible(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Visible(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Disabled(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Disabled(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Disabled(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Disabled(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SideVisible(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_SideVisible(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SideVisible(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_SideVisible(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_UserValue(IWall* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_UserValue(IWall* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SlingshotMaterial(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_SlingshotMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SlingshotMaterial(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_SlingshotMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SlingshotThreshold(IWall* This,float *pVal) {
    return This->lpVtbl->get_SlingshotThreshold(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SlingshotThreshold(IWall* This,float newVal) {
    return This->lpVtbl->put_SlingshotThreshold(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_SlingshotAnimation(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_SlingshotAnimation(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_SlingshotAnimation(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_SlingshotAnimation(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_FlipbookAnimation(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_FlipbookAnimation(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_FlipbookAnimation(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_FlipbookAnimation(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_IsBottomSolid(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsBottomSolid(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_IsBottomSolid(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsBottomSolid(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_DisableLighting(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_DisableLighting(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_BlendDisableLighting(IWall* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_BlendDisableLighting(IWall* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_BlendDisableLightingFromBelow(IWall* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_BlendDisableLightingFromBelow(IWall* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Friction(IWall* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Friction(IWall* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_Scatter(IWall* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_Scatter(IWall* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_ReflectionEnabled(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_ReflectionEnabled(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_PlaySlingshotHit(IWall* This) {
    return This->lpVtbl->PlaySlingshotHit(This);
}
static __WIDL_INLINE HRESULT IWall_get_PhysicsMaterial(IWall* This,BSTR *pVal) {
    return This->lpVtbl->get_PhysicsMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_PhysicsMaterial(IWall* This,BSTR newVal) {
    return This->lpVtbl->put_PhysicsMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IWall_get_OverwritePhysics(IWall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverwritePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IWall_put_OverwritePhysics(IWall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverwritePhysics(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IWall_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWallEvents dispinterface
 */
#ifndef __IWallEvents_DISPINTERFACE_DEFINED__
#define __IWallEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IWallEvents, 0x1128a15e, 0x1388, 0x450f, 0xa5,0x17, 0x28,0x19,0x80,0x8c,0xf7,0xcf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1128a15e-1388-450f-a517-2819808cf7cf")
IWallEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWallEvents, 0x1128a15e, 0x1388, 0x450f, 0xa5,0x17, 0x28,0x19,0x80,0x8c,0xf7,0xcf)
#endif
#else
typedef struct IWallEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWallEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWallEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWallEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWallEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWallEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWallEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWallEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IWallEventsVtbl;

interface IWallEvents {
    CONST_VTBL IWallEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWallEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWallEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWallEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWallEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWallEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWallEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWallEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWallEvents_QueryInterface(IWallEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWallEvents_AddRef(IWallEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWallEvents_Release(IWallEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWallEvents_GetTypeInfoCount(IWallEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWallEvents_GetTypeInfo(IWallEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWallEvents_GetIDsOfNames(IWallEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWallEvents_Invoke(IWallEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IWallEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IControlPoint interface
 */
#ifndef __IControlPoint_INTERFACE_DEFINED__
#define __IControlPoint_INTERFACE_DEFINED__

DEFINE_GUID(IID_IControlPoint, 0x353b4f85, 0xbabc, 0x4feb, 0xb6,0x64, 0x91,0xce,0x3d,0xb3,0xc0,0xfa);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("353b4f85-babc-4feb-b664-91ce3db3c0fa")
IControlPoint : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Z(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Z(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CalcHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Smooth(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Smooth(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsAutoTextureCoordinate(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsAutoTextureCoordinate(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TextureCoordinateU(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TextureCoordinateU(
        float newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IControlPoint, 0x353b4f85, 0xbabc, 0x4feb, 0xb6,0x64, 0x91,0xce,0x3d,0xb3,0xc0,0xfa)
#endif
#else
typedef struct IControlPointVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IControlPoint *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IControlPoint *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IControlPoint *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IControlPoint *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IControlPoint *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IControlPoint *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IControlPoint *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IControlPoint methods ***/
    HRESULT (STDMETHODCALLTYPE *get_X)(
        IControlPoint *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IControlPoint *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IControlPoint *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IControlPoint *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Z)(
        IControlPoint *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Z)(
        IControlPoint *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CalcHeight)(
        IControlPoint *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Smooth)(
        IControlPoint *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Smooth)(
        IControlPoint *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsAutoTextureCoordinate)(
        IControlPoint *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsAutoTextureCoordinate)(
        IControlPoint *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TextureCoordinateU)(
        IControlPoint *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TextureCoordinateU)(
        IControlPoint *This,
        float newVal);

    END_INTERFACE
} IControlPointVtbl;

interface IControlPoint {
    CONST_VTBL IControlPointVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IControlPoint_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IControlPoint_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IControlPoint_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IControlPoint_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IControlPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IControlPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IControlPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IControlPoint methods ***/
#define IControlPoint_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IControlPoint_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IControlPoint_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IControlPoint_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IControlPoint_get_Z(This,pVal) (This)->lpVtbl->get_Z(This,pVal)
#define IControlPoint_put_Z(This,newVal) (This)->lpVtbl->put_Z(This,newVal)
#define IControlPoint_get_CalcHeight(This,pVal) (This)->lpVtbl->get_CalcHeight(This,pVal)
#define IControlPoint_get_Smooth(This,pVal) (This)->lpVtbl->get_Smooth(This,pVal)
#define IControlPoint_put_Smooth(This,newVal) (This)->lpVtbl->put_Smooth(This,newVal)
#define IControlPoint_get_IsAutoTextureCoordinate(This,pVal) (This)->lpVtbl->get_IsAutoTextureCoordinate(This,pVal)
#define IControlPoint_put_IsAutoTextureCoordinate(This,newVal) (This)->lpVtbl->put_IsAutoTextureCoordinate(This,newVal)
#define IControlPoint_get_TextureCoordinateU(This,pVal) (This)->lpVtbl->get_TextureCoordinateU(This,pVal)
#define IControlPoint_put_TextureCoordinateU(This,newVal) (This)->lpVtbl->put_TextureCoordinateU(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IControlPoint_QueryInterface(IControlPoint* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IControlPoint_AddRef(IControlPoint* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IControlPoint_Release(IControlPoint* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IControlPoint_GetTypeInfoCount(IControlPoint* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IControlPoint_GetTypeInfo(IControlPoint* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IControlPoint_GetIDsOfNames(IControlPoint* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IControlPoint_Invoke(IControlPoint* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IControlPoint methods ***/
static __WIDL_INLINE HRESULT IControlPoint_get_X(IControlPoint* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_X(IControlPoint* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_Y(IControlPoint* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_Y(IControlPoint* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_Z(IControlPoint* This,float *pVal) {
    return This->lpVtbl->get_Z(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_Z(IControlPoint* This,float newVal) {
    return This->lpVtbl->put_Z(This,newVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_CalcHeight(IControlPoint* This,float *pVal) {
    return This->lpVtbl->get_CalcHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_Smooth(IControlPoint* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Smooth(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_Smooth(IControlPoint* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Smooth(This,newVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_IsAutoTextureCoordinate(IControlPoint* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsAutoTextureCoordinate(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_IsAutoTextureCoordinate(IControlPoint* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsAutoTextureCoordinate(This,newVal);
}
static __WIDL_INLINE HRESULT IControlPoint_get_TextureCoordinateU(IControlPoint* This,float *pVal) {
    return This->lpVtbl->get_TextureCoordinateU(This,pVal);
}
static __WIDL_INLINE HRESULT IControlPoint_put_TextureCoordinateU(IControlPoint* This,float newVal) {
    return This->lpVtbl->put_TextureCoordinateU(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IControlPoint_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFlipper interface
 */
#ifndef __IFlipper_INTERFACE_DEFINED__
#define __IFlipper_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFlipper, 0xb4957ea2, 0x33be, 0x45e6, 0x93,0xc2, 0xca,0x16,0xb8,0x75,0x5b,0xf3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b4957ea2-33be-45e6-93c2-ca16b8755bf3")
IFlipper : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_BaseRadius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BaseRadius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EndRadius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EndRadius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Length(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Length(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StartAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_StartAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE RotateToEnd(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE RotateToStart(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EndAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EndAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Mass(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Mass(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverridePhysics(
        PhysicsSet *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverridePhysics(
        PhysicsSet newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RubberMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RubberMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RubberThickness(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RubberThickness(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Strength(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Strength(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Return(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Return(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RubberHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RubberHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RubberWidth(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RubberWidth(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RampUp(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RampUp(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EOSTorque(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EOSTorque(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EOSTorqueAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EOSTorqueAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FlipperRadiusMin(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FlipperRadiusMin(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFlipper, 0xb4957ea2, 0x33be, 0x45e6, 0x93,0xc2, 0xca,0x16,0xb8,0x75,0x5b,0xf3)
#endif
#else
typedef struct IFlipperVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFlipper *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFlipper *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFlipper *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFlipper *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFlipper *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFlipper *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFlipper *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFlipper methods ***/
    HRESULT (STDMETHODCALLTYPE *get_BaseRadius)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BaseRadius)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EndRadius)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EndRadius)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Length)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Length)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_StartAngle)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_StartAngle)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *RotateToEnd)(
        IFlipper *This);

    HRESULT (STDMETHODCALLTYPE *RotateToStart)(
        IFlipper *This);

    HRESULT (STDMETHODCALLTYPE *get_EndAngle)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EndAngle)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IFlipper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IFlipper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IFlipper *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IFlipper *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAngle)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IFlipper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IFlipper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Mass)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Mass)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverridePhysics)(
        IFlipper *This,
        PhysicsSet *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverridePhysics)(
        IFlipper *This,
        PhysicsSet newVal);

    HRESULT (STDMETHODCALLTYPE *get_RubberMaterial)(
        IFlipper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RubberMaterial)(
        IFlipper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_RubberThickness)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RubberThickness)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Strength)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Strength)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IFlipper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IFlipper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        IFlipper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        IFlipper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Return)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Return)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RubberHeight)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RubberHeight)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RubberWidth)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RubberWidth)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RampUp)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RampUp)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IFlipper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IFlipper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFlipper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFlipper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IFlipper *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IFlipper *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EOSTorque)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EOSTorque)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EOSTorqueAngle)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EOSTorqueAngle)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FlipperRadiusMin)(
        IFlipper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FlipperRadiusMin)(
        IFlipper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IFlipper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IFlipper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IFlipper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IFlipper *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IFlipperVtbl;

interface IFlipper {
    CONST_VTBL IFlipperVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFlipper_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFlipper_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFlipper_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFlipper_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFlipper_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFlipper_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFlipper_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFlipper methods ***/
#define IFlipper_get_BaseRadius(This,pVal) (This)->lpVtbl->get_BaseRadius(This,pVal)
#define IFlipper_put_BaseRadius(This,newVal) (This)->lpVtbl->put_BaseRadius(This,newVal)
#define IFlipper_get_EndRadius(This,pVal) (This)->lpVtbl->get_EndRadius(This,pVal)
#define IFlipper_put_EndRadius(This,newVal) (This)->lpVtbl->put_EndRadius(This,newVal)
#define IFlipper_get_Length(This,pVal) (This)->lpVtbl->get_Length(This,pVal)
#define IFlipper_put_Length(This,newVal) (This)->lpVtbl->put_Length(This,newVal)
#define IFlipper_get_StartAngle(This,pVal) (This)->lpVtbl->get_StartAngle(This,pVal)
#define IFlipper_put_StartAngle(This,newVal) (This)->lpVtbl->put_StartAngle(This,newVal)
#define IFlipper_RotateToEnd(This) (This)->lpVtbl->RotateToEnd(This)
#define IFlipper_RotateToStart(This) (This)->lpVtbl->RotateToStart(This)
#define IFlipper_get_EndAngle(This,pVal) (This)->lpVtbl->get_EndAngle(This,pVal)
#define IFlipper_put_EndAngle(This,newVal) (This)->lpVtbl->put_EndAngle(This,newVal)
#define IFlipper_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IFlipper_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IFlipper_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IFlipper_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IFlipper_get_CurrentAngle(This,pVal) (This)->lpVtbl->get_CurrentAngle(This,pVal)
#define IFlipper_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IFlipper_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IFlipper_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IFlipper_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IFlipper_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IFlipper_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IFlipper_get_Mass(This,pVal) (This)->lpVtbl->get_Mass(This,pVal)
#define IFlipper_put_Mass(This,newVal) (This)->lpVtbl->put_Mass(This,newVal)
#define IFlipper_get_OverridePhysics(This,pVal) (This)->lpVtbl->get_OverridePhysics(This,pVal)
#define IFlipper_put_OverridePhysics(This,newVal) (This)->lpVtbl->put_OverridePhysics(This,newVal)
#define IFlipper_get_RubberMaterial(This,pVal) (This)->lpVtbl->get_RubberMaterial(This,pVal)
#define IFlipper_put_RubberMaterial(This,newVal) (This)->lpVtbl->put_RubberMaterial(This,newVal)
#define IFlipper_get_RubberThickness(This,pVal) (This)->lpVtbl->get_RubberThickness(This,pVal)
#define IFlipper_put_RubberThickness(This,newVal) (This)->lpVtbl->put_RubberThickness(This,newVal)
#define IFlipper_get_Strength(This,pVal) (This)->lpVtbl->get_Strength(This,pVal)
#define IFlipper_put_Strength(This,newVal) (This)->lpVtbl->put_Strength(This,newVal)
#define IFlipper_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IFlipper_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IFlipper_get_Enabled(This,pVal) (This)->lpVtbl->get_Enabled(This,pVal)
#define IFlipper_put_Enabled(This,newVal) (This)->lpVtbl->put_Enabled(This,newVal)
#define IFlipper_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IFlipper_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IFlipper_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IFlipper_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IFlipper_get_Return(This,pVal) (This)->lpVtbl->get_Return(This,pVal)
#define IFlipper_put_Return(This,newVal) (This)->lpVtbl->put_Return(This,newVal)
#define IFlipper_get_RubberHeight(This,pVal) (This)->lpVtbl->get_RubberHeight(This,pVal)
#define IFlipper_put_RubberHeight(This,newVal) (This)->lpVtbl->put_RubberHeight(This,newVal)
#define IFlipper_get_RubberWidth(This,pVal) (This)->lpVtbl->get_RubberWidth(This,pVal)
#define IFlipper_put_RubberWidth(This,newVal) (This)->lpVtbl->put_RubberWidth(This,newVal)
#define IFlipper_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IFlipper_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IFlipper_get_RampUp(This,pVal) (This)->lpVtbl->get_RampUp(This,pVal)
#define IFlipper_put_RampUp(This,newVal) (This)->lpVtbl->put_RampUp(This,newVal)
#define IFlipper_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define IFlipper_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define IFlipper_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IFlipper_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define IFlipper_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IFlipper_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IFlipper_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IFlipper_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IFlipper_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IFlipper_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IFlipper_get_EOSTorque(This,pVal) (This)->lpVtbl->get_EOSTorque(This,pVal)
#define IFlipper_put_EOSTorque(This,newVal) (This)->lpVtbl->put_EOSTorque(This,newVal)
#define IFlipper_get_EOSTorqueAngle(This,pVal) (This)->lpVtbl->get_EOSTorqueAngle(This,pVal)
#define IFlipper_put_EOSTorqueAngle(This,newVal) (This)->lpVtbl->put_EOSTorqueAngle(This,newVal)
#define IFlipper_get_FlipperRadiusMin(This,pVal) (This)->lpVtbl->get_FlipperRadiusMin(This,pVal)
#define IFlipper_put_FlipperRadiusMin(This,newVal) (This)->lpVtbl->put_FlipperRadiusMin(This,newVal)
#define IFlipper_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IFlipper_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IFlipper_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IFlipper_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFlipper_QueryInterface(IFlipper* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFlipper_AddRef(IFlipper* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFlipper_Release(IFlipper* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFlipper_GetTypeInfoCount(IFlipper* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFlipper_GetTypeInfo(IFlipper* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFlipper_GetIDsOfNames(IFlipper* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFlipper_Invoke(IFlipper* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFlipper methods ***/
static __WIDL_INLINE HRESULT IFlipper_get_BaseRadius(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_BaseRadius(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_BaseRadius(IFlipper* This,float newVal) {
    return This->lpVtbl->put_BaseRadius(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_EndRadius(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_EndRadius(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_EndRadius(IFlipper* This,float newVal) {
    return This->lpVtbl->put_EndRadius(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Length(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Length(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Length(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Length(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_StartAngle(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_StartAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_StartAngle(IFlipper* This,float newVal) {
    return This->lpVtbl->put_StartAngle(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_RotateToEnd(IFlipper* This) {
    return This->lpVtbl->RotateToEnd(This);
}
static __WIDL_INLINE HRESULT IFlipper_RotateToStart(IFlipper* This) {
    return This->lpVtbl->RotateToStart(This);
}
static __WIDL_INLINE HRESULT IFlipper_get_EndAngle(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_EndAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_EndAngle(IFlipper* This,float newVal) {
    return This->lpVtbl->put_EndAngle(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_TimerEnabled(IFlipper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_TimerEnabled(IFlipper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_TimerInterval(IFlipper* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_TimerInterval(IFlipper* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_CurrentAngle(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_CurrentAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_X(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_X(IFlipper* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Y(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Y(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Material(IFlipper* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Material(IFlipper* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Mass(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Mass(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Mass(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Mass(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_OverridePhysics(IFlipper* This,PhysicsSet *pVal) {
    return This->lpVtbl->get_OverridePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_OverridePhysics(IFlipper* This,PhysicsSet newVal) {
    return This->lpVtbl->put_OverridePhysics(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_RubberMaterial(IFlipper* This,BSTR *pVal) {
    return This->lpVtbl->get_RubberMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_RubberMaterial(IFlipper* This,BSTR newVal) {
    return This->lpVtbl->put_RubberMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_RubberThickness(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_RubberThickness(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_RubberThickness(IFlipper* This,float newVal) {
    return This->lpVtbl->put_RubberThickness(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Strength(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Strength(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Strength(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Strength(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Visible(IFlipper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Visible(IFlipper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Enabled(IFlipper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Enabled(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Enabled(IFlipper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Enabled(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Elasticity(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Elasticity(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Scatter(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Scatter(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Return(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Return(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Return(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Return(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_RubberHeight(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_RubberHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_RubberHeight(IFlipper* This,float newVal) {
    return This->lpVtbl->put_RubberHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_RubberWidth(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_RubberWidth(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_RubberWidth(IFlipper* This,float newVal) {
    return This->lpVtbl->put_RubberWidth(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Friction(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Friction(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_RampUp(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_RampUp(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_RampUp(IFlipper* This,float newVal) {
    return This->lpVtbl->put_RampUp(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_ElasticityFalloff(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_ElasticityFalloff(IFlipper* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Surface(IFlipper* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Surface(IFlipper* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Name(IFlipper* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Name(IFlipper* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_UserValue(IFlipper* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_UserValue(IFlipper* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Height(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Height(IFlipper* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_EOSTorque(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_EOSTorque(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_EOSTorque(IFlipper* This,float newVal) {
    return This->lpVtbl->put_EOSTorque(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_EOSTorqueAngle(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_EOSTorqueAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_EOSTorqueAngle(IFlipper* This,float newVal) {
    return This->lpVtbl->put_EOSTorqueAngle(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_FlipperRadiusMin(IFlipper* This,float *pVal) {
    return This->lpVtbl->get_FlipperRadiusMin(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_FlipperRadiusMin(IFlipper* This,float newVal) {
    return This->lpVtbl->put_FlipperRadiusMin(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_Image(IFlipper* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_Image(IFlipper* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IFlipper_get_ReflectionEnabled(IFlipper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IFlipper_put_ReflectionEnabled(IFlipper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IFlipper_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFlipperEvents dispinterface
 */
#ifndef __IFlipperEvents_DISPINTERFACE_DEFINED__
#define __IFlipperEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IFlipperEvents, 0xc1001167, 0x49ee, 0x4d66, 0xb9,0xf4, 0xa1,0x62,0x38,0x47,0x51,0x0a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c1001167-49ee-4d66-b9f4-a1623847510a")
IFlipperEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFlipperEvents, 0xc1001167, 0x49ee, 0x4d66, 0xb9,0xf4, 0xa1,0x62,0x38,0x47,0x51,0x0a)
#endif
#else
typedef struct IFlipperEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFlipperEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFlipperEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFlipperEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFlipperEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFlipperEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFlipperEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFlipperEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IFlipperEventsVtbl;

interface IFlipperEvents {
    CONST_VTBL IFlipperEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFlipperEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFlipperEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFlipperEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFlipperEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFlipperEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFlipperEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFlipperEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFlipperEvents_QueryInterface(IFlipperEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFlipperEvents_AddRef(IFlipperEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFlipperEvents_Release(IFlipperEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFlipperEvents_GetTypeInfoCount(IFlipperEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFlipperEvents_GetTypeInfo(IFlipperEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFlipperEvents_GetIDsOfNames(IFlipperEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFlipperEvents_Invoke(IFlipperEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IFlipperEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ITimer interface
 */
#ifndef __ITimer_INTERFACE_DEFINED__
#define __ITimer_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITimer, 0xc74673fa, 0x0f67, 0x49f0, 0x84,0x69, 0x18,0xad,0xda,0xf5,0x23,0x55);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c74673fa-0f67-49f0-8469-18addaf52355")
ITimer : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Interval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Interval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITimer, 0xc74673fa, 0x0f67, 0x49f0, 0x84,0x69, 0x18,0xad,0xda,0xf5,0x23,0x55)
#endif
#else
typedef struct ITimerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITimer *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITimer *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITimer *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITimer *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITimer *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITimer *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITimer *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITimer methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        ITimer *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        ITimer *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Interval)(
        ITimer *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Interval)(
        ITimer *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ITimer *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ITimer *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ITimer *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ITimer *This,
        VARIANT *newVal);

    END_INTERFACE
} ITimerVtbl;

interface ITimer {
    CONST_VTBL ITimerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITimer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITimer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITimer_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITimer_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITimer_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITimer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITimer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITimer methods ***/
#define ITimer_get_Enabled(This,pVal) (This)->lpVtbl->get_Enabled(This,pVal)
#define ITimer_put_Enabled(This,newVal) (This)->lpVtbl->put_Enabled(This,newVal)
#define ITimer_get_Interval(This,pVal) (This)->lpVtbl->get_Interval(This,pVal)
#define ITimer_put_Interval(This,newVal) (This)->lpVtbl->put_Interval(This,newVal)
#define ITimer_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ITimer_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ITimer_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ITimer_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITimer_QueryInterface(ITimer* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITimer_AddRef(ITimer* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITimer_Release(ITimer* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITimer_GetTypeInfoCount(ITimer* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITimer_GetTypeInfo(ITimer* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITimer_GetIDsOfNames(ITimer* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITimer_Invoke(ITimer* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITimer methods ***/
static __WIDL_INLINE HRESULT ITimer_get_Enabled(ITimer* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Enabled(This,pVal);
}
static __WIDL_INLINE HRESULT ITimer_put_Enabled(ITimer* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Enabled(This,newVal);
}
static __WIDL_INLINE HRESULT ITimer_get_Interval(ITimer* This,long *pVal) {
    return This->lpVtbl->get_Interval(This,pVal);
}
static __WIDL_INLINE HRESULT ITimer_put_Interval(ITimer* This,long newVal) {
    return This->lpVtbl->put_Interval(This,newVal);
}
static __WIDL_INLINE HRESULT ITimer_get_Name(ITimer* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ITimer_put_Name(ITimer* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ITimer_get_UserValue(ITimer* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ITimer_put_UserValue(ITimer* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
#endif
#endif

#endif


#endif  /* __ITimer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITimerEvents dispinterface
 */
#ifndef __ITimerEvents_DISPINTERFACE_DEFINED__
#define __ITimerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ITimerEvents, 0xdc13dc5b, 0xff29, 0x4ef4, 0x93,0xe1, 0x06,0xc4,0xb8,0x60,0x3a,0xef);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("dc13dc5b-ff29-4ef4-93e1-06c4b8603aef")
ITimerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITimerEvents, 0xdc13dc5b, 0xff29, 0x4ef4, 0x93,0xe1, 0x06,0xc4,0xb8,0x60,0x3a,0xef)
#endif
#else
typedef struct ITimerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITimerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITimerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITimerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITimerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITimerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITimerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITimerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ITimerEventsVtbl;

interface ITimerEvents {
    CONST_VTBL ITimerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITimerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITimerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITimerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITimerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITimerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITimerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITimerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITimerEvents_QueryInterface(ITimerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITimerEvents_AddRef(ITimerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITimerEvents_Release(ITimerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITimerEvents_GetTypeInfoCount(ITimerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITimerEvents_GetTypeInfo(ITimerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITimerEvents_GetIDsOfNames(ITimerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITimerEvents_Invoke(ITimerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ITimerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IPlunger interface
 */
#ifndef __IPlunger_INTERFACE_DEFINED__
#define __IPlunger_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPlunger, 0x3b0bf779, 0xb5d2, 0x4445, 0xb8,0x04, 0xef,0x1e,0x98,0x90,0xfe,0x98);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3b0bf779-b5d2-4445-b804-ef1e9890fe98")
IPlunger : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE PullBack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Fire(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PullSpeed(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PullSpeed(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FireSpeed(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FireSpeed(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateBall(
        IBall **Ball) = 0;

    virtual HRESULT STDMETHODCALLTYPE Position(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE PullBackandRetract(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE MotionDevice(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ZAdjust(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ZAdjust(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        PlungerType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Type(
        PlungerType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AnimFrames(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AnimFrames(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TipShape(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TipShape(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RodDiam(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RodDiam(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingGap(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingGap(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingDiam(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingDiam(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingWidth(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingWidth(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SpringDiam(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SpringDiam(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SpringGauge(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SpringGauge(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SpringLoops(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SpringLoops(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SpringEndLoops(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SpringEndLoops(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MechPlunger(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MechPlunger(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AutoPlunger(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AutoPlunger(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MechStrength(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MechStrength(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParkPosition(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ParkPosition(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Stroke(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Stroke(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScatterVelocity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ScatterVelocity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MomentumXfer(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MomentumXfer(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPlunger, 0x3b0bf779, 0xb5d2, 0x4445, 0xb8,0x04, 0xef,0x1e,0x98,0x90,0xfe,0x98)
#endif
#else
typedef struct IPlungerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPlunger *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPlunger *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPlunger *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IPlunger *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IPlunger *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IPlunger *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IPlunger *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IPlunger methods ***/
    HRESULT (STDMETHODCALLTYPE *PullBack)(
        IPlunger *This);

    HRESULT (STDMETHODCALLTYPE *Fire)(
        IPlunger *This);

    HRESULT (STDMETHODCALLTYPE *get_PullSpeed)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PullSpeed)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FireSpeed)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FireSpeed)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *CreateBall)(
        IPlunger *This,
        IBall **Ball);

    HRESULT (STDMETHODCALLTYPE *Position)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *PullBackandRetract)(
        IPlunger *This);

    HRESULT (STDMETHODCALLTYPE *MotionDevice)(
        IPlunger *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IPlunger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IPlunger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IPlunger *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IPlunger *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ZAdjust)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ZAdjust)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IPlunger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IPlunger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IPlunger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IPlunger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IPlunger *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IPlunger *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IPlunger *This,
        PlungerType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Type)(
        IPlunger *This,
        PlungerType newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IPlunger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IPlunger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IPlunger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IPlunger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_AnimFrames)(
        IPlunger *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AnimFrames)(
        IPlunger *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_TipShape)(
        IPlunger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TipShape)(
        IPlunger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_RodDiam)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RodDiam)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingGap)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingGap)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingDiam)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingDiam)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingWidth)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingWidth)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SpringDiam)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SpringDiam)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SpringGauge)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SpringGauge)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SpringLoops)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SpringLoops)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_SpringEndLoops)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SpringEndLoops)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_MechPlunger)(
        IPlunger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MechPlunger)(
        IPlunger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_AutoPlunger)(
        IPlunger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AutoPlunger)(
        IPlunger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IPlunger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IPlunger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_MechStrength)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MechStrength)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ParkPosition)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ParkPosition)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Stroke)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Stroke)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ScatterVelocity)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ScatterVelocity)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_MomentumXfer)(
        IPlunger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MomentumXfer)(
        IPlunger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IPlunger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IPlunger *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IPlungerVtbl;

interface IPlunger {
    CONST_VTBL IPlungerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPlunger_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPlunger_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPlunger_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IPlunger_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IPlunger_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IPlunger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IPlunger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IPlunger methods ***/
#define IPlunger_PullBack(This) (This)->lpVtbl->PullBack(This)
#define IPlunger_Fire(This) (This)->lpVtbl->Fire(This)
#define IPlunger_get_PullSpeed(This,pVal) (This)->lpVtbl->get_PullSpeed(This,pVal)
#define IPlunger_put_PullSpeed(This,newVal) (This)->lpVtbl->put_PullSpeed(This,newVal)
#define IPlunger_get_FireSpeed(This,pVal) (This)->lpVtbl->get_FireSpeed(This,pVal)
#define IPlunger_put_FireSpeed(This,newVal) (This)->lpVtbl->put_FireSpeed(This,newVal)
#define IPlunger_CreateBall(This,Ball) (This)->lpVtbl->CreateBall(This,Ball)
#define IPlunger_Position(This,pVal) (This)->lpVtbl->Position(This,pVal)
#define IPlunger_PullBackandRetract(This) (This)->lpVtbl->PullBackandRetract(This)
#define IPlunger_MotionDevice(This,pVal) (This)->lpVtbl->MotionDevice(This,pVal)
#define IPlunger_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IPlunger_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IPlunger_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IPlunger_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IPlunger_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IPlunger_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IPlunger_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IPlunger_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IPlunger_get_Width(This,pVal) (This)->lpVtbl->get_Width(This,pVal)
#define IPlunger_put_Width(This,newVal) (This)->lpVtbl->put_Width(This,newVal)
#define IPlunger_get_ZAdjust(This,pVal) (This)->lpVtbl->get_ZAdjust(This,pVal)
#define IPlunger_put_ZAdjust(This,newVal) (This)->lpVtbl->put_ZAdjust(This,newVal)
#define IPlunger_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IPlunger_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define IPlunger_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IPlunger_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IPlunger_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IPlunger_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IPlunger_get_Type(This,pVal) (This)->lpVtbl->get_Type(This,pVal)
#define IPlunger_put_Type(This,newVal) (This)->lpVtbl->put_Type(This,newVal)
#define IPlunger_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IPlunger_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IPlunger_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IPlunger_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IPlunger_get_AnimFrames(This,pVal) (This)->lpVtbl->get_AnimFrames(This,pVal)
#define IPlunger_put_AnimFrames(This,newVal) (This)->lpVtbl->put_AnimFrames(This,newVal)
#define IPlunger_get_TipShape(This,pVal) (This)->lpVtbl->get_TipShape(This,pVal)
#define IPlunger_put_TipShape(This,newVal) (This)->lpVtbl->put_TipShape(This,newVal)
#define IPlunger_get_RodDiam(This,pVal) (This)->lpVtbl->get_RodDiam(This,pVal)
#define IPlunger_put_RodDiam(This,newVal) (This)->lpVtbl->put_RodDiam(This,newVal)
#define IPlunger_get_RingGap(This,pVal) (This)->lpVtbl->get_RingGap(This,pVal)
#define IPlunger_put_RingGap(This,newVal) (This)->lpVtbl->put_RingGap(This,newVal)
#define IPlunger_get_RingDiam(This,pVal) (This)->lpVtbl->get_RingDiam(This,pVal)
#define IPlunger_put_RingDiam(This,newVal) (This)->lpVtbl->put_RingDiam(This,newVal)
#define IPlunger_get_RingWidth(This,pVal) (This)->lpVtbl->get_RingWidth(This,pVal)
#define IPlunger_put_RingWidth(This,newVal) (This)->lpVtbl->put_RingWidth(This,newVal)
#define IPlunger_get_SpringDiam(This,pVal) (This)->lpVtbl->get_SpringDiam(This,pVal)
#define IPlunger_put_SpringDiam(This,newVal) (This)->lpVtbl->put_SpringDiam(This,newVal)
#define IPlunger_get_SpringGauge(This,pVal) (This)->lpVtbl->get_SpringGauge(This,pVal)
#define IPlunger_put_SpringGauge(This,newVal) (This)->lpVtbl->put_SpringGauge(This,newVal)
#define IPlunger_get_SpringLoops(This,pVal) (This)->lpVtbl->get_SpringLoops(This,pVal)
#define IPlunger_put_SpringLoops(This,newVal) (This)->lpVtbl->put_SpringLoops(This,newVal)
#define IPlunger_get_SpringEndLoops(This,pVal) (This)->lpVtbl->get_SpringEndLoops(This,pVal)
#define IPlunger_put_SpringEndLoops(This,newVal) (This)->lpVtbl->put_SpringEndLoops(This,newVal)
#define IPlunger_get_MechPlunger(This,pVal) (This)->lpVtbl->get_MechPlunger(This,pVal)
#define IPlunger_put_MechPlunger(This,newVal) (This)->lpVtbl->put_MechPlunger(This,newVal)
#define IPlunger_get_AutoPlunger(This,pVal) (This)->lpVtbl->get_AutoPlunger(This,pVal)
#define IPlunger_put_AutoPlunger(This,newVal) (This)->lpVtbl->put_AutoPlunger(This,newVal)
#define IPlunger_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IPlunger_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IPlunger_get_MechStrength(This,pVal) (This)->lpVtbl->get_MechStrength(This,pVal)
#define IPlunger_put_MechStrength(This,newVal) (This)->lpVtbl->put_MechStrength(This,newVal)
#define IPlunger_get_ParkPosition(This,pVal) (This)->lpVtbl->get_ParkPosition(This,pVal)
#define IPlunger_put_ParkPosition(This,newVal) (This)->lpVtbl->put_ParkPosition(This,newVal)
#define IPlunger_get_Stroke(This,pVal) (This)->lpVtbl->get_Stroke(This,pVal)
#define IPlunger_put_Stroke(This,newVal) (This)->lpVtbl->put_Stroke(This,newVal)
#define IPlunger_get_ScatterVelocity(This,pVal) (This)->lpVtbl->get_ScatterVelocity(This,pVal)
#define IPlunger_put_ScatterVelocity(This,newVal) (This)->lpVtbl->put_ScatterVelocity(This,newVal)
#define IPlunger_get_MomentumXfer(This,pVal) (This)->lpVtbl->get_MomentumXfer(This,pVal)
#define IPlunger_put_MomentumXfer(This,newVal) (This)->lpVtbl->put_MomentumXfer(This,newVal)
#define IPlunger_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IPlunger_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IPlunger_QueryInterface(IPlunger* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IPlunger_AddRef(IPlunger* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IPlunger_Release(IPlunger* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IPlunger_GetTypeInfoCount(IPlunger* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IPlunger_GetTypeInfo(IPlunger* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IPlunger_GetIDsOfNames(IPlunger* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IPlunger_Invoke(IPlunger* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IPlunger methods ***/
static __WIDL_INLINE HRESULT IPlunger_PullBack(IPlunger* This) {
    return This->lpVtbl->PullBack(This);
}
static __WIDL_INLINE HRESULT IPlunger_Fire(IPlunger* This) {
    return This->lpVtbl->Fire(This);
}
static __WIDL_INLINE HRESULT IPlunger_get_PullSpeed(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_PullSpeed(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_PullSpeed(IPlunger* This,float newVal) {
    return This->lpVtbl->put_PullSpeed(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_FireSpeed(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_FireSpeed(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_FireSpeed(IPlunger* This,float newVal) {
    return This->lpVtbl->put_FireSpeed(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_CreateBall(IPlunger* This,IBall **Ball) {
    return This->lpVtbl->CreateBall(This,Ball);
}
static __WIDL_INLINE HRESULT IPlunger_Position(IPlunger* This,float *pVal) {
    return This->lpVtbl->Position(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_PullBackandRetract(IPlunger* This) {
    return This->lpVtbl->PullBackandRetract(This);
}
static __WIDL_INLINE HRESULT IPlunger_MotionDevice(IPlunger* This,int *pVal) {
    return This->lpVtbl->MotionDevice(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_TimerEnabled(IPlunger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_TimerEnabled(IPlunger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_TimerInterval(IPlunger* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_TimerInterval(IPlunger* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_X(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_X(IPlunger* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Y(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Y(IPlunger* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Width(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_Width(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Width(IPlunger* This,float newVal) {
    return This->lpVtbl->put_Width(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_ZAdjust(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_ZAdjust(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_ZAdjust(IPlunger* This,float newVal) {
    return This->lpVtbl->put_ZAdjust(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Surface(IPlunger* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Surface(IPlunger* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Name(IPlunger* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Name(IPlunger* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_UserValue(IPlunger* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_UserValue(IPlunger* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Type(IPlunger* This,PlungerType *pVal) {
    return This->lpVtbl->get_Type(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Type(IPlunger* This,PlungerType newVal) {
    return This->lpVtbl->put_Type(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Material(IPlunger* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Material(IPlunger* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Image(IPlunger* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Image(IPlunger* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_AnimFrames(IPlunger* This,int *pVal) {
    return This->lpVtbl->get_AnimFrames(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_AnimFrames(IPlunger* This,int newVal) {
    return This->lpVtbl->put_AnimFrames(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_TipShape(IPlunger* This,BSTR *pVal) {
    return This->lpVtbl->get_TipShape(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_TipShape(IPlunger* This,BSTR newVal) {
    return This->lpVtbl->put_TipShape(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_RodDiam(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_RodDiam(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_RodDiam(IPlunger* This,float newVal) {
    return This->lpVtbl->put_RodDiam(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_RingGap(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_RingGap(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_RingGap(IPlunger* This,float newVal) {
    return This->lpVtbl->put_RingGap(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_RingDiam(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_RingDiam(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_RingDiam(IPlunger* This,float newVal) {
    return This->lpVtbl->put_RingDiam(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_RingWidth(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_RingWidth(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_RingWidth(IPlunger* This,float newVal) {
    return This->lpVtbl->put_RingWidth(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_SpringDiam(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_SpringDiam(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_SpringDiam(IPlunger* This,float newVal) {
    return This->lpVtbl->put_SpringDiam(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_SpringGauge(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_SpringGauge(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_SpringGauge(IPlunger* This,float newVal) {
    return This->lpVtbl->put_SpringGauge(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_SpringLoops(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_SpringLoops(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_SpringLoops(IPlunger* This,float newVal) {
    return This->lpVtbl->put_SpringLoops(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_SpringEndLoops(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_SpringEndLoops(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_SpringEndLoops(IPlunger* This,float newVal) {
    return This->lpVtbl->put_SpringEndLoops(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_MechPlunger(IPlunger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_MechPlunger(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_MechPlunger(IPlunger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_MechPlunger(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_AutoPlunger(IPlunger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_AutoPlunger(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_AutoPlunger(IPlunger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_AutoPlunger(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Visible(IPlunger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Visible(IPlunger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_MechStrength(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_MechStrength(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_MechStrength(IPlunger* This,float newVal) {
    return This->lpVtbl->put_MechStrength(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_ParkPosition(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_ParkPosition(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_ParkPosition(IPlunger* This,float newVal) {
    return This->lpVtbl->put_ParkPosition(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_Stroke(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_Stroke(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_Stroke(IPlunger* This,float newVal) {
    return This->lpVtbl->put_Stroke(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_ScatterVelocity(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_ScatterVelocity(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_ScatterVelocity(IPlunger* This,float newVal) {
    return This->lpVtbl->put_ScatterVelocity(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_MomentumXfer(IPlunger* This,float *pVal) {
    return This->lpVtbl->get_MomentumXfer(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_MomentumXfer(IPlunger* This,float newVal) {
    return This->lpVtbl->put_MomentumXfer(This,newVal);
}
static __WIDL_INLINE HRESULT IPlunger_get_ReflectionEnabled(IPlunger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IPlunger_put_ReflectionEnabled(IPlunger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IPlunger_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPlungerEvents dispinterface
 */
#ifndef __IPlungerEvents_DISPINTERFACE_DEFINED__
#define __IPlungerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IPlungerEvents, 0x9bca5dd9, 0xb893, 0x4595, 0x9d,0x3a, 0x8b,0xd7,0x7f,0xb5,0xde,0x71);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9bca5dd9-b893-4595-9d3a-8bd77fb5de71")
IPlungerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPlungerEvents, 0x9bca5dd9, 0xb893, 0x4595, 0x9d,0x3a, 0x8b,0xd7,0x7f,0xb5,0xde,0x71)
#endif
#else
typedef struct IPlungerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPlungerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPlungerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPlungerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IPlungerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IPlungerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IPlungerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IPlungerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IPlungerEventsVtbl;

interface IPlungerEvents {
    CONST_VTBL IPlungerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPlungerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPlungerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPlungerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IPlungerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IPlungerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IPlungerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IPlungerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IPlungerEvents_QueryInterface(IPlungerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IPlungerEvents_AddRef(IPlungerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IPlungerEvents_Release(IPlungerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IPlungerEvents_GetTypeInfoCount(IPlungerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IPlungerEvents_GetTypeInfo(IPlungerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IPlungerEvents_GetIDsOfNames(IPlungerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IPlungerEvents_Invoke(IPlungerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IPlungerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ITextbox interface
 */
#ifndef __ITextbox_INTERFACE_DEFINED__
#define __ITextbox_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITextbox, 0x596fcd76, 0xc5e8, 0x4b6a, 0xa3,0x33, 0xfb,0x0d,0x64,0x5e,0x05,0x18);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("596fcd76-c5e8-4b6a-a333-fb0d645e0518")
ITextbox : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_BackColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FontColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FontColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Text(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Text(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Font(
        IFontDisp **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE putref_Font(
        IFontDisp *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Alignment(
        TextAlignment *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Alignment(
        TextAlignment newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsTransparent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsTransparent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DMD(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMD(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IntensityScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IntensityScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITextbox, 0x596fcd76, 0xc5e8, 0x4b6a, 0xa3,0x33, 0xfb,0x0d,0x64,0x5e,0x05,0x18)
#endif
#else
typedef struct ITextboxVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITextbox *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITextbox *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITextbox *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITextbox *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITextbox *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITextbox *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITextbox *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITextbox methods ***/
    HRESULT (STDMETHODCALLTYPE *get_BackColor)(
        ITextbox *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackColor)(
        ITextbox *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_FontColor)(
        ITextbox *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FontColor)(
        ITextbox *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Text)(
        ITextbox *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Text)(
        ITextbox *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Font)(
        ITextbox *This,
        IFontDisp **pVal);

    HRESULT (STDMETHODCALLTYPE *putref_Font)(
        ITextbox *This,
        IFontDisp *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        ITextbox *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        ITextbox *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        ITextbox *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        ITextbox *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Alignment)(
        ITextbox *This,
        TextAlignment *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Alignment)(
        ITextbox *This,
        TextAlignment newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsTransparent)(
        ITextbox *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsTransparent)(
        ITextbox *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DMD)(
        ITextbox *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMD)(
        ITextbox *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        ITextbox *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        ITextbox *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        ITextbox *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        ITextbox *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        ITextbox *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        ITextbox *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        ITextbox *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        ITextbox *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_IntensityScale)(
        ITextbox *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IntensityScale)(
        ITextbox *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ITextbox *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ITextbox *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ITextbox *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ITextbox *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        ITextbox *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        ITextbox *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} ITextboxVtbl;

interface ITextbox {
    CONST_VTBL ITextboxVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITextbox_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITextbox_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITextbox_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITextbox_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITextbox_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITextbox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITextbox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITextbox methods ***/
#define ITextbox_get_BackColor(This,pVal) (This)->lpVtbl->get_BackColor(This,pVal)
#define ITextbox_put_BackColor(This,newVal) (This)->lpVtbl->put_BackColor(This,newVal)
#define ITextbox_get_FontColor(This,pVal) (This)->lpVtbl->get_FontColor(This,pVal)
#define ITextbox_put_FontColor(This,newVal) (This)->lpVtbl->put_FontColor(This,newVal)
#define ITextbox_get_Text(This,pVal) (This)->lpVtbl->get_Text(This,pVal)
#define ITextbox_put_Text(This,newVal) (This)->lpVtbl->put_Text(This,newVal)
#define ITextbox_get_Font(This,pVal) (This)->lpVtbl->get_Font(This,pVal)
#define ITextbox_putref_Font(This,newVal) (This)->lpVtbl->putref_Font(This,newVal)
#define ITextbox_get_Width(This,pVal) (This)->lpVtbl->get_Width(This,pVal)
#define ITextbox_put_Width(This,newVal) (This)->lpVtbl->put_Width(This,newVal)
#define ITextbox_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define ITextbox_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define ITextbox_get_Alignment(This,pVal) (This)->lpVtbl->get_Alignment(This,pVal)
#define ITextbox_put_Alignment(This,newVal) (This)->lpVtbl->put_Alignment(This,newVal)
#define ITextbox_get_IsTransparent(This,pVal) (This)->lpVtbl->get_IsTransparent(This,pVal)
#define ITextbox_put_IsTransparent(This,newVal) (This)->lpVtbl->put_IsTransparent(This,newVal)
#define ITextbox_get_DMD(This,pVal) (This)->lpVtbl->get_DMD(This,pVal)
#define ITextbox_put_DMD(This,newVal) (This)->lpVtbl->put_DMD(This,newVal)
#define ITextbox_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define ITextbox_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define ITextbox_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define ITextbox_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define ITextbox_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define ITextbox_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define ITextbox_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define ITextbox_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define ITextbox_get_IntensityScale(This,pVal) (This)->lpVtbl->get_IntensityScale(This,pVal)
#define ITextbox_put_IntensityScale(This,newVal) (This)->lpVtbl->put_IntensityScale(This,newVal)
#define ITextbox_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ITextbox_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ITextbox_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ITextbox_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define ITextbox_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define ITextbox_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITextbox_QueryInterface(ITextbox* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITextbox_AddRef(ITextbox* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITextbox_Release(ITextbox* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITextbox_GetTypeInfoCount(ITextbox* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITextbox_GetTypeInfo(ITextbox* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITextbox_GetIDsOfNames(ITextbox* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITextbox_Invoke(ITextbox* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITextbox methods ***/
static __WIDL_INLINE HRESULT ITextbox_get_BackColor(ITextbox* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_BackColor(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_BackColor(ITextbox* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_BackColor(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_FontColor(ITextbox* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_FontColor(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_FontColor(ITextbox* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_FontColor(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Text(ITextbox* This,BSTR *pVal) {
    return This->lpVtbl->get_Text(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Text(ITextbox* This,BSTR newVal) {
    return This->lpVtbl->put_Text(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Font(ITextbox* This,IFontDisp **pVal) {
    return This->lpVtbl->get_Font(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_putref_Font(ITextbox* This,IFontDisp *newVal) {
    return This->lpVtbl->putref_Font(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Width(ITextbox* This,float *pVal) {
    return This->lpVtbl->get_Width(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Width(ITextbox* This,float newVal) {
    return This->lpVtbl->put_Width(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Height(ITextbox* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Height(ITextbox* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Alignment(ITextbox* This,TextAlignment *pVal) {
    return This->lpVtbl->get_Alignment(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Alignment(ITextbox* This,TextAlignment newVal) {
    return This->lpVtbl->put_Alignment(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_IsTransparent(ITextbox* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsTransparent(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_IsTransparent(ITextbox* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsTransparent(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_DMD(ITextbox* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DMD(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_DMD(ITextbox* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DMD(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_TimerEnabled(ITextbox* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_TimerEnabled(ITextbox* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_TimerInterval(ITextbox* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_TimerInterval(ITextbox* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_X(ITextbox* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_X(ITextbox* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Y(ITextbox* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Y(ITextbox* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_IntensityScale(ITextbox* This,float *pVal) {
    return This->lpVtbl->get_IntensityScale(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_IntensityScale(ITextbox* This,float newVal) {
    return This->lpVtbl->put_IntensityScale(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Name(ITextbox* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Name(ITextbox* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_UserValue(ITextbox* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_UserValue(ITextbox* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT ITextbox_get_Visible(ITextbox* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT ITextbox_put_Visible(ITextbox* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
#endif
#endif

#endif


#endif  /* __ITextbox_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITextboxEvents dispinterface
 */
#ifndef __ITextboxEvents_DISPINTERFACE_DEFINED__
#define __ITextboxEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ITextboxEvents, 0xf1c767b8, 0x7351, 0x4ebc, 0x80,0x22, 0xe7,0x31,0x43,0xbe,0x6f,0x5d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f1c767b8-7351-4ebc-8022-e73143be6f5d")
ITextboxEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITextboxEvents, 0xf1c767b8, 0x7351, 0x4ebc, 0x80,0x22, 0xe7,0x31,0x43,0xbe,0x6f,0x5d)
#endif
#else
typedef struct ITextboxEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITextboxEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITextboxEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITextboxEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITextboxEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITextboxEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITextboxEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITextboxEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ITextboxEventsVtbl;

interface ITextboxEvents {
    CONST_VTBL ITextboxEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITextboxEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITextboxEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITextboxEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITextboxEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITextboxEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITextboxEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITextboxEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITextboxEvents_QueryInterface(ITextboxEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITextboxEvents_AddRef(ITextboxEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITextboxEvents_Release(ITextboxEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITextboxEvents_GetTypeInfoCount(ITextboxEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITextboxEvents_GetTypeInfo(ITextboxEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITextboxEvents_GetIDsOfNames(ITextboxEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITextboxEvents_Invoke(ITextboxEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ITextboxEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IBumper interface
 */
#ifndef __IBumper_INTERFACE_DEFINED__
#define __IBumper_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBumper, 0x4cb2fcca, 0x9336, 0x48ff, 0x90,0xbd, 0xf8,0xd0,0x1c,0x16,0xbe,0x8c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4cb2fcca-9336-48ff-90bd-f8d01c16be8c")
IBumper : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Radius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Radius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BaseMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BaseMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SkirtMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SkirtMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Force(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Force(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Threshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Threshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CapMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CapMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HeightScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HeightScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Orientation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Orientation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingSpeed(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingSpeed(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingDropOffset(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingDropOffset(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentRingOffset(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CapVisible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CapVisible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BaseVisible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BaseVisible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RingVisible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RingVisible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SkirtVisible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SkirtVisible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableSkirtAnimation(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableSkirtAnimation(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE PlayHit(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBumper, 0x4cb2fcca, 0x9336, 0x48ff, 0x90,0xbd, 0xf8,0xd0,0x1c,0x16,0xbe,0x8c)
#endif
#else
typedef struct IBumperVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBumper *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBumper *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBumper *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IBumper *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IBumper *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IBumper *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IBumper *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IBumper methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Radius)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Radius)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BaseMaterial)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BaseMaterial)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SkirtMaterial)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SkirtMaterial)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IBumper *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IBumper *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Force)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Force)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Threshold)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Threshold)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IBumper *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IBumper *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_CapMaterial)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CapMaterial)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingMaterial)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingMaterial)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_HeightScale)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HeightScale)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Orientation)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Orientation)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingSpeed)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingSpeed)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingDropOffset)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingDropOffset)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentRingOffset)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IBumper *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IBumper *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_CapVisible)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CapVisible)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BaseVisible)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BaseVisible)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_RingVisible)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RingVisible)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_SkirtVisible)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SkirtVisible)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IBumper *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IBumper *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableSkirtAnimation)(
        IBumper *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableSkirtAnimation)(
        IBumper *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *PlayHit)(
        IBumper *This);

    END_INTERFACE
} IBumperVtbl;

interface IBumper {
    CONST_VTBL IBumperVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBumper_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBumper_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBumper_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IBumper_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IBumper_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IBumper_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IBumper_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IBumper methods ***/
#define IBumper_get_Radius(This,pVal) (This)->lpVtbl->get_Radius(This,pVal)
#define IBumper_put_Radius(This,newVal) (This)->lpVtbl->put_Radius(This,newVal)
#define IBumper_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IBumper_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IBumper_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IBumper_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IBumper_get_BaseMaterial(This,pVal) (This)->lpVtbl->get_BaseMaterial(This,pVal)
#define IBumper_put_BaseMaterial(This,newVal) (This)->lpVtbl->put_BaseMaterial(This,newVal)
#define IBumper_get_SkirtMaterial(This,pVal) (This)->lpVtbl->get_SkirtMaterial(This,pVal)
#define IBumper_put_SkirtMaterial(This,newVal) (This)->lpVtbl->put_SkirtMaterial(This,newVal)
#define IBumper_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IBumper_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IBumper_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IBumper_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define IBumper_get_Force(This,pVal) (This)->lpVtbl->get_Force(This,pVal)
#define IBumper_put_Force(This,newVal) (This)->lpVtbl->put_Force(This,newVal)
#define IBumper_get_Threshold(This,pVal) (This)->lpVtbl->get_Threshold(This,pVal)
#define IBumper_put_Threshold(This,newVal) (This)->lpVtbl->put_Threshold(This,newVal)
#define IBumper_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IBumper_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IBumper_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IBumper_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IBumper_get_CapMaterial(This,pVal) (This)->lpVtbl->get_CapMaterial(This,pVal)
#define IBumper_put_CapMaterial(This,newVal) (This)->lpVtbl->put_CapMaterial(This,newVal)
#define IBumper_get_RingMaterial(This,pVal) (This)->lpVtbl->get_RingMaterial(This,pVal)
#define IBumper_put_RingMaterial(This,newVal) (This)->lpVtbl->put_RingMaterial(This,newVal)
#define IBumper_get_HeightScale(This,pVal) (This)->lpVtbl->get_HeightScale(This,pVal)
#define IBumper_put_HeightScale(This,newVal) (This)->lpVtbl->put_HeightScale(This,newVal)
#define IBumper_get_Orientation(This,pVal) (This)->lpVtbl->get_Orientation(This,pVal)
#define IBumper_put_Orientation(This,newVal) (This)->lpVtbl->put_Orientation(This,newVal)
#define IBumper_get_RingSpeed(This,pVal) (This)->lpVtbl->get_RingSpeed(This,pVal)
#define IBumper_put_RingSpeed(This,newVal) (This)->lpVtbl->put_RingSpeed(This,newVal)
#define IBumper_get_RingDropOffset(This,pVal) (This)->lpVtbl->get_RingDropOffset(This,pVal)
#define IBumper_put_RingDropOffset(This,newVal) (This)->lpVtbl->put_RingDropOffset(This,newVal)
#define IBumper_get_CurrentRingOffset(This,pVal) (This)->lpVtbl->get_CurrentRingOffset(This,pVal)
#define IBumper_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IBumper_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IBumper_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IBumper_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IBumper_get_CapVisible(This,pVal) (This)->lpVtbl->get_CapVisible(This,pVal)
#define IBumper_put_CapVisible(This,newVal) (This)->lpVtbl->put_CapVisible(This,newVal)
#define IBumper_get_BaseVisible(This,pVal) (This)->lpVtbl->get_BaseVisible(This,pVal)
#define IBumper_put_BaseVisible(This,newVal) (This)->lpVtbl->put_BaseVisible(This,newVal)
#define IBumper_get_RingVisible(This,pVal) (This)->lpVtbl->get_RingVisible(This,pVal)
#define IBumper_put_RingVisible(This,newVal) (This)->lpVtbl->put_RingVisible(This,newVal)
#define IBumper_get_SkirtVisible(This,pVal) (This)->lpVtbl->get_SkirtVisible(This,pVal)
#define IBumper_put_SkirtVisible(This,newVal) (This)->lpVtbl->put_SkirtVisible(This,newVal)
#define IBumper_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IBumper_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IBumper_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IBumper_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IBumper_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IBumper_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IBumper_get_EnableSkirtAnimation(This,pVal) (This)->lpVtbl->get_EnableSkirtAnimation(This,pVal)
#define IBumper_put_EnableSkirtAnimation(This,newVal) (This)->lpVtbl->put_EnableSkirtAnimation(This,newVal)
#define IBumper_PlayHit(This) (This)->lpVtbl->PlayHit(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IBumper_QueryInterface(IBumper* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IBumper_AddRef(IBumper* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IBumper_Release(IBumper* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IBumper_GetTypeInfoCount(IBumper* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IBumper_GetTypeInfo(IBumper* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IBumper_GetIDsOfNames(IBumper* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IBumper_Invoke(IBumper* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IBumper methods ***/
static __WIDL_INLINE HRESULT IBumper_get_Radius(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Radius(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Radius(IBumper* This,float newVal) {
    return This->lpVtbl->put_Radius(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_X(IBumper* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_X(IBumper* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Y(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Y(IBumper* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_BaseMaterial(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_BaseMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_BaseMaterial(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_BaseMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_SkirtMaterial(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_SkirtMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_SkirtMaterial(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_SkirtMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_UserValue(IBumper* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_UserValue(IBumper* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Surface(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Surface(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Force(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Force(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Force(IBumper* This,float newVal) {
    return This->lpVtbl->put_Force(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Threshold(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Threshold(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Threshold(IBumper* This,float newVal) {
    return This->lpVtbl->put_Threshold(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_TimerEnabled(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_TimerEnabled(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_TimerInterval(IBumper* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_TimerInterval(IBumper* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_CapMaterial(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_CapMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_CapMaterial(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_CapMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_RingMaterial(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_RingMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_RingMaterial(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_RingMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_HeightScale(IBumper* This,float *pVal) {
    return This->lpVtbl->get_HeightScale(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_HeightScale(IBumper* This,float newVal) {
    return This->lpVtbl->put_HeightScale(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Orientation(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Orientation(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Orientation(IBumper* This,float newVal) {
    return This->lpVtbl->put_Orientation(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_RingSpeed(IBumper* This,float *pVal) {
    return This->lpVtbl->get_RingSpeed(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_RingSpeed(IBumper* This,float newVal) {
    return This->lpVtbl->put_RingSpeed(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_RingDropOffset(IBumper* This,float *pVal) {
    return This->lpVtbl->get_RingDropOffset(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_RingDropOffset(IBumper* This,float newVal) {
    return This->lpVtbl->put_RingDropOffset(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_CurrentRingOffset(IBumper* This,float *pVal) {
    return This->lpVtbl->get_CurrentRingOffset(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Name(IBumper* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Name(IBumper* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_HasHitEvent(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_HasHitEvent(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_CapVisible(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_CapVisible(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_CapVisible(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_CapVisible(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_BaseVisible(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_BaseVisible(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_BaseVisible(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_BaseVisible(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_RingVisible(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_RingVisible(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_RingVisible(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_RingVisible(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_SkirtVisible(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_SkirtVisible(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_SkirtVisible(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_SkirtVisible(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Collidable(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Collidable(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_ReflectionEnabled(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_ReflectionEnabled(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_Scatter(IBumper* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_Scatter(IBumper* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_get_EnableSkirtAnimation(IBumper* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableSkirtAnimation(This,pVal);
}
static __WIDL_INLINE HRESULT IBumper_put_EnableSkirtAnimation(IBumper* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableSkirtAnimation(This,newVal);
}
static __WIDL_INLINE HRESULT IBumper_PlayHit(IBumper* This) {
    return This->lpVtbl->PlayHit(This);
}
#endif
#endif

#endif


#endif  /* __IBumper_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IBumperEvents dispinterface
 */
#ifndef __IBumperEvents_DISPINTERFACE_DEFINED__
#define __IBumperEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IBumperEvents, 0xd868ee8d, 0xaf83, 0x4c7a, 0xa6,0x8e, 0x1d,0xba,0x95,0x64,0x34,0xa7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d868ee8d-af83-4c7a-a68e-1dba956434a7")
IBumperEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBumperEvents, 0xd868ee8d, 0xaf83, 0x4c7a, 0xa6,0x8e, 0x1d,0xba,0x95,0x64,0x34,0xa7)
#endif
#else
typedef struct IBumperEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBumperEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBumperEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBumperEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IBumperEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IBumperEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IBumperEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IBumperEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IBumperEventsVtbl;

interface IBumperEvents {
    CONST_VTBL IBumperEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBumperEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBumperEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBumperEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IBumperEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IBumperEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IBumperEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IBumperEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IBumperEvents_QueryInterface(IBumperEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IBumperEvents_AddRef(IBumperEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IBumperEvents_Release(IBumperEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IBumperEvents_GetTypeInfoCount(IBumperEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IBumperEvents_GetTypeInfo(IBumperEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IBumperEvents_GetIDsOfNames(IBumperEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IBumperEvents_Invoke(IBumperEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IBumperEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ITrigger interface
 */
#ifndef __ITrigger_INTERFACE_DEFINED__
#define __ITrigger_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITrigger, 0xcd5054c6, 0x016f, 0x4bb5, 0xb1,0x31, 0x12,0xfe,0x29,0x72,0x0d,0xf8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cd5054c6-016f-4bb5-b131-12fe29720df8")
ITrigger : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Radius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Radius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TriggerShape(
        TriggerShape *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TriggerShape(
        TriggerShape newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE BallCntOver(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE DestroyBall(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HitHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Rotation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Rotation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WireThickness(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WireThickness(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AnimSpeed(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AnimSpeed(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAnimOffset(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITrigger, 0xcd5054c6, 0x016f, 0x4bb5, 0xb1,0x31, 0x12,0xfe,0x29,0x72,0x0d,0xf8)
#endif
#else
typedef struct ITriggerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITrigger *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITrigger *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITrigger *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITrigger *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITrigger *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITrigger *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITrigger *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITrigger methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Radius)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Radius)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        ITrigger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        ITrigger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        ITrigger *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        ITrigger *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        ITrigger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        ITrigger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        ITrigger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        ITrigger *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TriggerShape)(
        ITrigger *This,
        TriggerShape *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TriggerShape)(
        ITrigger *This,
        TriggerShape newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        ITrigger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        ITrigger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ITrigger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ITrigger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ITrigger *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ITrigger *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *BallCntOver)(
        ITrigger *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *DestroyBall)(
        ITrigger *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_HitHeight)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HitHeight)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        ITrigger *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        ITrigger *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Rotation)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Rotation)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WireThickness)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WireThickness)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AnimSpeed)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AnimSpeed)(
        ITrigger *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAnimOffset)(
        ITrigger *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        ITrigger *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        ITrigger *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} ITriggerVtbl;

interface ITrigger {
    CONST_VTBL ITriggerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITrigger_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITrigger_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITrigger_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITrigger_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITrigger_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITrigger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITrigger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITrigger methods ***/
#define ITrigger_get_Radius(This,pVal) (This)->lpVtbl->get_Radius(This,pVal)
#define ITrigger_put_Radius(This,newVal) (This)->lpVtbl->put_Radius(This,newVal)
#define ITrigger_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define ITrigger_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define ITrigger_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define ITrigger_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define ITrigger_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define ITrigger_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define ITrigger_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define ITrigger_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define ITrigger_get_Enabled(This,pVal) (This)->lpVtbl->get_Enabled(This,pVal)
#define ITrigger_put_Enabled(This,newVal) (This)->lpVtbl->put_Enabled(This,newVal)
#define ITrigger_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define ITrigger_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define ITrigger_get_TriggerShape(This,pVal) (This)->lpVtbl->get_TriggerShape(This,pVal)
#define ITrigger_put_TriggerShape(This,newVal) (This)->lpVtbl->put_TriggerShape(This,newVal)
#define ITrigger_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define ITrigger_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define ITrigger_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ITrigger_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ITrigger_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ITrigger_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define ITrigger_BallCntOver(This,pVal) (This)->lpVtbl->BallCntOver(This,pVal)
#define ITrigger_DestroyBall(This,pVal) (This)->lpVtbl->DestroyBall(This,pVal)
#define ITrigger_get_HitHeight(This,pVal) (This)->lpVtbl->get_HitHeight(This,pVal)
#define ITrigger_put_HitHeight(This,newVal) (This)->lpVtbl->put_HitHeight(This,newVal)
#define ITrigger_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define ITrigger_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define ITrigger_get_Rotation(This,pVal) (This)->lpVtbl->get_Rotation(This,pVal)
#define ITrigger_put_Rotation(This,newVal) (This)->lpVtbl->put_Rotation(This,newVal)
#define ITrigger_get_WireThickness(This,pVal) (This)->lpVtbl->get_WireThickness(This,pVal)
#define ITrigger_put_WireThickness(This,newVal) (This)->lpVtbl->put_WireThickness(This,newVal)
#define ITrigger_get_AnimSpeed(This,pVal) (This)->lpVtbl->get_AnimSpeed(This,pVal)
#define ITrigger_put_AnimSpeed(This,newVal) (This)->lpVtbl->put_AnimSpeed(This,newVal)
#define ITrigger_get_CurrentAnimOffset(This,pVal) (This)->lpVtbl->get_CurrentAnimOffset(This,pVal)
#define ITrigger_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define ITrigger_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITrigger_QueryInterface(ITrigger* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITrigger_AddRef(ITrigger* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITrigger_Release(ITrigger* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITrigger_GetTypeInfoCount(ITrigger* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITrigger_GetTypeInfo(ITrigger* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITrigger_GetIDsOfNames(ITrigger* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITrigger_Invoke(ITrigger* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITrigger methods ***/
static __WIDL_INLINE HRESULT ITrigger_get_Radius(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_Radius(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Radius(ITrigger* This,float newVal) {
    return This->lpVtbl->put_Radius(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_TimerEnabled(ITrigger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_TimerEnabled(ITrigger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_TimerInterval(ITrigger* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_TimerInterval(ITrigger* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_X(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_X(ITrigger* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Y(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Y(ITrigger* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Enabled(ITrigger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Enabled(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Enabled(ITrigger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Enabled(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Visible(ITrigger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Visible(ITrigger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_TriggerShape(ITrigger* This,TriggerShape *pVal) {
    return This->lpVtbl->get_TriggerShape(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_TriggerShape(ITrigger* This,TriggerShape newVal) {
    return This->lpVtbl->put_TriggerShape(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Surface(ITrigger* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Surface(ITrigger* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Name(ITrigger* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Name(ITrigger* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_UserValue(ITrigger* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_UserValue(ITrigger* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_BallCntOver(ITrigger* This,int *pVal) {
    return This->lpVtbl->BallCntOver(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_DestroyBall(ITrigger* This,int *pVal) {
    return This->lpVtbl->DestroyBall(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_HitHeight(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_HitHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_HitHeight(ITrigger* This,float newVal) {
    return This->lpVtbl->put_HitHeight(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Material(ITrigger* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Material(ITrigger* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_Rotation(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_Rotation(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_Rotation(ITrigger* This,float newVal) {
    return This->lpVtbl->put_Rotation(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_WireThickness(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_WireThickness(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_WireThickness(ITrigger* This,float newVal) {
    return This->lpVtbl->put_WireThickness(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_AnimSpeed(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_AnimSpeed(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_AnimSpeed(ITrigger* This,float newVal) {
    return This->lpVtbl->put_AnimSpeed(This,newVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_CurrentAnimOffset(ITrigger* This,float *pVal) {
    return This->lpVtbl->get_CurrentAnimOffset(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_get_ReflectionEnabled(ITrigger* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ITrigger_put_ReflectionEnabled(ITrigger* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
#endif
#endif

#endif


#endif  /* __ITrigger_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITriggerEvents dispinterface
 */
#ifndef __ITriggerEvents_DISPINTERFACE_DEFINED__
#define __ITriggerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ITriggerEvents, 0x8b71cb94, 0x698c, 0x4839, 0x88,0x32, 0x95,0x65,0x01,0xd3,0xde,0xca);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8b71cb94-698c-4839-8832-956501d3deca")
ITriggerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITriggerEvents, 0x8b71cb94, 0x698c, 0x4839, 0x88,0x32, 0x95,0x65,0x01,0xd3,0xde,0xca)
#endif
#else
typedef struct ITriggerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITriggerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITriggerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITriggerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITriggerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITriggerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITriggerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITriggerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ITriggerEventsVtbl;

interface ITriggerEvents {
    CONST_VTBL ITriggerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITriggerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITriggerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITriggerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITriggerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITriggerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITriggerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITriggerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITriggerEvents_QueryInterface(ITriggerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITriggerEvents_AddRef(ITriggerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITriggerEvents_Release(ITriggerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITriggerEvents_GetTypeInfoCount(ITriggerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITriggerEvents_GetTypeInfo(ITriggerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITriggerEvents_GetIDsOfNames(ITriggerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITriggerEvents_Invoke(ITriggerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ITriggerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ILight interface
 */
#ifndef __ILight_INTERFACE_DEFINED__
#define __ILight_INTERFACE_DEFINED__

DEFINE_GUID(IID_ILight, 0xd3013008, 0x52af, 0x410b, 0xad,0x03, 0x66,0xeb,0x37,0xd1,0xc8,0xac);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d3013008-52af-410b-ad03-66eb37d1c8ac")
ILight : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Falloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Falloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FalloffPower(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FalloffPower(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_State(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_State(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInPlayState(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInPlayStateBool(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInPlayIntensity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Color(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Color(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ColorFull(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ColorFull(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlinkPattern(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlinkPattern(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlinkInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlinkInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Duration(
        float startState,
        long newVal,
        float endState) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Intensity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Intensity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TransmissionScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TransmissionScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IntensityScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IntensityScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageMode(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageMode(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DepthBias(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DepthBias(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FadeSpeedUp(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FadeSpeedUp(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FadeSpeedDown(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FadeSpeedDown(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Bulb(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Bulb(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowBulbMesh(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowBulbMesh(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StaticBulbMesh(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_StaticBulbMesh(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowReflectionOnBall(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowReflectionOnBall(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScaleBulbMesh(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ScaleBulbMesh(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BulbModulateVsAdd(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BulbModulateVsAdd(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BulbHaloHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BulbHaloHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Shadows(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Shadows(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Fader(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Fader(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FilamentTemperature(
        float *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILight, 0xd3013008, 0x52af, 0x410b, 0xad,0x03, 0x66,0xeb,0x37,0xd1,0xc8,0xac)
#endif
#else
typedef struct ILightVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILight *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILight *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILight *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ILight *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ILight *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ILight *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ILight *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ILight methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Falloff)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Falloff)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FalloffPower)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FalloffPower)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_State)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_State)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *GetInPlayState)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *GetInPlayStateBool)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *GetInPlayIntensity)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Color)(
        ILight *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Color)(
        ILight *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ColorFull)(
        ILight *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ColorFull)(
        ILight *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        ILight *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        ILight *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlinkPattern)(
        ILight *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlinkPattern)(
        ILight *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlinkInterval)(
        ILight *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlinkInterval)(
        ILight *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *Duration)(
        ILight *This,
        float startState,
        long newVal,
        float endState);

    HRESULT (STDMETHODCALLTYPE *get_Intensity)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Intensity)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TransmissionScale)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TransmissionScale)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_IntensityScale)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IntensityScale)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        ILight *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        ILight *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ILight *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ILight *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ILight *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ILight *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        ILight *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        ILight *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageMode)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageMode)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DepthBias)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DepthBias)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FadeSpeedUp)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FadeSpeedUp)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FadeSpeedDown)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FadeSpeedDown)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Bulb)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Bulb)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowBulbMesh)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowBulbMesh)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_StaticBulbMesh)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_StaticBulbMesh)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowReflectionOnBall)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowReflectionOnBall)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ScaleBulbMesh)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ScaleBulbMesh)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BulbModulateVsAdd)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BulbModulateVsAdd)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BulbHaloHeight)(
        ILight *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BulbHaloHeight)(
        ILight *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        ILight *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        ILight *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Shadows)(
        ILight *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Shadows)(
        ILight *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_Fader)(
        ILight *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Fader)(
        ILight *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_FilamentTemperature)(
        ILight *This,
        float *pVal);

    END_INTERFACE
} ILightVtbl;

interface ILight {
    CONST_VTBL ILightVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILight_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILight_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILight_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ILight_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ILight_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ILight_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ILight_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ILight methods ***/
#define ILight_get_Falloff(This,pVal) (This)->lpVtbl->get_Falloff(This,pVal)
#define ILight_put_Falloff(This,newVal) (This)->lpVtbl->put_Falloff(This,newVal)
#define ILight_get_FalloffPower(This,pVal) (This)->lpVtbl->get_FalloffPower(This,pVal)
#define ILight_put_FalloffPower(This,newVal) (This)->lpVtbl->put_FalloffPower(This,newVal)
#define ILight_get_State(This,pVal) (This)->lpVtbl->get_State(This,pVal)
#define ILight_put_State(This,newVal) (This)->lpVtbl->put_State(This,newVal)
#define ILight_GetInPlayState(This,pVal) (This)->lpVtbl->GetInPlayState(This,pVal)
#define ILight_GetInPlayStateBool(This,pVal) (This)->lpVtbl->GetInPlayStateBool(This,pVal)
#define ILight_GetInPlayIntensity(This,pVal) (This)->lpVtbl->GetInPlayIntensity(This,pVal)
#define ILight_get_Color(This,pVal) (This)->lpVtbl->get_Color(This,pVal)
#define ILight_put_Color(This,newVal) (This)->lpVtbl->put_Color(This,newVal)
#define ILight_get_ColorFull(This,pVal) (This)->lpVtbl->get_ColorFull(This,pVal)
#define ILight_put_ColorFull(This,newVal) (This)->lpVtbl->put_ColorFull(This,newVal)
#define ILight_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define ILight_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define ILight_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define ILight_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define ILight_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define ILight_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define ILight_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define ILight_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define ILight_get_BlinkPattern(This,pVal) (This)->lpVtbl->get_BlinkPattern(This,pVal)
#define ILight_put_BlinkPattern(This,newVal) (This)->lpVtbl->put_BlinkPattern(This,newVal)
#define ILight_get_BlinkInterval(This,pVal) (This)->lpVtbl->get_BlinkInterval(This,pVal)
#define ILight_put_BlinkInterval(This,newVal) (This)->lpVtbl->put_BlinkInterval(This,newVal)
#define ILight_Duration(This,startState,newVal,endState) (This)->lpVtbl->Duration(This,startState,newVal,endState)
#define ILight_get_Intensity(This,pVal) (This)->lpVtbl->get_Intensity(This,pVal)
#define ILight_put_Intensity(This,newVal) (This)->lpVtbl->put_Intensity(This,newVal)
#define ILight_get_TransmissionScale(This,pVal) (This)->lpVtbl->get_TransmissionScale(This,pVal)
#define ILight_put_TransmissionScale(This,newVal) (This)->lpVtbl->put_TransmissionScale(This,newVal)
#define ILight_get_IntensityScale(This,pVal) (This)->lpVtbl->get_IntensityScale(This,pVal)
#define ILight_put_IntensityScale(This,newVal) (This)->lpVtbl->put_IntensityScale(This,newVal)
#define ILight_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define ILight_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define ILight_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ILight_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ILight_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ILight_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define ILight_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define ILight_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define ILight_get_ImageMode(This,pVal) (This)->lpVtbl->get_ImageMode(This,pVal)
#define ILight_put_ImageMode(This,newVal) (This)->lpVtbl->put_ImageMode(This,newVal)
#define ILight_get_DepthBias(This,pVal) (This)->lpVtbl->get_DepthBias(This,pVal)
#define ILight_put_DepthBias(This,newVal) (This)->lpVtbl->put_DepthBias(This,newVal)
#define ILight_get_FadeSpeedUp(This,pVal) (This)->lpVtbl->get_FadeSpeedUp(This,pVal)
#define ILight_put_FadeSpeedUp(This,newVal) (This)->lpVtbl->put_FadeSpeedUp(This,newVal)
#define ILight_get_FadeSpeedDown(This,pVal) (This)->lpVtbl->get_FadeSpeedDown(This,pVal)
#define ILight_put_FadeSpeedDown(This,newVal) (This)->lpVtbl->put_FadeSpeedDown(This,newVal)
#define ILight_get_Bulb(This,pVal) (This)->lpVtbl->get_Bulb(This,pVal)
#define ILight_put_Bulb(This,newVal) (This)->lpVtbl->put_Bulb(This,newVal)
#define ILight_get_ShowBulbMesh(This,pVal) (This)->lpVtbl->get_ShowBulbMesh(This,pVal)
#define ILight_put_ShowBulbMesh(This,newVal) (This)->lpVtbl->put_ShowBulbMesh(This,newVal)
#define ILight_get_StaticBulbMesh(This,pVal) (This)->lpVtbl->get_StaticBulbMesh(This,pVal)
#define ILight_put_StaticBulbMesh(This,newVal) (This)->lpVtbl->put_StaticBulbMesh(This,newVal)
#define ILight_get_ShowReflectionOnBall(This,pVal) (This)->lpVtbl->get_ShowReflectionOnBall(This,pVal)
#define ILight_put_ShowReflectionOnBall(This,newVal) (This)->lpVtbl->put_ShowReflectionOnBall(This,newVal)
#define ILight_get_ScaleBulbMesh(This,pVal) (This)->lpVtbl->get_ScaleBulbMesh(This,pVal)
#define ILight_put_ScaleBulbMesh(This,newVal) (This)->lpVtbl->put_ScaleBulbMesh(This,newVal)
#define ILight_get_BulbModulateVsAdd(This,pVal) (This)->lpVtbl->get_BulbModulateVsAdd(This,pVal)
#define ILight_put_BulbModulateVsAdd(This,newVal) (This)->lpVtbl->put_BulbModulateVsAdd(This,newVal)
#define ILight_get_BulbHaloHeight(This,pVal) (This)->lpVtbl->get_BulbHaloHeight(This,pVal)
#define ILight_put_BulbHaloHeight(This,newVal) (This)->lpVtbl->put_BulbHaloHeight(This,newVal)
#define ILight_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define ILight_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define ILight_get_Shadows(This,pVal) (This)->lpVtbl->get_Shadows(This,pVal)
#define ILight_put_Shadows(This,newVal) (This)->lpVtbl->put_Shadows(This,newVal)
#define ILight_get_Fader(This,pVal) (This)->lpVtbl->get_Fader(This,pVal)
#define ILight_put_Fader(This,newVal) (This)->lpVtbl->put_Fader(This,newVal)
#define ILight_get_FilamentTemperature(This,pVal) (This)->lpVtbl->get_FilamentTemperature(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ILight_QueryInterface(ILight* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ILight_AddRef(ILight* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ILight_Release(ILight* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ILight_GetTypeInfoCount(ILight* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ILight_GetTypeInfo(ILight* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ILight_GetIDsOfNames(ILight* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ILight_Invoke(ILight* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ILight methods ***/
static __WIDL_INLINE HRESULT ILight_get_Falloff(ILight* This,float *pVal) {
    return This->lpVtbl->get_Falloff(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Falloff(ILight* This,float newVal) {
    return This->lpVtbl->put_Falloff(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_FalloffPower(ILight* This,float *pVal) {
    return This->lpVtbl->get_FalloffPower(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_FalloffPower(ILight* This,float newVal) {
    return This->lpVtbl->put_FalloffPower(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_State(ILight* This,float *pVal) {
    return This->lpVtbl->get_State(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_State(ILight* This,float newVal) {
    return This->lpVtbl->put_State(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_GetInPlayState(ILight* This,float *pVal) {
    return This->lpVtbl->GetInPlayState(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_GetInPlayStateBool(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->GetInPlayStateBool(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_GetInPlayIntensity(ILight* This,float *pVal) {
    return This->lpVtbl->GetInPlayIntensity(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_get_Color(ILight* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_Color(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Color(ILight* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_Color(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_ColorFull(ILight* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_ColorFull(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_ColorFull(ILight* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_ColorFull(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_TimerEnabled(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_TimerEnabled(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_TimerInterval(ILight* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_TimerInterval(ILight* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_X(ILight* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_X(ILight* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Y(ILight* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Y(ILight* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_BlinkPattern(ILight* This,BSTR *pVal) {
    return This->lpVtbl->get_BlinkPattern(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_BlinkPattern(ILight* This,BSTR newVal) {
    return This->lpVtbl->put_BlinkPattern(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_BlinkInterval(ILight* This,long *pVal) {
    return This->lpVtbl->get_BlinkInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_BlinkInterval(ILight* This,long newVal) {
    return This->lpVtbl->put_BlinkInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_Duration(ILight* This,float startState,long newVal,float endState) {
    return This->lpVtbl->Duration(This,startState,newVal,endState);
}
static __WIDL_INLINE HRESULT ILight_get_Intensity(ILight* This,float *pVal) {
    return This->lpVtbl->get_Intensity(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Intensity(ILight* This,float newVal) {
    return This->lpVtbl->put_Intensity(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_TransmissionScale(ILight* This,float *pVal) {
    return This->lpVtbl->get_TransmissionScale(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_TransmissionScale(ILight* This,float newVal) {
    return This->lpVtbl->put_TransmissionScale(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_IntensityScale(ILight* This,float *pVal) {
    return This->lpVtbl->get_IntensityScale(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_IntensityScale(ILight* This,float newVal) {
    return This->lpVtbl->put_IntensityScale(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Surface(ILight* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Surface(ILight* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Name(ILight* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Name(ILight* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_UserValue(ILight* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_UserValue(ILight* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Image(ILight* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Image(ILight* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_ImageMode(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ImageMode(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_ImageMode(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ImageMode(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_DepthBias(ILight* This,float *pVal) {
    return This->lpVtbl->get_DepthBias(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_DepthBias(ILight* This,float newVal) {
    return This->lpVtbl->put_DepthBias(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_FadeSpeedUp(ILight* This,float *pVal) {
    return This->lpVtbl->get_FadeSpeedUp(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_FadeSpeedUp(ILight* This,float newVal) {
    return This->lpVtbl->put_FadeSpeedUp(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_FadeSpeedDown(ILight* This,float *pVal) {
    return This->lpVtbl->get_FadeSpeedDown(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_FadeSpeedDown(ILight* This,float newVal) {
    return This->lpVtbl->put_FadeSpeedDown(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Bulb(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Bulb(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Bulb(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Bulb(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_ShowBulbMesh(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowBulbMesh(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_ShowBulbMesh(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowBulbMesh(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_StaticBulbMesh(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_StaticBulbMesh(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_StaticBulbMesh(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_StaticBulbMesh(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_ShowReflectionOnBall(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowReflectionOnBall(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_ShowReflectionOnBall(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowReflectionOnBall(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_ScaleBulbMesh(ILight* This,float *pVal) {
    return This->lpVtbl->get_ScaleBulbMesh(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_ScaleBulbMesh(ILight* This,float newVal) {
    return This->lpVtbl->put_ScaleBulbMesh(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_BulbModulateVsAdd(ILight* This,float *pVal) {
    return This->lpVtbl->get_BulbModulateVsAdd(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_BulbModulateVsAdd(ILight* This,float newVal) {
    return This->lpVtbl->put_BulbModulateVsAdd(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_BulbHaloHeight(ILight* This,float *pVal) {
    return This->lpVtbl->get_BulbHaloHeight(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_BulbHaloHeight(ILight* This,float newVal) {
    return This->lpVtbl->put_BulbHaloHeight(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Visible(ILight* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Visible(ILight* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Shadows(ILight* This,long *pVal) {
    return This->lpVtbl->get_Shadows(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Shadows(ILight* This,long newVal) {
    return This->lpVtbl->put_Shadows(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_Fader(ILight* This,long *pVal) {
    return This->lpVtbl->get_Fader(This,pVal);
}
static __WIDL_INLINE HRESULT ILight_put_Fader(ILight* This,long newVal) {
    return This->lpVtbl->put_Fader(This,newVal);
}
static __WIDL_INLINE HRESULT ILight_get_FilamentTemperature(ILight* This,float *pVal) {
    return This->lpVtbl->get_FilamentTemperature(This,pVal);
}
#endif
#endif

#endif


#endif  /* __ILight_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ILightEvents dispinterface
 */
#ifndef __ILightEvents_DISPINTERFACE_DEFINED__
#define __ILightEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ILightEvents, 0x9c07f82f, 0x325e, 0x482f, 0xbc,0x09, 0x10,0xf0,0x14,0x83,0x47,0x55);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9c07f82f-325e-482f-bc09-10f014834755")
ILightEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILightEvents, 0x9c07f82f, 0x325e, 0x482f, 0xbc,0x09, 0x10,0xf0,0x14,0x83,0x47,0x55)
#endif
#else
typedef struct ILightEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILightEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILightEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILightEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ILightEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ILightEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ILightEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ILightEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ILightEventsVtbl;

interface ILightEvents {
    CONST_VTBL ILightEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILightEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILightEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILightEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ILightEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ILightEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ILightEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ILightEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ILightEvents_QueryInterface(ILightEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ILightEvents_AddRef(ILightEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ILightEvents_Release(ILightEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ILightEvents_GetTypeInfoCount(ILightEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ILightEvents_GetTypeInfo(ILightEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ILightEvents_GetIDsOfNames(ILightEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ILightEvents_Invoke(ILightEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ILightEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IKicker interface
 */
#ifndef __IKicker_INTERFACE_DEFINED__
#define __IKicker_INTERFACE_DEFINED__

DEFINE_GUID(IID_IKicker, 0xdbc4625d, 0x6226, 0x4afa, 0x86,0x49, 0x75,0xb4,0x3c,0x33,0x20,0x41);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("dbc4625d-6226-4afa-8649-75b43c332041")
IKicker : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateBall(
        IBall **Ball) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateSizedBall(
        float radius,
        IBall **Ball) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateSizedBallWithMass(
        float radius,
        float mass,
        IBall **Ball) = 0;

    virtual HRESULT STDMETHODCALLTYPE DestroyBall(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Kick(
        float angle,
        float speed,
        float inclination = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE KickXYZ(
        float angle,
        float speed,
        float inclination,
        float x,
        float y,
        float z) = 0;

    virtual HRESULT STDMETHODCALLTYPE KickZ(
        float angle,
        float speed,
        float inclination,
        float heightz) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DrawStyle(
        KickerType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DrawStyle(
        KickerType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE BallCntOver(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitAccuracy(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HitAccuracy(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HitHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Orientation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Orientation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Radius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Radius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FallThrough(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FallThrough(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Legacy(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Legacy(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LastCapturedBall(
        IBall **pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IKicker, 0xdbc4625d, 0x6226, 0x4afa, 0x86,0x49, 0x75,0xb4,0x3c,0x33,0x20,0x41)
#endif
#else
typedef struct IKickerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IKicker *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IKicker *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IKicker *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IKicker *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IKicker *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IKicker *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IKicker *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IKicker methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IKicker *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IKicker *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *CreateBall)(
        IKicker *This,
        IBall **Ball);

    HRESULT (STDMETHODCALLTYPE *CreateSizedBall)(
        IKicker *This,
        float radius,
        IBall **Ball);

    HRESULT (STDMETHODCALLTYPE *CreateSizedBallWithMass)(
        IKicker *This,
        float radius,
        float mass,
        IBall **Ball);

    HRESULT (STDMETHODCALLTYPE *DestroyBall)(
        IKicker *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IKicker *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IKicker *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IKicker *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IKicker *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *Kick)(
        IKicker *This,
        float angle,
        float speed,
        float inclination);

    HRESULT (STDMETHODCALLTYPE *KickXYZ)(
        IKicker *This,
        float angle,
        float speed,
        float inclination,
        float x,
        float y,
        float z);

    HRESULT (STDMETHODCALLTYPE *KickZ)(
        IKicker *This,
        float angle,
        float speed,
        float inclination,
        float heightz);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        IKicker *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        IKicker *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DrawStyle)(
        IKicker *This,
        KickerType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DrawStyle)(
        IKicker *This,
        KickerType newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IKicker *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IKicker *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IKicker *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IKicker *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IKicker *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IKicker *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *BallCntOver)(
        IKicker *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HitAccuracy)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HitAccuracy)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HitHeight)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HitHeight)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Orientation)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Orientation)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Radius)(
        IKicker *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Radius)(
        IKicker *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_FallThrough)(
        IKicker *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FallThrough)(
        IKicker *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Legacy)(
        IKicker *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Legacy)(
        IKicker *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_LastCapturedBall)(
        IKicker *This,
        IBall **pVal);

    END_INTERFACE
} IKickerVtbl;

interface IKicker {
    CONST_VTBL IKickerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IKicker_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IKicker_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IKicker_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IKicker_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IKicker_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IKicker_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IKicker_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IKicker methods ***/
#define IKicker_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IKicker_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IKicker_CreateBall(This,Ball) (This)->lpVtbl->CreateBall(This,Ball)
#define IKicker_CreateSizedBall(This,radius,Ball) (This)->lpVtbl->CreateSizedBall(This,radius,Ball)
#define IKicker_CreateSizedBallWithMass(This,radius,mass,Ball) (This)->lpVtbl->CreateSizedBallWithMass(This,radius,mass,Ball)
#define IKicker_DestroyBall(This,pVal) (This)->lpVtbl->DestroyBall(This,pVal)
#define IKicker_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IKicker_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IKicker_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IKicker_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IKicker_Kick(This,angle,speed,inclination) (This)->lpVtbl->Kick(This,angle,speed,inclination)
#define IKicker_KickXYZ(This,angle,speed,inclination,x,y,z) (This)->lpVtbl->KickXYZ(This,angle,speed,inclination,x,y,z)
#define IKicker_KickZ(This,angle,speed,inclination,heightz) (This)->lpVtbl->KickZ(This,angle,speed,inclination,heightz)
#define IKicker_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IKicker_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IKicker_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IKicker_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IKicker_get_Enabled(This,pVal) (This)->lpVtbl->get_Enabled(This,pVal)
#define IKicker_put_Enabled(This,newVal) (This)->lpVtbl->put_Enabled(This,newVal)
#define IKicker_get_DrawStyle(This,pVal) (This)->lpVtbl->get_DrawStyle(This,pVal)
#define IKicker_put_DrawStyle(This,newVal) (This)->lpVtbl->put_DrawStyle(This,newVal)
#define IKicker_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IKicker_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IKicker_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IKicker_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define IKicker_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IKicker_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IKicker_BallCntOver(This,pVal) (This)->lpVtbl->BallCntOver(This,pVal)
#define IKicker_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IKicker_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IKicker_get_HitAccuracy(This,pVal) (This)->lpVtbl->get_HitAccuracy(This,pVal)
#define IKicker_put_HitAccuracy(This,newVal) (This)->lpVtbl->put_HitAccuracy(This,newVal)
#define IKicker_get_HitHeight(This,pVal) (This)->lpVtbl->get_HitHeight(This,pVal)
#define IKicker_put_HitHeight(This,newVal) (This)->lpVtbl->put_HitHeight(This,newVal)
#define IKicker_get_Orientation(This,pVal) (This)->lpVtbl->get_Orientation(This,pVal)
#define IKicker_put_Orientation(This,newVal) (This)->lpVtbl->put_Orientation(This,newVal)
#define IKicker_get_Radius(This,pVal) (This)->lpVtbl->get_Radius(This,pVal)
#define IKicker_put_Radius(This,newVal) (This)->lpVtbl->put_Radius(This,newVal)
#define IKicker_get_FallThrough(This,pVal) (This)->lpVtbl->get_FallThrough(This,pVal)
#define IKicker_put_FallThrough(This,newVal) (This)->lpVtbl->put_FallThrough(This,newVal)
#define IKicker_get_Legacy(This,pVal) (This)->lpVtbl->get_Legacy(This,pVal)
#define IKicker_put_Legacy(This,newVal) (This)->lpVtbl->put_Legacy(This,newVal)
#define IKicker_get_LastCapturedBall(This,pVal) (This)->lpVtbl->get_LastCapturedBall(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IKicker_QueryInterface(IKicker* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IKicker_AddRef(IKicker* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IKicker_Release(IKicker* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IKicker_GetTypeInfoCount(IKicker* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IKicker_GetTypeInfo(IKicker* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IKicker_GetIDsOfNames(IKicker* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IKicker_Invoke(IKicker* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IKicker methods ***/
static __WIDL_INLINE HRESULT IKicker_get_Name(IKicker* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Name(IKicker* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_CreateBall(IKicker* This,IBall **Ball) {
    return This->lpVtbl->CreateBall(This,Ball);
}
static __WIDL_INLINE HRESULT IKicker_CreateSizedBall(IKicker* This,float radius,IBall **Ball) {
    return This->lpVtbl->CreateSizedBall(This,radius,Ball);
}
static __WIDL_INLINE HRESULT IKicker_CreateSizedBallWithMass(IKicker* This,float radius,float mass,IBall **Ball) {
    return This->lpVtbl->CreateSizedBallWithMass(This,radius,mass,Ball);
}
static __WIDL_INLINE HRESULT IKicker_DestroyBall(IKicker* This,int *pVal) {
    return This->lpVtbl->DestroyBall(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_get_TimerEnabled(IKicker* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_TimerEnabled(IKicker* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_TimerInterval(IKicker* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_TimerInterval(IKicker* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_Kick(IKicker* This,float angle,float speed,float inclination) {
    return This->lpVtbl->Kick(This,angle,speed,inclination);
}
static __WIDL_INLINE HRESULT IKicker_KickXYZ(IKicker* This,float angle,float speed,float inclination,float x,float y,float z) {
    return This->lpVtbl->KickXYZ(This,angle,speed,inclination,x,y,z);
}
static __WIDL_INLINE HRESULT IKicker_KickZ(IKicker* This,float angle,float speed,float inclination,float heightz) {
    return This->lpVtbl->KickZ(This,angle,speed,inclination,heightz);
}
static __WIDL_INLINE HRESULT IKicker_get_X(IKicker* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_X(IKicker* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Y(IKicker* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Y(IKicker* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Enabled(IKicker* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Enabled(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Enabled(IKicker* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Enabled(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_DrawStyle(IKicker* This,KickerType *pVal) {
    return This->lpVtbl->get_DrawStyle(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_DrawStyle(IKicker* This,KickerType newVal) {
    return This->lpVtbl->put_DrawStyle(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Material(IKicker* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Material(IKicker* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Surface(IKicker* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Surface(IKicker* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_UserValue(IKicker* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_UserValue(IKicker* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_BallCntOver(IKicker* This,int *pVal) {
    return This->lpVtbl->BallCntOver(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Scatter(IKicker* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Scatter(IKicker* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_HitAccuracy(IKicker* This,float *pVal) {
    return This->lpVtbl->get_HitAccuracy(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_HitAccuracy(IKicker* This,float newVal) {
    return This->lpVtbl->put_HitAccuracy(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_HitHeight(IKicker* This,float *pVal) {
    return This->lpVtbl->get_HitHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_HitHeight(IKicker* This,float newVal) {
    return This->lpVtbl->put_HitHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Orientation(IKicker* This,float *pVal) {
    return This->lpVtbl->get_Orientation(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Orientation(IKicker* This,float newVal) {
    return This->lpVtbl->put_Orientation(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Radius(IKicker* This,float *pVal) {
    return This->lpVtbl->get_Radius(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Radius(IKicker* This,float newVal) {
    return This->lpVtbl->put_Radius(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_FallThrough(IKicker* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_FallThrough(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_FallThrough(IKicker* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_FallThrough(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_Legacy(IKicker* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Legacy(This,pVal);
}
static __WIDL_INLINE HRESULT IKicker_put_Legacy(IKicker* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Legacy(This,newVal);
}
static __WIDL_INLINE HRESULT IKicker_get_LastCapturedBall(IKicker* This,IBall **pVal) {
    return This->lpVtbl->get_LastCapturedBall(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IKicker_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IKickerEvents dispinterface
 */
#ifndef __IKickerEvents_DISPINTERFACE_DEFINED__
#define __IKickerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IKickerEvents, 0xba80f24a, 0x78b2, 0x4c5d, 0xa2,0x8d, 0x0f,0x1a,0x9e,0x7c,0x55,0x5c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ba80f24a-78b2-4c5d-a28d-0f1a9e7c555c")
IKickerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IKickerEvents, 0xba80f24a, 0x78b2, 0x4c5d, 0xa2,0x8d, 0x0f,0x1a,0x9e,0x7c,0x55,0x5c)
#endif
#else
typedef struct IKickerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IKickerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IKickerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IKickerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IKickerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IKickerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IKickerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IKickerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IKickerEventsVtbl;

interface IKickerEvents {
    CONST_VTBL IKickerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IKickerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IKickerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IKickerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IKickerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IKickerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IKickerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IKickerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IKickerEvents_QueryInterface(IKickerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IKickerEvents_AddRef(IKickerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IKickerEvents_Release(IKickerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IKickerEvents_GetTypeInfoCount(IKickerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IKickerEvents_GetTypeInfo(IKickerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IKickerEvents_GetIDsOfNames(IKickerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IKickerEvents_Invoke(IKickerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IKickerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IDecal interface
 */
#ifndef __IDecal_INTERFACE_DEFINED__
#define __IDecal_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDecal, 0x56ddb212, 0x2f4a, 0x41ef, 0x87,0x5c, 0xc1,0xa9,0xca,0x20,0x38,0xc9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("56ddb212-2f4a-41ef-875c-c1a9ca2038c9")
IDecal : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Rotation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Rotation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        DecalType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Type(
        DecalType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Text(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Text(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SizingType(
        SizingType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SizingType(
        SizingType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FontColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FontColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Font(
        IFontDisp **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE putref_Font(
        IFontDisp *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasVerticalText(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasVerticalText(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDecal, 0x56ddb212, 0x2f4a, 0x41ef, 0x87,0x5c, 0xc1,0xa9,0xca,0x20,0x38,0xc9)
#endif
#else
typedef struct IDecalVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDecal *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDecal *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDecal *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDecal *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDecal *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDecal *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDecal *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDecal methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Rotation)(
        IDecal *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Rotation)(
        IDecal *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IDecal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IDecal *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IDecal *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IDecal *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IDecal *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IDecal *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IDecal *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IDecal *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IDecal *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IDecal *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IDecal *This,
        DecalType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Type)(
        IDecal *This,
        DecalType newVal);

    HRESULT (STDMETHODCALLTYPE *get_Text)(
        IDecal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Text)(
        IDecal *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SizingType)(
        IDecal *This,
        SizingType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SizingType)(
        IDecal *This,
        SizingType newVal);

    HRESULT (STDMETHODCALLTYPE *get_FontColor)(
        IDecal *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FontColor)(
        IDecal *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IDecal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IDecal *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Font)(
        IDecal *This,
        IFontDisp **pVal);

    HRESULT (STDMETHODCALLTYPE *putref_Font)(
        IDecal *This,
        IFontDisp *newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasVerticalText)(
        IDecal *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasVerticalText)(
        IDecal *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IDecal *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IDecal *This,
        BSTR newVal);

    END_INTERFACE
} IDecalVtbl;

interface IDecal {
    CONST_VTBL IDecalVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDecal_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDecal_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDecal_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDecal_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDecal_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDecal_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDecal_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDecal methods ***/
#define IDecal_get_Rotation(This,pVal) (This)->lpVtbl->get_Rotation(This,pVal)
#define IDecal_put_Rotation(This,newVal) (This)->lpVtbl->put_Rotation(This,newVal)
#define IDecal_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IDecal_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IDecal_get_Width(This,pVal) (This)->lpVtbl->get_Width(This,pVal)
#define IDecal_put_Width(This,newVal) (This)->lpVtbl->put_Width(This,newVal)
#define IDecal_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IDecal_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IDecal_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IDecal_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IDecal_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IDecal_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IDecal_get_Type(This,pVal) (This)->lpVtbl->get_Type(This,pVal)
#define IDecal_put_Type(This,newVal) (This)->lpVtbl->put_Type(This,newVal)
#define IDecal_get_Text(This,pVal) (This)->lpVtbl->get_Text(This,pVal)
#define IDecal_put_Text(This,newVal) (This)->lpVtbl->put_Text(This,newVal)
#define IDecal_get_SizingType(This,pVal) (This)->lpVtbl->get_SizingType(This,pVal)
#define IDecal_put_SizingType(This,newVal) (This)->lpVtbl->put_SizingType(This,newVal)
#define IDecal_get_FontColor(This,pVal) (This)->lpVtbl->get_FontColor(This,pVal)
#define IDecal_put_FontColor(This,newVal) (This)->lpVtbl->put_FontColor(This,newVal)
#define IDecal_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IDecal_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IDecal_get_Font(This,pVal) (This)->lpVtbl->get_Font(This,pVal)
#define IDecal_putref_Font(This,newVal) (This)->lpVtbl->putref_Font(This,newVal)
#define IDecal_get_HasVerticalText(This,pVal) (This)->lpVtbl->get_HasVerticalText(This,pVal)
#define IDecal_put_HasVerticalText(This,newVal) (This)->lpVtbl->put_HasVerticalText(This,newVal)
#define IDecal_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IDecal_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDecal_QueryInterface(IDecal* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDecal_AddRef(IDecal* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDecal_Release(IDecal* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IDecal_GetTypeInfoCount(IDecal* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IDecal_GetTypeInfo(IDecal* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IDecal_GetIDsOfNames(IDecal* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IDecal_Invoke(IDecal* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDecal methods ***/
static __WIDL_INLINE HRESULT IDecal_get_Rotation(IDecal* This,float *pVal) {
    return This->lpVtbl->get_Rotation(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Rotation(IDecal* This,float newVal) {
    return This->lpVtbl->put_Rotation(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Image(IDecal* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Image(IDecal* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Width(IDecal* This,float *pVal) {
    return This->lpVtbl->get_Width(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Width(IDecal* This,float newVal) {
    return This->lpVtbl->put_Width(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Height(IDecal* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Height(IDecal* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_X(IDecal* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_X(IDecal* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Y(IDecal* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Y(IDecal* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Type(IDecal* This,DecalType *pVal) {
    return This->lpVtbl->get_Type(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Type(IDecal* This,DecalType newVal) {
    return This->lpVtbl->put_Type(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Text(IDecal* This,BSTR *pVal) {
    return This->lpVtbl->get_Text(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Text(IDecal* This,BSTR newVal) {
    return This->lpVtbl->put_Text(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_SizingType(IDecal* This,SizingType *pVal) {
    return This->lpVtbl->get_SizingType(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_SizingType(IDecal* This,SizingType newVal) {
    return This->lpVtbl->put_SizingType(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_FontColor(IDecal* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_FontColor(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_FontColor(IDecal* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_FontColor(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Material(IDecal* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Material(IDecal* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Font(IDecal* This,IFontDisp **pVal) {
    return This->lpVtbl->get_Font(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_putref_Font(IDecal* This,IFontDisp *newVal) {
    return This->lpVtbl->putref_Font(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_HasVerticalText(IDecal* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasVerticalText(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_HasVerticalText(IDecal* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasVerticalText(This,newVal);
}
static __WIDL_INLINE HRESULT IDecal_get_Surface(IDecal* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IDecal_put_Surface(IDecal* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IDecal_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPrimitive interface
 */
#ifndef __IPrimitive_INTERFACE_DEFINED__
#define __IPrimitive_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPrimitive, 0x5e972141, 0xb842, 0x43c8, 0xba,0x84, 0xb9,0x9d,0xe3,0x4b,0x2e,0x73);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5e972141-b842-43c8-ba84-b99de34b2e73")
IPrimitive : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE PlayAnim(
        float startFrame,
        float speed) = 0;

    virtual HRESULT STDMETHODCALLTYPE PlayAnimEndless(
        float speed) = 0;

    virtual HRESULT STDMETHODCALLTYPE StopAnim(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowFrame(
        float frame) = 0;

    virtual HRESULT STDMETHODCALLTYPE ContinueAnim(
        float speed) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayTexture(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisplayTexture(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Sides(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Sides(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SideColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SideColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DrawTexturesInside(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DrawTexturesInside(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NormalMap(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NormalMap(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Z(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Z(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Size_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Size_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size_Z(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Size_Z(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra0(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra0(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra1(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra1(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra2(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra2(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra3(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra3(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TransX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TransX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra4(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra4(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TransY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TransY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra5(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra5(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TransZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TransZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra6(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra6(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ObjRotX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ObjRotX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra7(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra7(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ObjRotY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ObjRotY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotAndTra8(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotAndTra8(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ObjRotZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ObjRotZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EdgeFactorUI(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EdgeFactorUI(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CollisionReductionFactor(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CollisionReductionFactor(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableStaticRendering(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableStaticRendering(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsToy(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsToy(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackfacesEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackfacesEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Threshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Threshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisableLighting(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisableLighting(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLighting(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLighting(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLightingFromBelow(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLightingFromBelow(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Opacity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Opacity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AddBlend(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AddBlend(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Color(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Color(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableDepthMask(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableDepthMask(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DepthBias(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DepthBias(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverwritePhysics(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverwritePhysics(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitThreshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ObjectSpaceNormalMap(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ObjectSpaceNormalMap(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPrimitive, 0x5e972141, 0xb842, 0x43c8, 0xba,0x84, 0xb9,0x9d,0xe3,0x4b,0x2e,0x73)
#endif
#else
typedef struct IPrimitiveVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPrimitive *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPrimitive *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPrimitive *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IPrimitive *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IPrimitive *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IPrimitive *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IPrimitive *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IPrimitive methods ***/
    HRESULT (STDMETHODCALLTYPE *PlayAnim)(
        IPrimitive *This,
        float startFrame,
        float speed);

    HRESULT (STDMETHODCALLTYPE *PlayAnimEndless)(
        IPrimitive *This,
        float speed);

    HRESULT (STDMETHODCALLTYPE *StopAnim)(
        IPrimitive *This);

    HRESULT (STDMETHODCALLTYPE *ShowFrame)(
        IPrimitive *This,
        float frame);

    HRESULT (STDMETHODCALLTYPE *ContinueAnim)(
        IPrimitive *This,
        float speed);

    HRESULT (STDMETHODCALLTYPE *get_DisplayTexture)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisplayTexture)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Sides)(
        IPrimitive *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Sides)(
        IPrimitive *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IPrimitive *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IPrimitive *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_SideColor)(
        IPrimitive *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SideColor)(
        IPrimitive *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_DrawTexturesInside)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DrawTexturesInside)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IPrimitive *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IPrimitive *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IPrimitive *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IPrimitive *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_NormalMap)(
        IPrimitive *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_NormalMap)(
        IPrimitive *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Z)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Z)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Size_X)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Size_X)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Size_Y)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Size_Y)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Size_Z)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Size_Z)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra0)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra0)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotX)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotX)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra1)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra1)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotY)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotY)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra2)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra2)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotZ)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotZ)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra3)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra3)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TransX)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TransX)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra4)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra4)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TransY)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TransY)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra5)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra5)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TransZ)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TransZ)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra6)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra6)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ObjRotX)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ObjRotX)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra7)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra7)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ObjRotY)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ObjRotY)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotAndTra8)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotAndTra8)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ObjRotZ)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ObjRotZ)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EdgeFactorUI)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EdgeFactorUI)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CollisionReductionFactor)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CollisionReductionFactor)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IPrimitive *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IPrimitive *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableStaticRendering)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableStaticRendering)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsToy)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsToy)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BackfacesEnabled)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackfacesEnabled)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Threshold)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Threshold)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DisableLighting)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisableLighting)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLighting)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLighting)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLightingFromBelow)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLightingFromBelow)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Opacity)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Opacity)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AddBlend)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AddBlend)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Color)(
        IPrimitive *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Color)(
        IPrimitive *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableDepthMask)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableDepthMask)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DepthBias)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DepthBias)(
        IPrimitive *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsMaterial)(
        IPrimitive *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsMaterial)(
        IPrimitive *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverwritePhysics)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverwritePhysics)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_HitThreshold)(
        IPrimitive *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ObjectSpaceNormalMap)(
        IPrimitive *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ObjectSpaceNormalMap)(
        IPrimitive *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IPrimitiveVtbl;

interface IPrimitive {
    CONST_VTBL IPrimitiveVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPrimitive_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPrimitive_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPrimitive_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IPrimitive_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IPrimitive_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IPrimitive_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IPrimitive_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IPrimitive methods ***/
#define IPrimitive_PlayAnim(This,startFrame,speed) (This)->lpVtbl->PlayAnim(This,startFrame,speed)
#define IPrimitive_PlayAnimEndless(This,speed) (This)->lpVtbl->PlayAnimEndless(This,speed)
#define IPrimitive_StopAnim(This) (This)->lpVtbl->StopAnim(This)
#define IPrimitive_ShowFrame(This,frame) (This)->lpVtbl->ShowFrame(This,frame)
#define IPrimitive_ContinueAnim(This,speed) (This)->lpVtbl->ContinueAnim(This,speed)
#define IPrimitive_get_DisplayTexture(This,pVal) (This)->lpVtbl->get_DisplayTexture(This,pVal)
#define IPrimitive_put_DisplayTexture(This,newVal) (This)->lpVtbl->put_DisplayTexture(This,newVal)
#define IPrimitive_get_Sides(This,pVal) (This)->lpVtbl->get_Sides(This,pVal)
#define IPrimitive_put_Sides(This,newVal) (This)->lpVtbl->put_Sides(This,newVal)
#define IPrimitive_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IPrimitive_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IPrimitive_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IPrimitive_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IPrimitive_get_SideColor(This,pVal) (This)->lpVtbl->get_SideColor(This,pVal)
#define IPrimitive_put_SideColor(This,newVal) (This)->lpVtbl->put_SideColor(This,newVal)
#define IPrimitive_get_DrawTexturesInside(This,pVal) (This)->lpVtbl->get_DrawTexturesInside(This,pVal)
#define IPrimitive_put_DrawTexturesInside(This,newVal) (This)->lpVtbl->put_DrawTexturesInside(This,newVal)
#define IPrimitive_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IPrimitive_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IPrimitive_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IPrimitive_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IPrimitive_get_NormalMap(This,pVal) (This)->lpVtbl->get_NormalMap(This,pVal)
#define IPrimitive_put_NormalMap(This,newVal) (This)->lpVtbl->put_NormalMap(This,newVal)
#define IPrimitive_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IPrimitive_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IPrimitive_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IPrimitive_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IPrimitive_get_Z(This,pVal) (This)->lpVtbl->get_Z(This,pVal)
#define IPrimitive_put_Z(This,newVal) (This)->lpVtbl->put_Z(This,newVal)
#define IPrimitive_get_Size_X(This,pVal) (This)->lpVtbl->get_Size_X(This,pVal)
#define IPrimitive_put_Size_X(This,newVal) (This)->lpVtbl->put_Size_X(This,newVal)
#define IPrimitive_get_Size_Y(This,pVal) (This)->lpVtbl->get_Size_Y(This,pVal)
#define IPrimitive_put_Size_Y(This,newVal) (This)->lpVtbl->put_Size_Y(This,newVal)
#define IPrimitive_get_Size_Z(This,pVal) (This)->lpVtbl->get_Size_Z(This,pVal)
#define IPrimitive_put_Size_Z(This,newVal) (This)->lpVtbl->put_Size_Z(This,newVal)
#define IPrimitive_get_RotAndTra0(This,pVal) (This)->lpVtbl->get_RotAndTra0(This,pVal)
#define IPrimitive_put_RotAndTra0(This,newVal) (This)->lpVtbl->put_RotAndTra0(This,newVal)
#define IPrimitive_get_RotX(This,pVal) (This)->lpVtbl->get_RotX(This,pVal)
#define IPrimitive_put_RotX(This,newVal) (This)->lpVtbl->put_RotX(This,newVal)
#define IPrimitive_get_RotAndTra1(This,pVal) (This)->lpVtbl->get_RotAndTra1(This,pVal)
#define IPrimitive_put_RotAndTra1(This,newVal) (This)->lpVtbl->put_RotAndTra1(This,newVal)
#define IPrimitive_get_RotY(This,pVal) (This)->lpVtbl->get_RotY(This,pVal)
#define IPrimitive_put_RotY(This,newVal) (This)->lpVtbl->put_RotY(This,newVal)
#define IPrimitive_get_RotAndTra2(This,pVal) (This)->lpVtbl->get_RotAndTra2(This,pVal)
#define IPrimitive_put_RotAndTra2(This,newVal) (This)->lpVtbl->put_RotAndTra2(This,newVal)
#define IPrimitive_get_RotZ(This,pVal) (This)->lpVtbl->get_RotZ(This,pVal)
#define IPrimitive_put_RotZ(This,newVal) (This)->lpVtbl->put_RotZ(This,newVal)
#define IPrimitive_get_RotAndTra3(This,pVal) (This)->lpVtbl->get_RotAndTra3(This,pVal)
#define IPrimitive_put_RotAndTra3(This,newVal) (This)->lpVtbl->put_RotAndTra3(This,newVal)
#define IPrimitive_get_TransX(This,pVal) (This)->lpVtbl->get_TransX(This,pVal)
#define IPrimitive_put_TransX(This,newVal) (This)->lpVtbl->put_TransX(This,newVal)
#define IPrimitive_get_RotAndTra4(This,pVal) (This)->lpVtbl->get_RotAndTra4(This,pVal)
#define IPrimitive_put_RotAndTra4(This,newVal) (This)->lpVtbl->put_RotAndTra4(This,newVal)
#define IPrimitive_get_TransY(This,pVal) (This)->lpVtbl->get_TransY(This,pVal)
#define IPrimitive_put_TransY(This,newVal) (This)->lpVtbl->put_TransY(This,newVal)
#define IPrimitive_get_RotAndTra5(This,pVal) (This)->lpVtbl->get_RotAndTra5(This,pVal)
#define IPrimitive_put_RotAndTra5(This,newVal) (This)->lpVtbl->put_RotAndTra5(This,newVal)
#define IPrimitive_get_TransZ(This,pVal) (This)->lpVtbl->get_TransZ(This,pVal)
#define IPrimitive_put_TransZ(This,newVal) (This)->lpVtbl->put_TransZ(This,newVal)
#define IPrimitive_get_RotAndTra6(This,pVal) (This)->lpVtbl->get_RotAndTra6(This,pVal)
#define IPrimitive_put_RotAndTra6(This,newVal) (This)->lpVtbl->put_RotAndTra6(This,newVal)
#define IPrimitive_get_ObjRotX(This,pVal) (This)->lpVtbl->get_ObjRotX(This,pVal)
#define IPrimitive_put_ObjRotX(This,newVal) (This)->lpVtbl->put_ObjRotX(This,newVal)
#define IPrimitive_get_RotAndTra7(This,pVal) (This)->lpVtbl->get_RotAndTra7(This,pVal)
#define IPrimitive_put_RotAndTra7(This,newVal) (This)->lpVtbl->put_RotAndTra7(This,newVal)
#define IPrimitive_get_ObjRotY(This,pVal) (This)->lpVtbl->get_ObjRotY(This,pVal)
#define IPrimitive_put_ObjRotY(This,newVal) (This)->lpVtbl->put_ObjRotY(This,newVal)
#define IPrimitive_get_RotAndTra8(This,pVal) (This)->lpVtbl->get_RotAndTra8(This,pVal)
#define IPrimitive_put_RotAndTra8(This,newVal) (This)->lpVtbl->put_RotAndTra8(This,newVal)
#define IPrimitive_get_ObjRotZ(This,pVal) (This)->lpVtbl->get_ObjRotZ(This,pVal)
#define IPrimitive_put_ObjRotZ(This,newVal) (This)->lpVtbl->put_ObjRotZ(This,newVal)
#define IPrimitive_get_EdgeFactorUI(This,pVal) (This)->lpVtbl->get_EdgeFactorUI(This,pVal)
#define IPrimitive_put_EdgeFactorUI(This,newVal) (This)->lpVtbl->put_EdgeFactorUI(This,newVal)
#define IPrimitive_get_CollisionReductionFactor(This,pVal) (This)->lpVtbl->get_CollisionReductionFactor(This,pVal)
#define IPrimitive_put_CollisionReductionFactor(This,newVal) (This)->lpVtbl->put_CollisionReductionFactor(This,newVal)
#define IPrimitive_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IPrimitive_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IPrimitive_get_EnableStaticRendering(This,pVal) (This)->lpVtbl->get_EnableStaticRendering(This,pVal)
#define IPrimitive_put_EnableStaticRendering(This,newVal) (This)->lpVtbl->put_EnableStaticRendering(This,newVal)
#define IPrimitive_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IPrimitive_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IPrimitive_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define IPrimitive_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define IPrimitive_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IPrimitive_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IPrimitive_get_IsToy(This,pVal) (This)->lpVtbl->get_IsToy(This,pVal)
#define IPrimitive_put_IsToy(This,newVal) (This)->lpVtbl->put_IsToy(This,newVal)
#define IPrimitive_get_BackfacesEnabled(This,pVal) (This)->lpVtbl->get_BackfacesEnabled(This,pVal)
#define IPrimitive_put_BackfacesEnabled(This,newVal) (This)->lpVtbl->put_BackfacesEnabled(This,newVal)
#define IPrimitive_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IPrimitive_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IPrimitive_get_Threshold(This,pVal) (This)->lpVtbl->get_Threshold(This,pVal)
#define IPrimitive_put_Threshold(This,newVal) (This)->lpVtbl->put_Threshold(This,newVal)
#define IPrimitive_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IPrimitive_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IPrimitive_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IPrimitive_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IPrimitive_get_DisableLighting(This,pVal) (This)->lpVtbl->get_DisableLighting(This,pVal)
#define IPrimitive_put_DisableLighting(This,newVal) (This)->lpVtbl->put_DisableLighting(This,newVal)
#define IPrimitive_get_BlendDisableLighting(This,pVal) (This)->lpVtbl->get_BlendDisableLighting(This,pVal)
#define IPrimitive_put_BlendDisableLighting(This,newVal) (This)->lpVtbl->put_BlendDisableLighting(This,newVal)
#define IPrimitive_get_BlendDisableLightingFromBelow(This,pVal) (This)->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal)
#define IPrimitive_put_BlendDisableLightingFromBelow(This,newVal) (This)->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal)
#define IPrimitive_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IPrimitive_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IPrimitive_get_Opacity(This,pVal) (This)->lpVtbl->get_Opacity(This,pVal)
#define IPrimitive_put_Opacity(This,newVal) (This)->lpVtbl->put_Opacity(This,newVal)
#define IPrimitive_get_AddBlend(This,pVal) (This)->lpVtbl->get_AddBlend(This,pVal)
#define IPrimitive_put_AddBlend(This,newVal) (This)->lpVtbl->put_AddBlend(This,newVal)
#define IPrimitive_get_Color(This,pVal) (This)->lpVtbl->get_Color(This,pVal)
#define IPrimitive_put_Color(This,newVal) (This)->lpVtbl->put_Color(This,newVal)
#define IPrimitive_get_EnableDepthMask(This,pVal) (This)->lpVtbl->get_EnableDepthMask(This,pVal)
#define IPrimitive_put_EnableDepthMask(This,newVal) (This)->lpVtbl->put_EnableDepthMask(This,newVal)
#define IPrimitive_get_DepthBias(This,pVal) (This)->lpVtbl->get_DepthBias(This,pVal)
#define IPrimitive_put_DepthBias(This,newVal) (This)->lpVtbl->put_DepthBias(This,newVal)
#define IPrimitive_get_PhysicsMaterial(This,pVal) (This)->lpVtbl->get_PhysicsMaterial(This,pVal)
#define IPrimitive_put_PhysicsMaterial(This,newVal) (This)->lpVtbl->put_PhysicsMaterial(This,newVal)
#define IPrimitive_get_OverwritePhysics(This,pVal) (This)->lpVtbl->get_OverwritePhysics(This,pVal)
#define IPrimitive_put_OverwritePhysics(This,newVal) (This)->lpVtbl->put_OverwritePhysics(This,newVal)
#define IPrimitive_get_HitThreshold(This,pVal) (This)->lpVtbl->get_HitThreshold(This,pVal)
#define IPrimitive_get_ObjectSpaceNormalMap(This,pVal) (This)->lpVtbl->get_ObjectSpaceNormalMap(This,pVal)
#define IPrimitive_put_ObjectSpaceNormalMap(This,newVal) (This)->lpVtbl->put_ObjectSpaceNormalMap(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IPrimitive_QueryInterface(IPrimitive* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IPrimitive_AddRef(IPrimitive* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IPrimitive_Release(IPrimitive* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IPrimitive_GetTypeInfoCount(IPrimitive* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IPrimitive_GetTypeInfo(IPrimitive* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IPrimitive_GetIDsOfNames(IPrimitive* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IPrimitive_Invoke(IPrimitive* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IPrimitive methods ***/
static __WIDL_INLINE HRESULT IPrimitive_PlayAnim(IPrimitive* This,float startFrame,float speed) {
    return This->lpVtbl->PlayAnim(This,startFrame,speed);
}
static __WIDL_INLINE HRESULT IPrimitive_PlayAnimEndless(IPrimitive* This,float speed) {
    return This->lpVtbl->PlayAnimEndless(This,speed);
}
static __WIDL_INLINE HRESULT IPrimitive_StopAnim(IPrimitive* This) {
    return This->lpVtbl->StopAnim(This);
}
static __WIDL_INLINE HRESULT IPrimitive_ShowFrame(IPrimitive* This,float frame) {
    return This->lpVtbl->ShowFrame(This,frame);
}
static __WIDL_INLINE HRESULT IPrimitive_ContinueAnim(IPrimitive* This,float speed) {
    return This->lpVtbl->ContinueAnim(This,speed);
}
static __WIDL_INLINE HRESULT IPrimitive_get_DisplayTexture(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisplayTexture(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_DisplayTexture(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisplayTexture(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Sides(IPrimitive* This,int *pVal) {
    return This->lpVtbl->get_Sides(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Sides(IPrimitive* This,int newVal) {
    return This->lpVtbl->put_Sides(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Visible(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Visible(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Material(IPrimitive* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Material(IPrimitive* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_SideColor(IPrimitive* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_SideColor(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_SideColor(IPrimitive* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_SideColor(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_DrawTexturesInside(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DrawTexturesInside(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_DrawTexturesInside(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DrawTexturesInside(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_UserValue(IPrimitive* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_UserValue(IPrimitive* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Image(IPrimitive* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Image(IPrimitive* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_NormalMap(IPrimitive* This,BSTR *pVal) {
    return This->lpVtbl->get_NormalMap(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_NormalMap(IPrimitive* This,BSTR newVal) {
    return This->lpVtbl->put_NormalMap(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_X(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_X(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Y(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Y(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Z(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Z(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Z(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Z(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Size_X(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Size_X(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Size_X(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Size_X(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Size_Y(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Size_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Size_Y(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Size_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Size_Z(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Size_Z(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Size_Z(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Size_Z(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra0(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra0(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra0(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra0(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotX(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotX(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotX(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotX(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra1(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra1(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra1(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra1(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotY(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotY(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotY(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotY(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra2(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra2(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra2(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra2(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotZ(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotZ(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotZ(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotZ(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra3(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra3(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra3(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra3(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_TransX(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_TransX(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_TransX(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_TransX(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra4(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra4(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra4(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra4(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_TransY(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_TransY(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_TransY(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_TransY(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra5(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra5(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra5(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra5(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_TransZ(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_TransZ(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_TransZ(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_TransZ(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra6(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra6(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra6(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra6(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ObjRotX(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_ObjRotX(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ObjRotX(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_ObjRotX(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra7(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra7(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra7(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra7(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ObjRotY(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_ObjRotY(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ObjRotY(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_ObjRotY(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_RotAndTra8(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_RotAndTra8(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_RotAndTra8(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_RotAndTra8(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ObjRotZ(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_ObjRotZ(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ObjRotZ(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_ObjRotZ(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_EdgeFactorUI(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_EdgeFactorUI(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_EdgeFactorUI(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_EdgeFactorUI(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_CollisionReductionFactor(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_CollisionReductionFactor(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_CollisionReductionFactor(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_CollisionReductionFactor(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Name(IPrimitive* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Name(IPrimitive* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_EnableStaticRendering(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableStaticRendering(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_EnableStaticRendering(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableStaticRendering(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Elasticity(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Elasticity(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ElasticityFalloff(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ElasticityFalloff(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Collidable(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Collidable(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_IsToy(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsToy(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_IsToy(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsToy(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_BackfacesEnabled(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_BackfacesEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_BackfacesEnabled(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_BackfacesEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_HasHitEvent(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_HasHitEvent(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Threshold(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Threshold(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Threshold(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Threshold(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Friction(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Friction(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Scatter(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Scatter(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_DisableLighting(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_DisableLighting(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_BlendDisableLighting(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_BlendDisableLighting(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_BlendDisableLightingFromBelow(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_BlendDisableLightingFromBelow(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ReflectionEnabled(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ReflectionEnabled(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Opacity(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_Opacity(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Opacity(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_Opacity(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_AddBlend(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_AddBlend(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_AddBlend(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_AddBlend(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_Color(IPrimitive* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_Color(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_Color(IPrimitive* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_Color(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_EnableDepthMask(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableDepthMask(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_EnableDepthMask(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableDepthMask(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_DepthBias(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_DepthBias(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_DepthBias(IPrimitive* This,float newVal) {
    return This->lpVtbl->put_DepthBias(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_PhysicsMaterial(IPrimitive* This,BSTR *pVal) {
    return This->lpVtbl->get_PhysicsMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_PhysicsMaterial(IPrimitive* This,BSTR newVal) {
    return This->lpVtbl->put_PhysicsMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_OverwritePhysics(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverwritePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_OverwritePhysics(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverwritePhysics(This,newVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_HitThreshold(IPrimitive* This,float *pVal) {
    return This->lpVtbl->get_HitThreshold(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_get_ObjectSpaceNormalMap(IPrimitive* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ObjectSpaceNormalMap(This,pVal);
}
static __WIDL_INLINE HRESULT IPrimitive_put_ObjectSpaceNormalMap(IPrimitive* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ObjectSpaceNormalMap(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IPrimitive_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPrimitiveEvents dispinterface
 */
#ifndef __IPrimitiveEvents_DISPINTERFACE_DEFINED__
#define __IPrimitiveEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IPrimitiveEvents, 0x99bdce95, 0x9bd2, 0x42d6, 0xb1,0xf9, 0x1d,0xf8,0x31,0x79,0x32,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("99bdce95-9bd2-42d6-b1f9-1df8317932c0")
IPrimitiveEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPrimitiveEvents, 0x99bdce95, 0x9bd2, 0x42d6, 0xb1,0xf9, 0x1d,0xf8,0x31,0x79,0x32,0xc0)
#endif
#else
typedef struct IPrimitiveEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPrimitiveEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPrimitiveEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPrimitiveEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IPrimitiveEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IPrimitiveEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IPrimitiveEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IPrimitiveEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IPrimitiveEventsVtbl;

interface IPrimitiveEvents {
    CONST_VTBL IPrimitiveEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPrimitiveEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPrimitiveEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPrimitiveEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IPrimitiveEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IPrimitiveEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IPrimitiveEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IPrimitiveEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IPrimitiveEvents_QueryInterface(IPrimitiveEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IPrimitiveEvents_AddRef(IPrimitiveEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IPrimitiveEvents_Release(IPrimitiveEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IPrimitiveEvents_GetTypeInfoCount(IPrimitiveEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IPrimitiveEvents_GetTypeInfo(IPrimitiveEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IPrimitiveEvents_GetIDsOfNames(IPrimitiveEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IPrimitiveEvents_Invoke(IPrimitiveEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IPrimitiveEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IHitTarget interface
 */
#ifndef __IHitTarget_INTERFACE_DEFINED__
#define __IHitTarget_INTERFACE_DEFINED__

DEFINE_GUID(IID_IHitTarget, 0xa67de998, 0x7d97, 0x4e03, 0xbe,0x91, 0x55,0xbf,0xd3,0xa4,0x8d,0xb6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a67de998-7d97-4e03-be91-55bfd3a48db6")
IHitTarget : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Z(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Z(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScaleX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ScaleX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScaleY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ScaleY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ScaleZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ScaleZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Orientation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Orientation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Threshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Threshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisableLighting(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisableLighting(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLighting(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLighting(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BlendDisableLightingFromBelow(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BlendDisableLightingFromBelow(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DepthBias(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DepthBias(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DropSpeed(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DropSpeed(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAnimOffset(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsDropped(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsDropped(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DrawStyle(
        TargetType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DrawStyle(
        TargetType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LegacyMode(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LegacyMode(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RaiseDelay(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RaiseDelay(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverwritePhysics(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverwritePhysics(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitThreshold(
        float *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHitTarget, 0xa67de998, 0x7d97, 0x4e03, 0xbe,0x91, 0x55,0xbf,0xd3,0xa4,0x8d,0xb6)
#endif
#else
typedef struct IHitTargetVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHitTarget *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHitTarget *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHitTarget *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IHitTarget *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IHitTarget *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IHitTarget *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IHitTarget *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IHitTarget methods ***/
    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IHitTarget *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IHitTarget *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IHitTarget *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IHitTarget *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IHitTarget *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IHitTarget *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IHitTarget *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IHitTarget *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Z)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Z)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ScaleX)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ScaleX)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ScaleY)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ScaleY)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ScaleZ)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ScaleZ)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Orientation)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Orientation)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IHitTarget *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IHitTarget *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Threshold)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Threshold)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DisableLighting)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisableLighting)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLighting)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLighting)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_BlendDisableLightingFromBelow)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BlendDisableLightingFromBelow)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DepthBias)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DepthBias)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DropSpeed)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DropSpeed)(
        IHitTarget *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAnimOffset)(
        IHitTarget *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_IsDropped)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsDropped)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DrawStyle)(
        IHitTarget *This,
        TargetType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DrawStyle)(
        IHitTarget *This,
        TargetType newVal);

    HRESULT (STDMETHODCALLTYPE *get_LegacyMode)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LegacyMode)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_RaiseDelay)(
        IHitTarget *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RaiseDelay)(
        IHitTarget *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsMaterial)(
        IHitTarget *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsMaterial)(
        IHitTarget *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverwritePhysics)(
        IHitTarget *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverwritePhysics)(
        IHitTarget *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_HitThreshold)(
        IHitTarget *This,
        float *pVal);

    END_INTERFACE
} IHitTargetVtbl;

interface IHitTarget {
    CONST_VTBL IHitTargetVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHitTarget_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHitTarget_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHitTarget_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IHitTarget_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IHitTarget_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IHitTarget_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IHitTarget_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IHitTarget methods ***/
#define IHitTarget_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IHitTarget_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IHitTarget_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IHitTarget_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IHitTarget_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IHitTarget_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IHitTarget_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IHitTarget_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IHitTarget_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IHitTarget_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IHitTarget_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IHitTarget_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IHitTarget_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IHitTarget_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IHitTarget_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IHitTarget_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IHitTarget_get_Z(This,pVal) (This)->lpVtbl->get_Z(This,pVal)
#define IHitTarget_put_Z(This,newVal) (This)->lpVtbl->put_Z(This,newVal)
#define IHitTarget_get_ScaleX(This,pVal) (This)->lpVtbl->get_ScaleX(This,pVal)
#define IHitTarget_put_ScaleX(This,newVal) (This)->lpVtbl->put_ScaleX(This,newVal)
#define IHitTarget_get_ScaleY(This,pVal) (This)->lpVtbl->get_ScaleY(This,pVal)
#define IHitTarget_put_ScaleY(This,newVal) (This)->lpVtbl->put_ScaleY(This,newVal)
#define IHitTarget_get_ScaleZ(This,pVal) (This)->lpVtbl->get_ScaleZ(This,pVal)
#define IHitTarget_put_ScaleZ(This,newVal) (This)->lpVtbl->put_ScaleZ(This,newVal)
#define IHitTarget_get_Orientation(This,pVal) (This)->lpVtbl->get_Orientation(This,pVal)
#define IHitTarget_put_Orientation(This,newVal) (This)->lpVtbl->put_Orientation(This,newVal)
#define IHitTarget_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IHitTarget_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IHitTarget_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IHitTarget_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IHitTarget_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define IHitTarget_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define IHitTarget_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IHitTarget_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IHitTarget_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IHitTarget_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IHitTarget_get_Threshold(This,pVal) (This)->lpVtbl->get_Threshold(This,pVal)
#define IHitTarget_put_Threshold(This,newVal) (This)->lpVtbl->put_Threshold(This,newVal)
#define IHitTarget_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IHitTarget_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IHitTarget_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IHitTarget_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IHitTarget_get_DisableLighting(This,pVal) (This)->lpVtbl->get_DisableLighting(This,pVal)
#define IHitTarget_put_DisableLighting(This,newVal) (This)->lpVtbl->put_DisableLighting(This,newVal)
#define IHitTarget_get_BlendDisableLighting(This,pVal) (This)->lpVtbl->get_BlendDisableLighting(This,pVal)
#define IHitTarget_put_BlendDisableLighting(This,newVal) (This)->lpVtbl->put_BlendDisableLighting(This,newVal)
#define IHitTarget_get_BlendDisableLightingFromBelow(This,pVal) (This)->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal)
#define IHitTarget_put_BlendDisableLightingFromBelow(This,newVal) (This)->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal)
#define IHitTarget_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IHitTarget_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IHitTarget_get_DepthBias(This,pVal) (This)->lpVtbl->get_DepthBias(This,pVal)
#define IHitTarget_put_DepthBias(This,newVal) (This)->lpVtbl->put_DepthBias(This,newVal)
#define IHitTarget_get_DropSpeed(This,pVal) (This)->lpVtbl->get_DropSpeed(This,pVal)
#define IHitTarget_put_DropSpeed(This,newVal) (This)->lpVtbl->put_DropSpeed(This,newVal)
#define IHitTarget_get_CurrentAnimOffset(This,pVal) (This)->lpVtbl->get_CurrentAnimOffset(This,pVal)
#define IHitTarget_get_IsDropped(This,pVal) (This)->lpVtbl->get_IsDropped(This,pVal)
#define IHitTarget_put_IsDropped(This,newVal) (This)->lpVtbl->put_IsDropped(This,newVal)
#define IHitTarget_get_DrawStyle(This,pVal) (This)->lpVtbl->get_DrawStyle(This,pVal)
#define IHitTarget_put_DrawStyle(This,newVal) (This)->lpVtbl->put_DrawStyle(This,newVal)
#define IHitTarget_get_LegacyMode(This,pVal) (This)->lpVtbl->get_LegacyMode(This,pVal)
#define IHitTarget_put_LegacyMode(This,newVal) (This)->lpVtbl->put_LegacyMode(This,newVal)
#define IHitTarget_get_RaiseDelay(This,pVal) (This)->lpVtbl->get_RaiseDelay(This,pVal)
#define IHitTarget_put_RaiseDelay(This,newVal) (This)->lpVtbl->put_RaiseDelay(This,newVal)
#define IHitTarget_get_PhysicsMaterial(This,pVal) (This)->lpVtbl->get_PhysicsMaterial(This,pVal)
#define IHitTarget_put_PhysicsMaterial(This,newVal) (This)->lpVtbl->put_PhysicsMaterial(This,newVal)
#define IHitTarget_get_OverwritePhysics(This,pVal) (This)->lpVtbl->get_OverwritePhysics(This,pVal)
#define IHitTarget_put_OverwritePhysics(This,newVal) (This)->lpVtbl->put_OverwritePhysics(This,newVal)
#define IHitTarget_get_HitThreshold(This,pVal) (This)->lpVtbl->get_HitThreshold(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IHitTarget_QueryInterface(IHitTarget* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IHitTarget_AddRef(IHitTarget* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IHitTarget_Release(IHitTarget* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IHitTarget_GetTypeInfoCount(IHitTarget* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IHitTarget_GetTypeInfo(IHitTarget* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IHitTarget_GetIDsOfNames(IHitTarget* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IHitTarget_Invoke(IHitTarget* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IHitTarget methods ***/
static __WIDL_INLINE HRESULT IHitTarget_get_TimerEnabled(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_TimerEnabled(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_TimerInterval(IHitTarget* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_TimerInterval(IHitTarget* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Visible(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Visible(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Material(IHitTarget* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Material(IHitTarget* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_UserValue(IHitTarget* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_UserValue(IHitTarget* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Image(IHitTarget* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Image(IHitTarget* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_X(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_X(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Y(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Y(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Z(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Z(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Z(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Z(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_ScaleX(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_ScaleX(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_ScaleX(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_ScaleX(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_ScaleY(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_ScaleY(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_ScaleY(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_ScaleY(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_ScaleZ(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_ScaleZ(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_ScaleZ(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_ScaleZ(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Orientation(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Orientation(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Orientation(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Orientation(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Name(IHitTarget* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Name(IHitTarget* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Elasticity(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Elasticity(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_ElasticityFalloff(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_ElasticityFalloff(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Collidable(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Collidable(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_HasHitEvent(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_HasHitEvent(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Threshold(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Threshold(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Threshold(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Threshold(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Friction(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Friction(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_Scatter(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_Scatter(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_DisableLighting(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_DisableLighting(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_BlendDisableLighting(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLighting(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_BlendDisableLighting(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLighting(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_BlendDisableLightingFromBelow(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_BlendDisableLightingFromBelow(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_BlendDisableLightingFromBelow(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_BlendDisableLightingFromBelow(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_ReflectionEnabled(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_ReflectionEnabled(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_DepthBias(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_DepthBias(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_DepthBias(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_DepthBias(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_DropSpeed(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_DropSpeed(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_DropSpeed(IHitTarget* This,float newVal) {
    return This->lpVtbl->put_DropSpeed(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_CurrentAnimOffset(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_CurrentAnimOffset(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_IsDropped(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsDropped(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_IsDropped(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsDropped(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_DrawStyle(IHitTarget* This,TargetType *pVal) {
    return This->lpVtbl->get_DrawStyle(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_DrawStyle(IHitTarget* This,TargetType newVal) {
    return This->lpVtbl->put_DrawStyle(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_LegacyMode(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_LegacyMode(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_LegacyMode(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_LegacyMode(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_RaiseDelay(IHitTarget* This,long *pVal) {
    return This->lpVtbl->get_RaiseDelay(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_RaiseDelay(IHitTarget* This,long newVal) {
    return This->lpVtbl->put_RaiseDelay(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_PhysicsMaterial(IHitTarget* This,BSTR *pVal) {
    return This->lpVtbl->get_PhysicsMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_PhysicsMaterial(IHitTarget* This,BSTR newVal) {
    return This->lpVtbl->put_PhysicsMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_OverwritePhysics(IHitTarget* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverwritePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IHitTarget_put_OverwritePhysics(IHitTarget* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverwritePhysics(This,newVal);
}
static __WIDL_INLINE HRESULT IHitTarget_get_HitThreshold(IHitTarget* This,float *pVal) {
    return This->lpVtbl->get_HitThreshold(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IHitTarget_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IHitTargetEvents dispinterface
 */
#ifndef __IHitTargetEvents_DISPINTERFACE_DEFINED__
#define __IHitTargetEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IHitTargetEvents, 0x4bc3733d, 0x7ea2, 0x45f5, 0x86,0xb3, 0xd8,0x63,0x54,0x7c,0x8a,0x44);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4bc3733d-7ea2-45f5-86b3-d863547c8a44")
IHitTargetEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHitTargetEvents, 0x4bc3733d, 0x7ea2, 0x45f5, 0x86,0xb3, 0xd8,0x63,0x54,0x7c,0x8a,0x44)
#endif
#else
typedef struct IHitTargetEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHitTargetEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHitTargetEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHitTargetEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IHitTargetEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IHitTargetEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IHitTargetEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IHitTargetEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IHitTargetEventsVtbl;

interface IHitTargetEvents {
    CONST_VTBL IHitTargetEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHitTargetEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHitTargetEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHitTargetEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IHitTargetEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IHitTargetEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IHitTargetEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IHitTargetEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IHitTargetEvents_QueryInterface(IHitTargetEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IHitTargetEvents_AddRef(IHitTargetEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IHitTargetEvents_Release(IHitTargetEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IHitTargetEvents_GetTypeInfoCount(IHitTargetEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IHitTargetEvents_GetTypeInfo(IHitTargetEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IHitTargetEvents_GetIDsOfNames(IHitTargetEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IHitTargetEvents_Invoke(IHitTargetEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IHitTargetEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IGate interface
 */
#ifndef __IGate_INTERFACE_DEFINED__
#define __IGate_INTERFACE_DEFINED__

DEFINE_GUID(IID_IGate, 0x9459ea61, 0x42fe, 0x4315, 0x92,0x89, 0xa2,0xcb,0x29,0x83,0x24,0xcc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9459ea61-42fe-4315-9289-a2cb298324cc")
IGate : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Length(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Length(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Rotation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Rotation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Open(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Open(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Damping(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Damping(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GravityFactor(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GravityFactor(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Move(
        int dir,
        float speed = 0,
        float angle = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CloseAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CloseAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OpenAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OpenAngle(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TwoWay(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TwoWay(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowBracket(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowBracket(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAngle(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DrawStyle(
        GateType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DrawStyle(
        GateType newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGate, 0x9459ea61, 0x42fe, 0x4315, 0x92,0x89, 0xa2,0xcb,0x29,0x83,0x24,0xcc)
#endif
#else
typedef struct IGateVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGate *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGate *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGate *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGate *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGate *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGate *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGate *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IGate methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IGate *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IGate *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IGate *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IGate *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_Length)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Length)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Rotation)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Rotation)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Open)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Open)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Damping)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Damping)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_GravityFactor)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GravityFactor)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *Move)(
        IGate *This,
        int dir,
        float speed,
        float angle);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IGate *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IGate *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        IGate *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        IGate *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IGate *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IGate *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_CloseAngle)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CloseAngle)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_OpenAngle)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OpenAngle)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IGate *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TwoWay)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TwoWay)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowBracket)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowBracket)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAngle)(
        IGate *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IGate *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IGate *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DrawStyle)(
        IGate *This,
        GateType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DrawStyle)(
        IGate *This,
        GateType newVal);

    END_INTERFACE
} IGateVtbl;

interface IGate {
    CONST_VTBL IGateVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGate_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGate_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGate_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGate_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGate_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IGate methods ***/
#define IGate_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IGate_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IGate_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IGate_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IGate_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IGate_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IGate_get_Length(This,pVal) (This)->lpVtbl->get_Length(This,pVal)
#define IGate_put_Length(This,newVal) (This)->lpVtbl->put_Length(This,newVal)
#define IGate_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IGate_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IGate_get_Rotation(This,pVal) (This)->lpVtbl->get_Rotation(This,pVal)
#define IGate_put_Rotation(This,newVal) (This)->lpVtbl->put_Rotation(This,newVal)
#define IGate_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IGate_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IGate_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IGate_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IGate_get_Open(This,pVal) (This)->lpVtbl->get_Open(This,pVal)
#define IGate_put_Open(This,newVal) (This)->lpVtbl->put_Open(This,newVal)
#define IGate_get_Damping(This,pVal) (This)->lpVtbl->get_Damping(This,pVal)
#define IGate_put_Damping(This,newVal) (This)->lpVtbl->put_Damping(This,newVal)
#define IGate_get_GravityFactor(This,pVal) (This)->lpVtbl->get_GravityFactor(This,pVal)
#define IGate_put_GravityFactor(This,newVal) (This)->lpVtbl->put_GravityFactor(This,newVal)
#define IGate_Move(This,dir,speed,angle) (This)->lpVtbl->Move(This,dir,speed,angle)
#define IGate_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IGate_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IGate_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IGate_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IGate_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define IGate_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define IGate_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IGate_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IGate_get_CloseAngle(This,pVal) (This)->lpVtbl->get_CloseAngle(This,pVal)
#define IGate_put_CloseAngle(This,newVal) (This)->lpVtbl->put_CloseAngle(This,newVal)
#define IGate_get_OpenAngle(This,pVal) (This)->lpVtbl->get_OpenAngle(This,pVal)
#define IGate_put_OpenAngle(This,newVal) (This)->lpVtbl->put_OpenAngle(This,newVal)
#define IGate_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IGate_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IGate_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IGate_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IGate_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IGate_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IGate_get_TwoWay(This,pVal) (This)->lpVtbl->get_TwoWay(This,pVal)
#define IGate_put_TwoWay(This,newVal) (This)->lpVtbl->put_TwoWay(This,newVal)
#define IGate_get_ShowBracket(This,pVal) (This)->lpVtbl->get_ShowBracket(This,pVal)
#define IGate_put_ShowBracket(This,newVal) (This)->lpVtbl->put_ShowBracket(This,newVal)
#define IGate_get_CurrentAngle(This,pVal) (This)->lpVtbl->get_CurrentAngle(This,pVal)
#define IGate_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IGate_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IGate_get_DrawStyle(This,pVal) (This)->lpVtbl->get_DrawStyle(This,pVal)
#define IGate_put_DrawStyle(This,newVal) (This)->lpVtbl->put_DrawStyle(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGate_QueryInterface(IGate* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGate_AddRef(IGate* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGate_Release(IGate* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGate_GetTypeInfoCount(IGate* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGate_GetTypeInfo(IGate* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGate_GetIDsOfNames(IGate* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGate_Invoke(IGate* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IGate methods ***/
static __WIDL_INLINE HRESULT IGate_get_Name(IGate* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Name(IGate* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_TimerEnabled(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_TimerEnabled(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_TimerInterval(IGate* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_TimerInterval(IGate* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Length(IGate* This,float *pVal) {
    return This->lpVtbl->get_Length(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Length(IGate* This,float newVal) {
    return This->lpVtbl->put_Length(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Height(IGate* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Height(IGate* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Rotation(IGate* This,float *pVal) {
    return This->lpVtbl->get_Rotation(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Rotation(IGate* This,float newVal) {
    return This->lpVtbl->put_Rotation(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_X(IGate* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_X(IGate* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Y(IGate* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Y(IGate* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Open(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Open(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Open(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Open(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Damping(IGate* This,float *pVal) {
    return This->lpVtbl->get_Damping(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Damping(IGate* This,float newVal) {
    return This->lpVtbl->put_Damping(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_GravityFactor(IGate* This,float *pVal) {
    return This->lpVtbl->get_GravityFactor(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_GravityFactor(IGate* This,float newVal) {
    return This->lpVtbl->put_GravityFactor(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_Move(IGate* This,int dir,float speed,float angle) {
    return This->lpVtbl->Move(This,dir,speed,angle);
}
static __WIDL_INLINE HRESULT IGate_get_Material(IGate* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Material(IGate* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Elasticity(IGate* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Elasticity(IGate* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Surface(IGate* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Surface(IGate* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_UserValue(IGate* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_UserValue(IGate* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_CloseAngle(IGate* This,float *pVal) {
    return This->lpVtbl->get_CloseAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_CloseAngle(IGate* This,float newVal) {
    return This->lpVtbl->put_CloseAngle(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_OpenAngle(IGate* This,float *pVal) {
    return This->lpVtbl->get_OpenAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_OpenAngle(IGate* This,float newVal) {
    return This->lpVtbl->put_OpenAngle(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Collidable(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Collidable(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Friction(IGate* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Friction(IGate* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_Visible(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_Visible(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_TwoWay(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TwoWay(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_TwoWay(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TwoWay(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_ShowBracket(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowBracket(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_ShowBracket(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowBracket(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_CurrentAngle(IGate* This,float *pVal) {
    return This->lpVtbl->get_CurrentAngle(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_get_ReflectionEnabled(IGate* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_ReflectionEnabled(IGate* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IGate_get_DrawStyle(IGate* This,GateType *pVal) {
    return This->lpVtbl->get_DrawStyle(This,pVal);
}
static __WIDL_INLINE HRESULT IGate_put_DrawStyle(IGate* This,GateType newVal) {
    return This->lpVtbl->put_DrawStyle(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IGate_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IGateEvents dispinterface
 */
#ifndef __IGateEvents_DISPINTERFACE_DEFINED__
#define __IGateEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IGateEvents, 0xd7753568, 0xbfd4, 0x4843, 0xb2,0xb1, 0x76,0x6c,0xcd,0x9a,0x20,0xba);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d7753568-bfd4-4843-b2b1-766ccd9a20ba")
IGateEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGateEvents, 0xd7753568, 0xbfd4, 0x4843, 0xb2,0xb1, 0x76,0x6c,0xcd,0x9a,0x20,0xba)
#endif
#else
typedef struct IGateEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGateEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGateEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGateEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGateEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGateEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGateEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGateEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IGateEventsVtbl;

interface IGateEvents {
    CONST_VTBL IGateEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGateEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGateEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGateEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGateEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGateEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGateEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGateEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGateEvents_QueryInterface(IGateEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGateEvents_AddRef(IGateEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGateEvents_Release(IGateEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGateEvents_GetTypeInfoCount(IGateEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGateEvents_GetTypeInfo(IGateEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGateEvents_GetIDsOfNames(IGateEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGateEvents_Invoke(IGateEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IGateEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ISpinner interface
 */
#ifndef __ISpinner_INTERFACE_DEFINED__
#define __ISpinner_INTERFACE_DEFINED__

DEFINE_GUID(IID_ISpinner, 0xed5ce186, 0xe654, 0x4aeb, 0x99,0x59, 0xe4,0xdc,0x93,0x12,0x89,0x58);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ed5ce186-e654-4aeb-9959-e4dc93128958")
ISpinner : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Length(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Length(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Rotation(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Rotation(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Damping(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Damping(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Surface(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Surface(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowBracket(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowBracket(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngleMax(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngleMax(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngleMin(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngleMin(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAngle(
        float *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ISpinner, 0xed5ce186, 0xe654, 0x4aeb, 0x99,0x59, 0xe4,0xdc,0x93,0x12,0x89,0x58)
#endif
#else
typedef struct ISpinnerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ISpinner *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ISpinner *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ISpinner *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ISpinner *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ISpinner *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ISpinner *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ISpinner *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ISpinner methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ISpinner *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ISpinner *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        ISpinner *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        ISpinner *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        ISpinner *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        ISpinner *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_Length)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Length)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Rotation)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Rotation)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Damping)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Damping)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        ISpinner *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        ISpinner *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        ISpinner *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        ISpinner *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Surface)(
        ISpinner *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Surface)(
        ISpinner *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ISpinner *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ISpinner *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowBracket)(
        ISpinner *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowBracket)(
        ISpinner *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngleMax)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngleMax)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngleMin)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngleMin)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        ISpinner *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        ISpinner *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        ISpinner *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        ISpinner *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        ISpinner *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        ISpinner *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAngle)(
        ISpinner *This,
        float *pVal);

    END_INTERFACE
} ISpinnerVtbl;

interface ISpinner {
    CONST_VTBL ISpinnerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ISpinner_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISpinner_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISpinner_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ISpinner_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ISpinner_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ISpinner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ISpinner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ISpinner methods ***/
#define ISpinner_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ISpinner_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ISpinner_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define ISpinner_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define ISpinner_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define ISpinner_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define ISpinner_get_Length(This,pVal) (This)->lpVtbl->get_Length(This,pVal)
#define ISpinner_put_Length(This,newVal) (This)->lpVtbl->put_Length(This,newVal)
#define ISpinner_get_Rotation(This,pVal) (This)->lpVtbl->get_Rotation(This,pVal)
#define ISpinner_put_Rotation(This,newVal) (This)->lpVtbl->put_Rotation(This,newVal)
#define ISpinner_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define ISpinner_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define ISpinner_get_Damping(This,pVal) (This)->lpVtbl->get_Damping(This,pVal)
#define ISpinner_put_Damping(This,newVal) (This)->lpVtbl->put_Damping(This,newVal)
#define ISpinner_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define ISpinner_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define ISpinner_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define ISpinner_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define ISpinner_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define ISpinner_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define ISpinner_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define ISpinner_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define ISpinner_get_Surface(This,pVal) (This)->lpVtbl->get_Surface(This,pVal)
#define ISpinner_put_Surface(This,newVal) (This)->lpVtbl->put_Surface(This,newVal)
#define ISpinner_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ISpinner_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define ISpinner_get_ShowBracket(This,pVal) (This)->lpVtbl->get_ShowBracket(This,pVal)
#define ISpinner_put_ShowBracket(This,newVal) (This)->lpVtbl->put_ShowBracket(This,newVal)
#define ISpinner_get_AngleMax(This,pVal) (This)->lpVtbl->get_AngleMax(This,pVal)
#define ISpinner_put_AngleMax(This,newVal) (This)->lpVtbl->put_AngleMax(This,newVal)
#define ISpinner_get_AngleMin(This,pVal) (This)->lpVtbl->get_AngleMin(This,pVal)
#define ISpinner_put_AngleMin(This,newVal) (This)->lpVtbl->put_AngleMin(This,newVal)
#define ISpinner_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define ISpinner_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define ISpinner_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define ISpinner_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define ISpinner_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define ISpinner_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define ISpinner_get_CurrentAngle(This,pVal) (This)->lpVtbl->get_CurrentAngle(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ISpinner_QueryInterface(ISpinner* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ISpinner_AddRef(ISpinner* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ISpinner_Release(ISpinner* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ISpinner_GetTypeInfoCount(ISpinner* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ISpinner_GetTypeInfo(ISpinner* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ISpinner_GetIDsOfNames(ISpinner* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ISpinner_Invoke(ISpinner* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ISpinner methods ***/
static __WIDL_INLINE HRESULT ISpinner_get_Name(ISpinner* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Name(ISpinner* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_TimerEnabled(ISpinner* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_TimerEnabled(ISpinner* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_TimerInterval(ISpinner* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_TimerInterval(ISpinner* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Length(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Length(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Length(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Length(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Rotation(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Rotation(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Rotation(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Rotation(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Height(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Height(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Damping(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Damping(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Damping(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Damping(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Image(ISpinner* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Image(ISpinner* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Material(ISpinner* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Material(ISpinner* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_X(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_X(ISpinner* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Y(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Y(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Surface(ISpinner* This,BSTR *pVal) {
    return This->lpVtbl->get_Surface(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Surface(ISpinner* This,BSTR newVal) {
    return This->lpVtbl->put_Surface(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_UserValue(ISpinner* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_UserValue(ISpinner* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_ShowBracket(ISpinner* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowBracket(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_ShowBracket(ISpinner* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowBracket(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_AngleMax(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_AngleMax(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_AngleMax(ISpinner* This,float newVal) {
    return This->lpVtbl->put_AngleMax(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_AngleMin(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_AngleMin(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_AngleMin(ISpinner* This,float newVal) {
    return This->lpVtbl->put_AngleMin(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Elasticity(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Elasticity(ISpinner* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_Visible(ISpinner* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_Visible(ISpinner* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_ReflectionEnabled(ISpinner* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ISpinner_put_ReflectionEnabled(ISpinner* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ISpinner_get_CurrentAngle(ISpinner* This,float *pVal) {
    return This->lpVtbl->get_CurrentAngle(This,pVal);
}
#endif
#endif

#endif


#endif  /* __ISpinner_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ISpinnerEvents dispinterface
 */
#ifndef __ISpinnerEvents_DISPINTERFACE_DEFINED__
#define __ISpinnerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ISpinnerEvents, 0x1b57054e, 0xdb6d, 0x4a12, 0xad,0x63, 0xbd,0xab,0x51,0x14,0x85,0x62);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1b57054e-db6d-4a12-ad63-bdab51148562")
ISpinnerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ISpinnerEvents, 0x1b57054e, 0xdb6d, 0x4a12, 0xad,0x63, 0xbd,0xab,0x51,0x14,0x85,0x62)
#endif
#else
typedef struct ISpinnerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ISpinnerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ISpinnerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ISpinnerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ISpinnerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ISpinnerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ISpinnerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ISpinnerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ISpinnerEventsVtbl;

interface ISpinnerEvents {
    CONST_VTBL ISpinnerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ISpinnerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISpinnerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISpinnerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ISpinnerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ISpinnerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ISpinnerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ISpinnerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ISpinnerEvents_QueryInterface(ISpinnerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ISpinnerEvents_AddRef(ISpinnerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ISpinnerEvents_Release(ISpinnerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ISpinnerEvents_GetTypeInfoCount(ISpinnerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ISpinnerEvents_GetTypeInfo(ISpinnerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ISpinnerEvents_GetIDsOfNames(ISpinnerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ISpinnerEvents_Invoke(ISpinnerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ISpinnerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IRamp interface
 */
#ifndef __IRamp_INTERFACE_DEFINED__
#define __IRamp_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRamp, 0xa90308cf, 0x09d8, 0x4c38, 0x99,0xb6, 0x9e,0x37,0x1e,0xa4,0x1b,0x97);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a90308cf-09d8-4c38-99b6-9e371ea41b97")
IRamp : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HeightBottom(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HeightBottom(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HeightTop(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HeightTop(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WidthBottom(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WidthBottom(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WidthTop(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WidthTop(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        RampType *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Type(
        RampType newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageAlignment(
        RampImageAlignment *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageAlignment(
        RampImageAlignment newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasWallImage(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasWallImage(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LeftWallHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LeftWallHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RightWallHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RightWallHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VisibleLeftWallHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VisibleLeftWallHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VisibleRightWallHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VisibleRightWallHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Threshold(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Threshold(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DepthBias(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DepthBias(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WireDiameter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WireDiameter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WireDistanceX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WireDistanceX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WireDistanceY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_WireDistanceY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverwritePhysics(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverwritePhysics(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRamp, 0xa90308cf, 0x09d8, 0x4c38, 0x99,0xb6, 0x9e,0x37,0x1e,0xa4,0x1b,0x97)
#endif
#else
typedef struct IRampVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRamp *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRamp *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRamp *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRamp *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRamp *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRamp *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRamp *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IRamp methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IRamp *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IRamp *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IRamp *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IRamp *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_HeightBottom)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HeightBottom)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HeightTop)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HeightTop)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WidthBottom)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WidthBottom)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WidthTop)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WidthTop)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IRamp *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IRamp *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IRamp *This,
        RampType *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Type)(
        IRamp *This,
        RampType newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IRamp *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IRamp *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageAlignment)(
        IRamp *This,
        RampImageAlignment *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageAlignment)(
        IRamp *This,
        RampImageAlignment newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasWallImage)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasWallImage)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_LeftWallHeight)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LeftWallHeight)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RightWallHeight)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RightWallHeight)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IRamp *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IRamp *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_VisibleLeftWallHeight)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_VisibleLeftWallHeight)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_VisibleRightWallHeight)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_VisibleRightWallHeight)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Threshold)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Threshold)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_DepthBias)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DepthBias)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WireDiameter)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WireDiameter)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WireDistanceX)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WireDistanceX)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_WireDistanceY)(
        IRamp *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_WireDistanceY)(
        IRamp *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IRamp *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsMaterial)(
        IRamp *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsMaterial)(
        IRamp *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverwritePhysics)(
        IRamp *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverwritePhysics)(
        IRamp *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IRampVtbl;

interface IRamp {
    CONST_VTBL IRampVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRamp_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRamp_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRamp_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRamp_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRamp_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRamp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRamp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IRamp methods ***/
#define IRamp_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IRamp_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IRamp_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IRamp_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IRamp_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IRamp_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IRamp_get_HeightBottom(This,pVal) (This)->lpVtbl->get_HeightBottom(This,pVal)
#define IRamp_put_HeightBottom(This,newVal) (This)->lpVtbl->put_HeightBottom(This,newVal)
#define IRamp_get_HeightTop(This,pVal) (This)->lpVtbl->get_HeightTop(This,pVal)
#define IRamp_put_HeightTop(This,newVal) (This)->lpVtbl->put_HeightTop(This,newVal)
#define IRamp_get_WidthBottom(This,pVal) (This)->lpVtbl->get_WidthBottom(This,pVal)
#define IRamp_put_WidthBottom(This,newVal) (This)->lpVtbl->put_WidthBottom(This,newVal)
#define IRamp_get_WidthTop(This,pVal) (This)->lpVtbl->get_WidthTop(This,pVal)
#define IRamp_put_WidthTop(This,newVal) (This)->lpVtbl->put_WidthTop(This,newVal)
#define IRamp_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IRamp_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IRamp_get_Type(This,pVal) (This)->lpVtbl->get_Type(This,pVal)
#define IRamp_put_Type(This,newVal) (This)->lpVtbl->put_Type(This,newVal)
#define IRamp_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IRamp_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IRamp_get_ImageAlignment(This,pVal) (This)->lpVtbl->get_ImageAlignment(This,pVal)
#define IRamp_put_ImageAlignment(This,newVal) (This)->lpVtbl->put_ImageAlignment(This,newVal)
#define IRamp_get_HasWallImage(This,pVal) (This)->lpVtbl->get_HasWallImage(This,pVal)
#define IRamp_put_HasWallImage(This,newVal) (This)->lpVtbl->put_HasWallImage(This,newVal)
#define IRamp_get_LeftWallHeight(This,pVal) (This)->lpVtbl->get_LeftWallHeight(This,pVal)
#define IRamp_put_LeftWallHeight(This,newVal) (This)->lpVtbl->put_LeftWallHeight(This,newVal)
#define IRamp_get_RightWallHeight(This,pVal) (This)->lpVtbl->get_RightWallHeight(This,pVal)
#define IRamp_put_RightWallHeight(This,newVal) (This)->lpVtbl->put_RightWallHeight(This,newVal)
#define IRamp_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IRamp_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IRamp_get_VisibleLeftWallHeight(This,pVal) (This)->lpVtbl->get_VisibleLeftWallHeight(This,pVal)
#define IRamp_put_VisibleLeftWallHeight(This,newVal) (This)->lpVtbl->put_VisibleLeftWallHeight(This,newVal)
#define IRamp_get_VisibleRightWallHeight(This,pVal) (This)->lpVtbl->get_VisibleRightWallHeight(This,pVal)
#define IRamp_put_VisibleRightWallHeight(This,newVal) (This)->lpVtbl->put_VisibleRightWallHeight(This,newVal)
#define IRamp_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IRamp_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IRamp_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IRamp_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IRamp_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IRamp_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IRamp_get_Threshold(This,pVal) (This)->lpVtbl->get_Threshold(This,pVal)
#define IRamp_put_Threshold(This,newVal) (This)->lpVtbl->put_Threshold(This,newVal)
#define IRamp_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IRamp_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IRamp_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IRamp_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IRamp_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IRamp_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IRamp_get_DepthBias(This,pVal) (This)->lpVtbl->get_DepthBias(This,pVal)
#define IRamp_put_DepthBias(This,newVal) (This)->lpVtbl->put_DepthBias(This,newVal)
#define IRamp_get_WireDiameter(This,pVal) (This)->lpVtbl->get_WireDiameter(This,pVal)
#define IRamp_put_WireDiameter(This,newVal) (This)->lpVtbl->put_WireDiameter(This,newVal)
#define IRamp_get_WireDistanceX(This,pVal) (This)->lpVtbl->get_WireDistanceX(This,pVal)
#define IRamp_put_WireDistanceX(This,newVal) (This)->lpVtbl->put_WireDistanceX(This,newVal)
#define IRamp_get_WireDistanceY(This,pVal) (This)->lpVtbl->get_WireDistanceY(This,pVal)
#define IRamp_put_WireDistanceY(This,newVal) (This)->lpVtbl->put_WireDistanceY(This,newVal)
#define IRamp_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IRamp_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IRamp_get_PhysicsMaterial(This,pVal) (This)->lpVtbl->get_PhysicsMaterial(This,pVal)
#define IRamp_put_PhysicsMaterial(This,newVal) (This)->lpVtbl->put_PhysicsMaterial(This,newVal)
#define IRamp_get_OverwritePhysics(This,pVal) (This)->lpVtbl->get_OverwritePhysics(This,pVal)
#define IRamp_put_OverwritePhysics(This,newVal) (This)->lpVtbl->put_OverwritePhysics(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRamp_QueryInterface(IRamp* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRamp_AddRef(IRamp* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRamp_Release(IRamp* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRamp_GetTypeInfoCount(IRamp* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRamp_GetTypeInfo(IRamp* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRamp_GetIDsOfNames(IRamp* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRamp_Invoke(IRamp* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IRamp methods ***/
static __WIDL_INLINE HRESULT IRamp_get_Name(IRamp* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Name(IRamp* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_TimerEnabled(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_TimerEnabled(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_TimerInterval(IRamp* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_TimerInterval(IRamp* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_HeightBottom(IRamp* This,float *pVal) {
    return This->lpVtbl->get_HeightBottom(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_HeightBottom(IRamp* This,float newVal) {
    return This->lpVtbl->put_HeightBottom(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_HeightTop(IRamp* This,float *pVal) {
    return This->lpVtbl->get_HeightTop(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_HeightTop(IRamp* This,float newVal) {
    return This->lpVtbl->put_HeightTop(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_WidthBottom(IRamp* This,float *pVal) {
    return This->lpVtbl->get_WidthBottom(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_WidthBottom(IRamp* This,float newVal) {
    return This->lpVtbl->put_WidthBottom(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_WidthTop(IRamp* This,float *pVal) {
    return This->lpVtbl->get_WidthTop(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_WidthTop(IRamp* This,float newVal) {
    return This->lpVtbl->put_WidthTop(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Material(IRamp* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Material(IRamp* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Type(IRamp* This,RampType *pVal) {
    return This->lpVtbl->get_Type(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Type(IRamp* This,RampType newVal) {
    return This->lpVtbl->put_Type(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Image(IRamp* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Image(IRamp* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_ImageAlignment(IRamp* This,RampImageAlignment *pVal) {
    return This->lpVtbl->get_ImageAlignment(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_ImageAlignment(IRamp* This,RampImageAlignment newVal) {
    return This->lpVtbl->put_ImageAlignment(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_HasWallImage(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasWallImage(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_HasWallImage(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasWallImage(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_LeftWallHeight(IRamp* This,float *pVal) {
    return This->lpVtbl->get_LeftWallHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_LeftWallHeight(IRamp* This,float newVal) {
    return This->lpVtbl->put_LeftWallHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_RightWallHeight(IRamp* This,float *pVal) {
    return This->lpVtbl->get_RightWallHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_RightWallHeight(IRamp* This,float newVal) {
    return This->lpVtbl->put_RightWallHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_UserValue(IRamp* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_UserValue(IRamp* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_VisibleLeftWallHeight(IRamp* This,float *pVal) {
    return This->lpVtbl->get_VisibleLeftWallHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_VisibleLeftWallHeight(IRamp* This,float newVal) {
    return This->lpVtbl->put_VisibleLeftWallHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_VisibleRightWallHeight(IRamp* This,float *pVal) {
    return This->lpVtbl->get_VisibleRightWallHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_VisibleRightWallHeight(IRamp* This,float newVal) {
    return This->lpVtbl->put_VisibleRightWallHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Elasticity(IRamp* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Elasticity(IRamp* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Collidable(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Collidable(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_HasHitEvent(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_HasHitEvent(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Threshold(IRamp* This,float *pVal) {
    return This->lpVtbl->get_Threshold(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Threshold(IRamp* This,float newVal) {
    return This->lpVtbl->put_Threshold(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Visible(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Visible(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Friction(IRamp* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Friction(IRamp* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_Scatter(IRamp* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_Scatter(IRamp* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_DepthBias(IRamp* This,float *pVal) {
    return This->lpVtbl->get_DepthBias(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_DepthBias(IRamp* This,float newVal) {
    return This->lpVtbl->put_DepthBias(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_WireDiameter(IRamp* This,float *pVal) {
    return This->lpVtbl->get_WireDiameter(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_WireDiameter(IRamp* This,float newVal) {
    return This->lpVtbl->put_WireDiameter(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_WireDistanceX(IRamp* This,float *pVal) {
    return This->lpVtbl->get_WireDistanceX(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_WireDistanceX(IRamp* This,float newVal) {
    return This->lpVtbl->put_WireDistanceX(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_WireDistanceY(IRamp* This,float *pVal) {
    return This->lpVtbl->get_WireDistanceY(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_WireDistanceY(IRamp* This,float newVal) {
    return This->lpVtbl->put_WireDistanceY(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_ReflectionEnabled(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_ReflectionEnabled(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_PhysicsMaterial(IRamp* This,BSTR *pVal) {
    return This->lpVtbl->get_PhysicsMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_PhysicsMaterial(IRamp* This,BSTR newVal) {
    return This->lpVtbl->put_PhysicsMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IRamp_get_OverwritePhysics(IRamp* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverwritePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IRamp_put_OverwritePhysics(IRamp* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverwritePhysics(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IRamp_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFlasher interface
 */
#ifndef __IFlasher_INTERFACE_DEFINED__
#define __IFlasher_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFlasher, 0x87dab93e, 0x7d6f, 0x4fe4, 0xa5,0xf9, 0x63,0x2f,0xd8,0x2b,0xdb,0x4a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("87dab93e-7d6f-4fe4-a5f9-632fd82bdb4a")
IFlasher : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageAlignment(
        RampImageAlignment *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageAlignment(
        RampImageAlignment newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Color(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Color(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageA(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageA(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImageB(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImageB(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayTexture(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisplayTexture(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Opacity(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Opacity(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IntensityScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IntensityScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ModulateVsAdd(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ModulateVsAdd(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AddBlend(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AddBlend(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DMD(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMD(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDWidth(
        int pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDHeight(
        int pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDPixels(
        VARIANT pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DMDColoredPixels(
        VARIANT pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VideoCapWidth(
        long cWidth) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VideoCapHeight(
        long cHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VideoCapUpdate(
        BSTR cWinTitle) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DepthBias(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DepthBias(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Filter(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Filter(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Amount(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Amount(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFlasher, 0x87dab93e, 0x7d6f, 0x4fe4, 0xa5,0xf9, 0x63,0x2f,0xd8,0x2b,0xdb,0x4a)
#endif
#else
typedef struct IFlasherVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFlasher *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFlasher *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFlasher *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFlasher *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFlasher *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFlasher *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFlasher *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFlasher methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFlasher *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFlasher *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageAlignment)(
        IFlasher *This,
        RampImageAlignment *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageAlignment)(
        IFlasher *This,
        RampImageAlignment newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotZ)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotZ)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotY)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotY)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotX)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotX)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Color)(
        IFlasher *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Color)(
        IFlasher *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageA)(
        IFlasher *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageA)(
        IFlasher *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImageB)(
        IFlasher *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImageB)(
        IFlasher *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_DisplayTexture)(
        IFlasher *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DisplayTexture)(
        IFlasher *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Opacity)(
        IFlasher *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Opacity)(
        IFlasher *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_IntensityScale)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IntensityScale)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ModulateVsAdd)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ModulateVsAdd)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IFlasher *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IFlasher *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IFlasher *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IFlasher *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_AddBlend)(
        IFlasher *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AddBlend)(
        IFlasher *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DMD)(
        IFlasher *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMD)(
        IFlasher *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDWidth)(
        IFlasher *This,
        int pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDHeight)(
        IFlasher *This,
        int pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDPixels)(
        IFlasher *This,
        VARIANT pVal);

    HRESULT (STDMETHODCALLTYPE *put_DMDColoredPixels)(
        IFlasher *This,
        VARIANT pVal);

    HRESULT (STDMETHODCALLTYPE *put_VideoCapWidth)(
        IFlasher *This,
        long cWidth);

    HRESULT (STDMETHODCALLTYPE *put_VideoCapHeight)(
        IFlasher *This,
        long cHeight);

    HRESULT (STDMETHODCALLTYPE *put_VideoCapUpdate)(
        IFlasher *This,
        BSTR cWinTitle);

    HRESULT (STDMETHODCALLTYPE *get_DepthBias)(
        IFlasher *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DepthBias)(
        IFlasher *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Filter)(
        IFlasher *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Filter)(
        IFlasher *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Amount)(
        IFlasher *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Amount)(
        IFlasher *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IFlasher *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IFlasher *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IFlasher *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IFlasher *This,
        long newVal);

    END_INTERFACE
} IFlasherVtbl;

interface IFlasher {
    CONST_VTBL IFlasherVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFlasher_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFlasher_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFlasher_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFlasher_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFlasher_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFlasher_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFlasher_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFlasher methods ***/
#define IFlasher_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IFlasher_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IFlasher_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IFlasher_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IFlasher_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IFlasher_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IFlasher_get_ImageAlignment(This,pVal) (This)->lpVtbl->get_ImageAlignment(This,pVal)
#define IFlasher_put_ImageAlignment(This,newVal) (This)->lpVtbl->put_ImageAlignment(This,newVal)
#define IFlasher_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IFlasher_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IFlasher_get_RotZ(This,pVal) (This)->lpVtbl->get_RotZ(This,pVal)
#define IFlasher_put_RotZ(This,newVal) (This)->lpVtbl->put_RotZ(This,newVal)
#define IFlasher_get_RotY(This,pVal) (This)->lpVtbl->get_RotY(This,pVal)
#define IFlasher_put_RotY(This,newVal) (This)->lpVtbl->put_RotY(This,newVal)
#define IFlasher_get_RotX(This,pVal) (This)->lpVtbl->get_RotX(This,pVal)
#define IFlasher_put_RotX(This,newVal) (This)->lpVtbl->put_RotX(This,newVal)
#define IFlasher_get_Color(This,pVal) (This)->lpVtbl->get_Color(This,pVal)
#define IFlasher_put_Color(This,newVal) (This)->lpVtbl->put_Color(This,newVal)
#define IFlasher_get_ImageA(This,pVal) (This)->lpVtbl->get_ImageA(This,pVal)
#define IFlasher_put_ImageA(This,newVal) (This)->lpVtbl->put_ImageA(This,newVal)
#define IFlasher_get_ImageB(This,pVal) (This)->lpVtbl->get_ImageB(This,pVal)
#define IFlasher_put_ImageB(This,newVal) (This)->lpVtbl->put_ImageB(This,newVal)
#define IFlasher_get_DisplayTexture(This,pVal) (This)->lpVtbl->get_DisplayTexture(This,pVal)
#define IFlasher_put_DisplayTexture(This,newVal) (This)->lpVtbl->put_DisplayTexture(This,newVal)
#define IFlasher_get_Opacity(This,pVal) (This)->lpVtbl->get_Opacity(This,pVal)
#define IFlasher_put_Opacity(This,newVal) (This)->lpVtbl->put_Opacity(This,newVal)
#define IFlasher_get_IntensityScale(This,pVal) (This)->lpVtbl->get_IntensityScale(This,pVal)
#define IFlasher_put_IntensityScale(This,newVal) (This)->lpVtbl->put_IntensityScale(This,newVal)
#define IFlasher_get_ModulateVsAdd(This,pVal) (This)->lpVtbl->get_ModulateVsAdd(This,pVal)
#define IFlasher_put_ModulateVsAdd(This,newVal) (This)->lpVtbl->put_ModulateVsAdd(This,newVal)
#define IFlasher_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IFlasher_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IFlasher_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IFlasher_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IFlasher_get_AddBlend(This,pVal) (This)->lpVtbl->get_AddBlend(This,pVal)
#define IFlasher_put_AddBlend(This,newVal) (This)->lpVtbl->put_AddBlend(This,newVal)
#define IFlasher_get_DMD(This,pVal) (This)->lpVtbl->get_DMD(This,pVal)
#define IFlasher_put_DMD(This,newVal) (This)->lpVtbl->put_DMD(This,newVal)
#define IFlasher_put_DMDWidth(This,pVal) (This)->lpVtbl->put_DMDWidth(This,pVal)
#define IFlasher_put_DMDHeight(This,pVal) (This)->lpVtbl->put_DMDHeight(This,pVal)
#define IFlasher_put_DMDPixels(This,pVal) (This)->lpVtbl->put_DMDPixels(This,pVal)
#define IFlasher_put_DMDColoredPixels(This,pVal) (This)->lpVtbl->put_DMDColoredPixels(This,pVal)
#define IFlasher_put_VideoCapWidth(This,cWidth) (This)->lpVtbl->put_VideoCapWidth(This,cWidth)
#define IFlasher_put_VideoCapHeight(This,cHeight) (This)->lpVtbl->put_VideoCapHeight(This,cHeight)
#define IFlasher_put_VideoCapUpdate(This,cWinTitle) (This)->lpVtbl->put_VideoCapUpdate(This,cWinTitle)
#define IFlasher_get_DepthBias(This,pVal) (This)->lpVtbl->get_DepthBias(This,pVal)
#define IFlasher_put_DepthBias(This,newVal) (This)->lpVtbl->put_DepthBias(This,newVal)
#define IFlasher_get_Filter(This,pVal) (This)->lpVtbl->get_Filter(This,pVal)
#define IFlasher_put_Filter(This,newVal) (This)->lpVtbl->put_Filter(This,newVal)
#define IFlasher_get_Amount(This,pVal) (This)->lpVtbl->get_Amount(This,pVal)
#define IFlasher_put_Amount(This,newVal) (This)->lpVtbl->put_Amount(This,newVal)
#define IFlasher_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IFlasher_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IFlasher_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IFlasher_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFlasher_QueryInterface(IFlasher* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFlasher_AddRef(IFlasher* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFlasher_Release(IFlasher* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFlasher_GetTypeInfoCount(IFlasher* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFlasher_GetTypeInfo(IFlasher* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFlasher_GetIDsOfNames(IFlasher* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFlasher_Invoke(IFlasher* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFlasher methods ***/
static __WIDL_INLINE HRESULT IFlasher_get_Name(IFlasher* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Name(IFlasher* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_X(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_X(IFlasher* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Y(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Y(IFlasher* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_ImageAlignment(IFlasher* This,RampImageAlignment *pVal) {
    return This->lpVtbl->get_ImageAlignment(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_ImageAlignment(IFlasher* This,RampImageAlignment newVal) {
    return This->lpVtbl->put_ImageAlignment(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Height(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Height(IFlasher* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_RotZ(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_RotZ(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_RotZ(IFlasher* This,float newVal) {
    return This->lpVtbl->put_RotZ(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_RotY(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_RotY(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_RotY(IFlasher* This,float newVal) {
    return This->lpVtbl->put_RotY(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_RotX(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_RotX(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_RotX(IFlasher* This,float newVal) {
    return This->lpVtbl->put_RotX(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Color(IFlasher* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_Color(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Color(IFlasher* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_Color(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_ImageA(IFlasher* This,BSTR *pVal) {
    return This->lpVtbl->get_ImageA(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_ImageA(IFlasher* This,BSTR newVal) {
    return This->lpVtbl->put_ImageA(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_ImageB(IFlasher* This,BSTR *pVal) {
    return This->lpVtbl->get_ImageB(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_ImageB(IFlasher* This,BSTR newVal) {
    return This->lpVtbl->put_ImageB(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_DisplayTexture(IFlasher* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DisplayTexture(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DisplayTexture(IFlasher* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DisplayTexture(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Opacity(IFlasher* This,long *pVal) {
    return This->lpVtbl->get_Opacity(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Opacity(IFlasher* This,long newVal) {
    return This->lpVtbl->put_Opacity(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_IntensityScale(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_IntensityScale(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_IntensityScale(IFlasher* This,float newVal) {
    return This->lpVtbl->put_IntensityScale(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_ModulateVsAdd(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_ModulateVsAdd(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_ModulateVsAdd(IFlasher* This,float newVal) {
    return This->lpVtbl->put_ModulateVsAdd(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_UserValue(IFlasher* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_UserValue(IFlasher* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Visible(IFlasher* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Visible(IFlasher* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_AddBlend(IFlasher* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_AddBlend(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_AddBlend(IFlasher* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_AddBlend(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_DMD(IFlasher* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DMD(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DMD(IFlasher* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DMD(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DMDWidth(IFlasher* This,int pVal) {
    return This->lpVtbl->put_DMDWidth(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DMDHeight(IFlasher* This,int pVal) {
    return This->lpVtbl->put_DMDHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DMDPixels(IFlasher* This,VARIANT pVal) {
    return This->lpVtbl->put_DMDPixels(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DMDColoredPixels(IFlasher* This,VARIANT pVal) {
    return This->lpVtbl->put_DMDColoredPixels(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_VideoCapWidth(IFlasher* This,long cWidth) {
    return This->lpVtbl->put_VideoCapWidth(This,cWidth);
}
static __WIDL_INLINE HRESULT IFlasher_put_VideoCapHeight(IFlasher* This,long cHeight) {
    return This->lpVtbl->put_VideoCapHeight(This,cHeight);
}
static __WIDL_INLINE HRESULT IFlasher_put_VideoCapUpdate(IFlasher* This,BSTR cWinTitle) {
    return This->lpVtbl->put_VideoCapUpdate(This,cWinTitle);
}
static __WIDL_INLINE HRESULT IFlasher_get_DepthBias(IFlasher* This,float *pVal) {
    return This->lpVtbl->get_DepthBias(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_DepthBias(IFlasher* This,float newVal) {
    return This->lpVtbl->put_DepthBias(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Filter(IFlasher* This,BSTR *pVal) {
    return This->lpVtbl->get_Filter(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Filter(IFlasher* This,BSTR newVal) {
    return This->lpVtbl->put_Filter(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_Amount(IFlasher* This,long *pVal) {
    return This->lpVtbl->get_Amount(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_Amount(IFlasher* This,long newVal) {
    return This->lpVtbl->put_Amount(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_TimerEnabled(IFlasher* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_TimerEnabled(IFlasher* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IFlasher_get_TimerInterval(IFlasher* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IFlasher_put_TimerInterval(IFlasher* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IFlasher_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRubber interface
 */
#ifndef __IRubber_INTERFACE_DEFINED__
#define __IRubber_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRubber, 0x496cc241, 0x134d, 0x4543, 0x99,0x74, 0x5b,0x0d,0xf6,0xbc,0x5d,0x1d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("496cc241-134d-4543-9974-5b0df6bc5d1d")
IRubber : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HitHeight(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HitHeight(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HasHitEvent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HasHitEvent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Thickness(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Thickness(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RotY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RotY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Material(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Material(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Elasticity(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Elasticity(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ElasticityFalloff(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ElasticityFalloff(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collidable(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collidable(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Friction(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Friction(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Scatter(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Scatter(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableStaticRendering(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableStaticRendering(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnableShowInEditor(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_EnableShowInEditor(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PhysicsMaterial(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PhysicsMaterial(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OverwritePhysics(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OverwritePhysics(
        VARIANT_BOOL newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRubber, 0x496cc241, 0x134d, 0x4543, 0x99,0x74, 0x5b,0x0d,0xf6,0xbc,0x5d,0x1d)
#endif
#else
typedef struct IRubberVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRubber *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRubber *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRubber *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRubber *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRubber *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRubber *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRubber *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IRubber methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IRubber *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IRubber *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HitHeight)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HitHeight)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_HasHitEvent)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HasHitEvent)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Thickness)(
        IRubber *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Thickness)(
        IRubber *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotX)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotX)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotZ)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotZ)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_RotY)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_RotY)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Material)(
        IRubber *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Material)(
        IRubber *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IRubber *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IRubber *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Elasticity)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Elasticity)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ElasticityFalloff)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ElasticityFalloff)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collidable)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collidable)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Friction)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Friction)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Scatter)(
        IRubber *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Scatter)(
        IRubber *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableStaticRendering)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableStaticRendering)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnableShowInEditor)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_EnableShowInEditor)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IRubber *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IRubber *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IRubber *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IRubber *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IRubber *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_PhysicsMaterial)(
        IRubber *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PhysicsMaterial)(
        IRubber *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_OverwritePhysics)(
        IRubber *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_OverwritePhysics)(
        IRubber *This,
        VARIANT_BOOL newVal);

    END_INTERFACE
} IRubberVtbl;

interface IRubber {
    CONST_VTBL IRubberVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRubber_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRubber_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRubber_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRubber_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRubber_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRubber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRubber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IRubber methods ***/
#define IRubber_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IRubber_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IRubber_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IRubber_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IRubber_get_HitHeight(This,pVal) (This)->lpVtbl->get_HitHeight(This,pVal)
#define IRubber_put_HitHeight(This,newVal) (This)->lpVtbl->put_HitHeight(This,newVal)
#define IRubber_get_HasHitEvent(This,pVal) (This)->lpVtbl->get_HasHitEvent(This,pVal)
#define IRubber_put_HasHitEvent(This,newVal) (This)->lpVtbl->put_HasHitEvent(This,newVal)
#define IRubber_get_Thickness(This,pVal) (This)->lpVtbl->get_Thickness(This,pVal)
#define IRubber_put_Thickness(This,newVal) (This)->lpVtbl->put_Thickness(This,newVal)
#define IRubber_get_RotX(This,pVal) (This)->lpVtbl->get_RotX(This,pVal)
#define IRubber_put_RotX(This,newVal) (This)->lpVtbl->put_RotX(This,newVal)
#define IRubber_get_RotZ(This,pVal) (This)->lpVtbl->get_RotZ(This,pVal)
#define IRubber_put_RotZ(This,newVal) (This)->lpVtbl->put_RotZ(This,newVal)
#define IRubber_get_RotY(This,pVal) (This)->lpVtbl->get_RotY(This,pVal)
#define IRubber_put_RotY(This,newVal) (This)->lpVtbl->put_RotY(This,newVal)
#define IRubber_get_Material(This,pVal) (This)->lpVtbl->get_Material(This,pVal)
#define IRubber_put_Material(This,newVal) (This)->lpVtbl->put_Material(This,newVal)
#define IRubber_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IRubber_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IRubber_get_Elasticity(This,pVal) (This)->lpVtbl->get_Elasticity(This,pVal)
#define IRubber_put_Elasticity(This,newVal) (This)->lpVtbl->put_Elasticity(This,newVal)
#define IRubber_get_ElasticityFalloff(This,pVal) (This)->lpVtbl->get_ElasticityFalloff(This,pVal)
#define IRubber_put_ElasticityFalloff(This,newVal) (This)->lpVtbl->put_ElasticityFalloff(This,newVal)
#define IRubber_get_Collidable(This,pVal) (This)->lpVtbl->get_Collidable(This,pVal)
#define IRubber_put_Collidable(This,newVal) (This)->lpVtbl->put_Collidable(This,newVal)
#define IRubber_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IRubber_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IRubber_get_Friction(This,pVal) (This)->lpVtbl->get_Friction(This,pVal)
#define IRubber_put_Friction(This,newVal) (This)->lpVtbl->put_Friction(This,newVal)
#define IRubber_get_Scatter(This,pVal) (This)->lpVtbl->get_Scatter(This,pVal)
#define IRubber_put_Scatter(This,newVal) (This)->lpVtbl->put_Scatter(This,newVal)
#define IRubber_get_EnableStaticRendering(This,pVal) (This)->lpVtbl->get_EnableStaticRendering(This,pVal)
#define IRubber_put_EnableStaticRendering(This,newVal) (This)->lpVtbl->put_EnableStaticRendering(This,newVal)
#define IRubber_get_EnableShowInEditor(This,pVal) (This)->lpVtbl->get_EnableShowInEditor(This,pVal)
#define IRubber_put_EnableShowInEditor(This,newVal) (This)->lpVtbl->put_EnableShowInEditor(This,newVal)
#define IRubber_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IRubber_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IRubber_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IRubber_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IRubber_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IRubber_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IRubber_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IRubber_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IRubber_get_PhysicsMaterial(This,pVal) (This)->lpVtbl->get_PhysicsMaterial(This,pVal)
#define IRubber_put_PhysicsMaterial(This,newVal) (This)->lpVtbl->put_PhysicsMaterial(This,newVal)
#define IRubber_get_OverwritePhysics(This,pVal) (This)->lpVtbl->get_OverwritePhysics(This,pVal)
#define IRubber_put_OverwritePhysics(This,newVal) (This)->lpVtbl->put_OverwritePhysics(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRubber_QueryInterface(IRubber* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRubber_AddRef(IRubber* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRubber_Release(IRubber* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRubber_GetTypeInfoCount(IRubber* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRubber_GetTypeInfo(IRubber* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRubber_GetIDsOfNames(IRubber* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRubber_Invoke(IRubber* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IRubber methods ***/
static __WIDL_INLINE HRESULT IRubber_get_Name(IRubber* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Name(IRubber* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Height(IRubber* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Height(IRubber* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_HitHeight(IRubber* This,float *pVal) {
    return This->lpVtbl->get_HitHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_HitHeight(IRubber* This,float newVal) {
    return This->lpVtbl->put_HitHeight(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_HasHitEvent(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HasHitEvent(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_HasHitEvent(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HasHitEvent(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Thickness(IRubber* This,int *pVal) {
    return This->lpVtbl->get_Thickness(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Thickness(IRubber* This,int newVal) {
    return This->lpVtbl->put_Thickness(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_RotX(IRubber* This,float *pVal) {
    return This->lpVtbl->get_RotX(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_RotX(IRubber* This,float newVal) {
    return This->lpVtbl->put_RotX(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_RotZ(IRubber* This,float *pVal) {
    return This->lpVtbl->get_RotZ(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_RotZ(IRubber* This,float newVal) {
    return This->lpVtbl->put_RotZ(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_RotY(IRubber* This,float *pVal) {
    return This->lpVtbl->get_RotY(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_RotY(IRubber* This,float newVal) {
    return This->lpVtbl->put_RotY(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Material(IRubber* This,BSTR *pVal) {
    return This->lpVtbl->get_Material(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Material(IRubber* This,BSTR newVal) {
    return This->lpVtbl->put_Material(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Image(IRubber* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Image(IRubber* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Elasticity(IRubber* This,float *pVal) {
    return This->lpVtbl->get_Elasticity(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Elasticity(IRubber* This,float newVal) {
    return This->lpVtbl->put_Elasticity(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_ElasticityFalloff(IRubber* This,float *pVal) {
    return This->lpVtbl->get_ElasticityFalloff(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_ElasticityFalloff(IRubber* This,float newVal) {
    return This->lpVtbl->put_ElasticityFalloff(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Collidable(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Collidable(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Collidable(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Collidable(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Visible(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Visible(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Friction(IRubber* This,float *pVal) {
    return This->lpVtbl->get_Friction(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Friction(IRubber* This,float newVal) {
    return This->lpVtbl->put_Friction(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_Scatter(IRubber* This,float *pVal) {
    return This->lpVtbl->get_Scatter(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_Scatter(IRubber* This,float newVal) {
    return This->lpVtbl->put_Scatter(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_EnableStaticRendering(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableStaticRendering(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_EnableStaticRendering(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableStaticRendering(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_EnableShowInEditor(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_EnableShowInEditor(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_EnableShowInEditor(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_EnableShowInEditor(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_ReflectionEnabled(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_ReflectionEnabled(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_TimerEnabled(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_TimerEnabled(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_TimerInterval(IRubber* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_TimerInterval(IRubber* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_UserValue(IRubber* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_UserValue(IRubber* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_PhysicsMaterial(IRubber* This,BSTR *pVal) {
    return This->lpVtbl->get_PhysicsMaterial(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_PhysicsMaterial(IRubber* This,BSTR newVal) {
    return This->lpVtbl->put_PhysicsMaterial(This,newVal);
}
static __WIDL_INLINE HRESULT IRubber_get_OverwritePhysics(IRubber* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_OverwritePhysics(This,pVal);
}
static __WIDL_INLINE HRESULT IRubber_put_OverwritePhysics(IRubber* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_OverwritePhysics(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IRubber_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IBall interface
 */
#ifndef __IBall_INTERFACE_DEFINED__
#define __IBall_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBall, 0xce5e583f, 0x1264, 0x4927, 0x85,0x09, 0xb1,0x35,0x9c,0xb2,0x30,0x34);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ce5e583f-1264-4927-8509-b1359cb23034")
IBall : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VelX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VelX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VelY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VelY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Z(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Z(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VelZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_VelZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngVelX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngVelX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngVelY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngVelY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngVelZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngVelZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngMomX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngMomX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngMomY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngMomY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AngMomZ(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AngMomZ(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Color(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Color(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FrontDecal(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FrontDecal(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DecalMode(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DecalMode(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Mass(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Mass(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Radius(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Radius(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ID(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ID(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BulbIntensityScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BulbIntensityScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ReflectionEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ReflectionEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlayfieldReflectionScale(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlayfieldReflectionScale(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ForceReflection(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ForceReflection(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE DestroyBall(
        int *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBall, 0xce5e583f, 0x1264, 0x4927, 0x85,0x09, 0xb1,0x35,0x9c,0xb2,0x30,0x34)
#endif
#else
typedef struct IBallVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBall *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBall *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBall *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IBall *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IBall *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IBall *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IBall *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IBall methods ***/
    HRESULT (STDMETHODCALLTYPE *get_X)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_VelX)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_VelX)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_VelY)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_VelY)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Z)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Z)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_VelZ)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_VelZ)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngVelX)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngVelX)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngVelY)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngVelY)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngVelZ)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngVelZ)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngMomX)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngMomX)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngMomY)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngMomY)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_AngMomZ)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_AngMomZ)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Color)(
        IBall *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Color)(
        IBall *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IBall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IBall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_FrontDecal)(
        IBall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FrontDecal)(
        IBall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_DecalMode)(
        IBall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DecalMode)(
        IBall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IBall *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IBall *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_Mass)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Mass)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Radius)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Radius)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ID)(
        IBall *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ID)(
        IBall *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IBall *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IBall *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_BulbIntensityScale)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BulbIntensityScale)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ReflectionEnabled)(
        IBall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ReflectionEnabled)(
        IBall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_PlayfieldReflectionScale)(
        IBall *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_PlayfieldReflectionScale)(
        IBall *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_ForceReflection)(
        IBall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ForceReflection)(
        IBall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IBall *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IBall *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *DestroyBall)(
        IBall *This,
        int *pVal);

    END_INTERFACE
} IBallVtbl;

interface IBall {
    CONST_VTBL IBallVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBall_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBall_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBall_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IBall_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IBall_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IBall_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IBall_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IBall methods ***/
#define IBall_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IBall_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IBall_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IBall_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IBall_get_VelX(This,pVal) (This)->lpVtbl->get_VelX(This,pVal)
#define IBall_put_VelX(This,newVal) (This)->lpVtbl->put_VelX(This,newVal)
#define IBall_get_VelY(This,pVal) (This)->lpVtbl->get_VelY(This,pVal)
#define IBall_put_VelY(This,newVal) (This)->lpVtbl->put_VelY(This,newVal)
#define IBall_get_Z(This,pVal) (This)->lpVtbl->get_Z(This,pVal)
#define IBall_put_Z(This,newVal) (This)->lpVtbl->put_Z(This,newVal)
#define IBall_get_VelZ(This,pVal) (This)->lpVtbl->get_VelZ(This,pVal)
#define IBall_put_VelZ(This,newVal) (This)->lpVtbl->put_VelZ(This,newVal)
#define IBall_get_AngVelX(This,pVal) (This)->lpVtbl->get_AngVelX(This,pVal)
#define IBall_put_AngVelX(This,newVal) (This)->lpVtbl->put_AngVelX(This,newVal)
#define IBall_get_AngVelY(This,pVal) (This)->lpVtbl->get_AngVelY(This,pVal)
#define IBall_put_AngVelY(This,newVal) (This)->lpVtbl->put_AngVelY(This,newVal)
#define IBall_get_AngVelZ(This,pVal) (This)->lpVtbl->get_AngVelZ(This,pVal)
#define IBall_put_AngVelZ(This,newVal) (This)->lpVtbl->put_AngVelZ(This,newVal)
#define IBall_get_AngMomX(This,pVal) (This)->lpVtbl->get_AngMomX(This,pVal)
#define IBall_put_AngMomX(This,newVal) (This)->lpVtbl->put_AngMomX(This,newVal)
#define IBall_get_AngMomY(This,pVal) (This)->lpVtbl->get_AngMomY(This,pVal)
#define IBall_put_AngMomY(This,newVal) (This)->lpVtbl->put_AngMomY(This,newVal)
#define IBall_get_AngMomZ(This,pVal) (This)->lpVtbl->get_AngMomZ(This,pVal)
#define IBall_put_AngMomZ(This,newVal) (This)->lpVtbl->put_AngMomZ(This,newVal)
#define IBall_get_Color(This,pVal) (This)->lpVtbl->get_Color(This,pVal)
#define IBall_put_Color(This,newVal) (This)->lpVtbl->put_Color(This,newVal)
#define IBall_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IBall_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IBall_get_FrontDecal(This,pVal) (This)->lpVtbl->get_FrontDecal(This,pVal)
#define IBall_put_FrontDecal(This,newVal) (This)->lpVtbl->put_FrontDecal(This,newVal)
#define IBall_get_DecalMode(This,pVal) (This)->lpVtbl->get_DecalMode(This,pVal)
#define IBall_put_DecalMode(This,newVal) (This)->lpVtbl->put_DecalMode(This,newVal)
#define IBall_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IBall_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IBall_get_Mass(This,pVal) (This)->lpVtbl->get_Mass(This,pVal)
#define IBall_put_Mass(This,newVal) (This)->lpVtbl->put_Mass(This,newVal)
#define IBall_get_Radius(This,pVal) (This)->lpVtbl->get_Radius(This,pVal)
#define IBall_put_Radius(This,newVal) (This)->lpVtbl->put_Radius(This,newVal)
#define IBall_get_ID(This,pVal) (This)->lpVtbl->get_ID(This,pVal)
#define IBall_put_ID(This,newVal) (This)->lpVtbl->put_ID(This,newVal)
#define IBall_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IBall_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IBall_get_BulbIntensityScale(This,pVal) (This)->lpVtbl->get_BulbIntensityScale(This,pVal)
#define IBall_put_BulbIntensityScale(This,newVal) (This)->lpVtbl->put_BulbIntensityScale(This,newVal)
#define IBall_get_ReflectionEnabled(This,pVal) (This)->lpVtbl->get_ReflectionEnabled(This,pVal)
#define IBall_put_ReflectionEnabled(This,newVal) (This)->lpVtbl->put_ReflectionEnabled(This,newVal)
#define IBall_get_PlayfieldReflectionScale(This,pVal) (This)->lpVtbl->get_PlayfieldReflectionScale(This,pVal)
#define IBall_put_PlayfieldReflectionScale(This,newVal) (This)->lpVtbl->put_PlayfieldReflectionScale(This,newVal)
#define IBall_get_ForceReflection(This,pVal) (This)->lpVtbl->get_ForceReflection(This,pVal)
#define IBall_put_ForceReflection(This,newVal) (This)->lpVtbl->put_ForceReflection(This,newVal)
#define IBall_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IBall_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IBall_DestroyBall(This,pVal) (This)->lpVtbl->DestroyBall(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IBall_QueryInterface(IBall* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IBall_AddRef(IBall* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IBall_Release(IBall* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IBall_GetTypeInfoCount(IBall* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IBall_GetTypeInfo(IBall* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IBall_GetIDsOfNames(IBall* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IBall_Invoke(IBall* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IBall methods ***/
static __WIDL_INLINE HRESULT IBall_get_X(IBall* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_X(IBall* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Y(IBall* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Y(IBall* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_VelX(IBall* This,float *pVal) {
    return This->lpVtbl->get_VelX(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_VelX(IBall* This,float newVal) {
    return This->lpVtbl->put_VelX(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_VelY(IBall* This,float *pVal) {
    return This->lpVtbl->get_VelY(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_VelY(IBall* This,float newVal) {
    return This->lpVtbl->put_VelY(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Z(IBall* This,float *pVal) {
    return This->lpVtbl->get_Z(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Z(IBall* This,float newVal) {
    return This->lpVtbl->put_Z(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_VelZ(IBall* This,float *pVal) {
    return This->lpVtbl->get_VelZ(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_VelZ(IBall* This,float newVal) {
    return This->lpVtbl->put_VelZ(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngVelX(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngVelX(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngVelX(IBall* This,float newVal) {
    return This->lpVtbl->put_AngVelX(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngVelY(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngVelY(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngVelY(IBall* This,float newVal) {
    return This->lpVtbl->put_AngVelY(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngVelZ(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngVelZ(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngVelZ(IBall* This,float newVal) {
    return This->lpVtbl->put_AngVelZ(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngMomX(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngMomX(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngMomX(IBall* This,float newVal) {
    return This->lpVtbl->put_AngMomX(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngMomY(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngMomY(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngMomY(IBall* This,float newVal) {
    return This->lpVtbl->put_AngMomY(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_AngMomZ(IBall* This,float *pVal) {
    return This->lpVtbl->get_AngMomZ(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_AngMomZ(IBall* This,float newVal) {
    return This->lpVtbl->put_AngMomZ(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Color(IBall* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_Color(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Color(IBall* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_Color(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Image(IBall* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Image(IBall* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_FrontDecal(IBall* This,BSTR *pVal) {
    return This->lpVtbl->get_FrontDecal(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_FrontDecal(IBall* This,BSTR newVal) {
    return This->lpVtbl->put_FrontDecal(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_DecalMode(IBall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DecalMode(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_DecalMode(IBall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DecalMode(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_UserValue(IBall* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_UserValue(IBall* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Mass(IBall* This,float *pVal) {
    return This->lpVtbl->get_Mass(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Mass(IBall* This,float newVal) {
    return This->lpVtbl->put_Mass(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Radius(IBall* This,float *pVal) {
    return This->lpVtbl->get_Radius(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Radius(IBall* This,float newVal) {
    return This->lpVtbl->put_Radius(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_ID(IBall* This,int *pVal) {
    return This->lpVtbl->get_ID(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_ID(IBall* This,int newVal) {
    return This->lpVtbl->put_ID(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Name(IBall* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Name(IBall* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_BulbIntensityScale(IBall* This,float *pVal) {
    return This->lpVtbl->get_BulbIntensityScale(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_BulbIntensityScale(IBall* This,float newVal) {
    return This->lpVtbl->put_BulbIntensityScale(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_ReflectionEnabled(IBall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ReflectionEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_ReflectionEnabled(IBall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ReflectionEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_PlayfieldReflectionScale(IBall* This,float *pVal) {
    return This->lpVtbl->get_PlayfieldReflectionScale(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_PlayfieldReflectionScale(IBall* This,float newVal) {
    return This->lpVtbl->put_PlayfieldReflectionScale(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_ForceReflection(IBall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ForceReflection(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_ForceReflection(IBall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ForceReflection(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_get_Visible(IBall* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IBall_put_Visible(IBall* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IBall_DestroyBall(IBall* This,int *pVal) {
    return This->lpVtbl->DestroyBall(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IBall_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRampEvents dispinterface
 */
#ifndef __IRampEvents_DISPINTERFACE_DEFINED__
#define __IRampEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IRampEvents, 0x4392878d, 0x6b34, 0x404e, 0x8c,0xe5, 0xbd,0x36,0x8c,0x60,0x13,0x3a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4392878d-6b34-404e-8ce5-bd368c60133a")
IRampEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRampEvents, 0x4392878d, 0x6b34, 0x404e, 0x8c,0xe5, 0xbd,0x36,0x8c,0x60,0x13,0x3a)
#endif
#else
typedef struct IRampEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRampEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRampEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRampEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRampEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRampEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRampEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRampEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IRampEventsVtbl;

interface IRampEvents {
    CONST_VTBL IRampEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRampEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRampEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRampEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRampEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRampEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRampEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRampEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRampEvents_QueryInterface(IRampEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRampEvents_AddRef(IRampEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRampEvents_Release(IRampEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRampEvents_GetTypeInfoCount(IRampEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRampEvents_GetTypeInfo(IRampEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRampEvents_GetIDsOfNames(IRampEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRampEvents_Invoke(IRampEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IRampEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IFlasherEvents dispinterface
 */
#ifndef __IFlasherEvents_DISPINTERFACE_DEFINED__
#define __IFlasherEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IFlasherEvents, 0xac861bd8, 0xa2bb, 0x4d29, 0x9e,0xc5, 0xa8,0xe9,0xc4,0x9d,0x80,0xfb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ac861bd8-a2bb-4d29-9ec5-a8e9c49d80fb")
IFlasherEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFlasherEvents, 0xac861bd8, 0xa2bb, 0x4d29, 0x9e,0xc5, 0xa8,0xe9,0xc4,0x9d,0x80,0xfb)
#endif
#else
typedef struct IFlasherEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFlasherEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFlasherEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFlasherEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFlasherEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFlasherEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFlasherEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFlasherEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IFlasherEventsVtbl;

interface IFlasherEvents {
    CONST_VTBL IFlasherEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFlasherEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFlasherEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFlasherEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFlasherEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFlasherEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFlasherEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFlasherEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFlasherEvents_QueryInterface(IFlasherEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFlasherEvents_AddRef(IFlasherEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFlasherEvents_Release(IFlasherEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFlasherEvents_GetTypeInfoCount(IFlasherEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFlasherEvents_GetTypeInfo(IFlasherEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFlasherEvents_GetIDsOfNames(IFlasherEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFlasherEvents_Invoke(IFlasherEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IFlasherEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IRubberEvents dispinterface
 */
#ifndef __IRubberEvents_DISPINTERFACE_DEFINED__
#define __IRubberEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IRubberEvents, 0x710ddcd8, 0x919c, 0x4b04, 0x81,0x5b, 0x4f,0xa8,0xa9,0x50,0xb8,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("710ddcd8-919c-4b04-815b-4fa8a950b869")
IRubberEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRubberEvents, 0x710ddcd8, 0x919c, 0x4b04, 0x81,0x5b, 0x4f,0xa8,0xa9,0x50,0xb8,0x69)
#endif
#else
typedef struct IRubberEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRubberEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRubberEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRubberEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRubberEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRubberEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRubberEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRubberEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IRubberEventsVtbl;

interface IRubberEvents {
    CONST_VTBL IRubberEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRubberEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRubberEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRubberEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRubberEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRubberEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRubberEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRubberEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRubberEvents_QueryInterface(IRubberEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRubberEvents_AddRef(IRubberEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRubberEvents_Release(IRubberEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRubberEvents_GetTypeInfoCount(IRubberEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRubberEvents_GetTypeInfo(IRubberEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRubberEvents_GetIDsOfNames(IRubberEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRubberEvents_Invoke(IRubberEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IRubberEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IDispReel interface
 */
#ifndef __IDispReel_INTERFACE_DEFINED__
#define __IDispReel_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDispReel, 0x35265276, 0x0c22, 0x4195, 0x8f,0x2e, 0x71,0x22,0x70,0x38,0x14,0xb8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("35265276-0c22-4195-8f2e-7122703814b8")
IDispReel : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_BackColor(
        OLE_COLOR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackColor(
        OLE_COLOR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Image(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Image(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Reels(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Reels(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Spacing(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Spacing(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsTransparent(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IsTransparent(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Sound(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Sound(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Steps(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Steps(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_X(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_X(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Y(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Y(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Range(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Range(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UpdateInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UpdateInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UseImageGrid(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UseImageGrid(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Visible(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Visible(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ImagesPerGridRow(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ImagesPerGridRow(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddValue(
        long Value) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetToZero(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SpinReel(
        long ReelNumber,
        long PulseCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetValue(
        long Value) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDispReel, 0x35265276, 0x0c22, 0x4195, 0x8f,0x2e, 0x71,0x22,0x70,0x38,0x14,0xb8)
#endif
#else
typedef struct IDispReelVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDispReel *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDispReel *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDispReel *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDispReel *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDispReel *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDispReel *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDispReel *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDispReel methods ***/
    HRESULT (STDMETHODCALLTYPE *get_BackColor)(
        IDispReel *This,
        OLE_COLOR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_BackColor)(
        IDispReel *This,
        OLE_COLOR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Image)(
        IDispReel *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Image)(
        IDispReel *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Reels)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Reels)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Spacing)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Spacing)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_IsTransparent)(
        IDispReel *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IsTransparent)(
        IDispReel *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Sound)(
        IDispReel *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Sound)(
        IDispReel *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Steps)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Steps)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        IDispReel *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        IDispReel *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        IDispReel *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        IDispReel *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_X)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_X)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Y)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Y)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Range)(
        IDispReel *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Range)(
        IDispReel *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IDispReel *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IDispReel *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_UpdateInterval)(
        IDispReel *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UpdateInterval)(
        IDispReel *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        IDispReel *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        IDispReel *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *get_UseImageGrid)(
        IDispReel *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UseImageGrid)(
        IDispReel *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Visible)(
        IDispReel *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Visible)(
        IDispReel *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ImagesPerGridRow)(
        IDispReel *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ImagesPerGridRow)(
        IDispReel *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *AddValue)(
        IDispReel *This,
        long Value);

    HRESULT (STDMETHODCALLTYPE *ResetToZero)(
        IDispReel *This);

    HRESULT (STDMETHODCALLTYPE *SpinReel)(
        IDispReel *This,
        long ReelNumber,
        long PulseCount);

    HRESULT (STDMETHODCALLTYPE *SetValue)(
        IDispReel *This,
        long Value);

    END_INTERFACE
} IDispReelVtbl;

interface IDispReel {
    CONST_VTBL IDispReelVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDispReel_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDispReel_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDispReel_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDispReel_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDispReel_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDispReel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDispReel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDispReel methods ***/
#define IDispReel_get_BackColor(This,pVal) (This)->lpVtbl->get_BackColor(This,pVal)
#define IDispReel_put_BackColor(This,newVal) (This)->lpVtbl->put_BackColor(This,newVal)
#define IDispReel_get_Image(This,pVal) (This)->lpVtbl->get_Image(This,pVal)
#define IDispReel_put_Image(This,newVal) (This)->lpVtbl->put_Image(This,newVal)
#define IDispReel_get_Reels(This,pVal) (This)->lpVtbl->get_Reels(This,pVal)
#define IDispReel_put_Reels(This,newVal) (This)->lpVtbl->put_Reels(This,newVal)
#define IDispReel_get_Width(This,pVal) (This)->lpVtbl->get_Width(This,pVal)
#define IDispReel_put_Width(This,newVal) (This)->lpVtbl->put_Width(This,newVal)
#define IDispReel_get_Height(This,pVal) (This)->lpVtbl->get_Height(This,pVal)
#define IDispReel_put_Height(This,newVal) (This)->lpVtbl->put_Height(This,newVal)
#define IDispReel_get_Spacing(This,pVal) (This)->lpVtbl->get_Spacing(This,pVal)
#define IDispReel_put_Spacing(This,newVal) (This)->lpVtbl->put_Spacing(This,newVal)
#define IDispReel_get_IsTransparent(This,pVal) (This)->lpVtbl->get_IsTransparent(This,pVal)
#define IDispReel_put_IsTransparent(This,newVal) (This)->lpVtbl->put_IsTransparent(This,newVal)
#define IDispReel_get_Sound(This,pVal) (This)->lpVtbl->get_Sound(This,pVal)
#define IDispReel_put_Sound(This,newVal) (This)->lpVtbl->put_Sound(This,newVal)
#define IDispReel_get_Steps(This,pVal) (This)->lpVtbl->get_Steps(This,pVal)
#define IDispReel_put_Steps(This,newVal) (This)->lpVtbl->put_Steps(This,newVal)
#define IDispReel_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define IDispReel_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define IDispReel_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define IDispReel_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define IDispReel_get_X(This,pVal) (This)->lpVtbl->get_X(This,pVal)
#define IDispReel_put_X(This,newVal) (This)->lpVtbl->put_X(This,newVal)
#define IDispReel_get_Y(This,pVal) (This)->lpVtbl->get_Y(This,pVal)
#define IDispReel_put_Y(This,newVal) (This)->lpVtbl->put_Y(This,newVal)
#define IDispReel_get_Range(This,pVal) (This)->lpVtbl->get_Range(This,pVal)
#define IDispReel_put_Range(This,newVal) (This)->lpVtbl->put_Range(This,newVal)
#define IDispReel_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IDispReel_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define IDispReel_get_UpdateInterval(This,pVal) (This)->lpVtbl->get_UpdateInterval(This,pVal)
#define IDispReel_put_UpdateInterval(This,newVal) (This)->lpVtbl->put_UpdateInterval(This,newVal)
#define IDispReel_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define IDispReel_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define IDispReel_get_UseImageGrid(This,pVal) (This)->lpVtbl->get_UseImageGrid(This,pVal)
#define IDispReel_put_UseImageGrid(This,newVal) (This)->lpVtbl->put_UseImageGrid(This,newVal)
#define IDispReel_get_Visible(This,pVal) (This)->lpVtbl->get_Visible(This,pVal)
#define IDispReel_put_Visible(This,newVal) (This)->lpVtbl->put_Visible(This,newVal)
#define IDispReel_get_ImagesPerGridRow(This,pVal) (This)->lpVtbl->get_ImagesPerGridRow(This,pVal)
#define IDispReel_put_ImagesPerGridRow(This,newVal) (This)->lpVtbl->put_ImagesPerGridRow(This,newVal)
#define IDispReel_AddValue(This,Value) (This)->lpVtbl->AddValue(This,Value)
#define IDispReel_ResetToZero(This) (This)->lpVtbl->ResetToZero(This)
#define IDispReel_SpinReel(This,ReelNumber,PulseCount) (This)->lpVtbl->SpinReel(This,ReelNumber,PulseCount)
#define IDispReel_SetValue(This,Value) (This)->lpVtbl->SetValue(This,Value)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDispReel_QueryInterface(IDispReel* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDispReel_AddRef(IDispReel* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDispReel_Release(IDispReel* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IDispReel_GetTypeInfoCount(IDispReel* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IDispReel_GetTypeInfo(IDispReel* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IDispReel_GetIDsOfNames(IDispReel* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IDispReel_Invoke(IDispReel* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDispReel methods ***/
static __WIDL_INLINE HRESULT IDispReel_get_BackColor(IDispReel* This,OLE_COLOR *pVal) {
    return This->lpVtbl->get_BackColor(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_BackColor(IDispReel* This,OLE_COLOR newVal) {
    return This->lpVtbl->put_BackColor(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Image(IDispReel* This,BSTR *pVal) {
    return This->lpVtbl->get_Image(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Image(IDispReel* This,BSTR newVal) {
    return This->lpVtbl->put_Image(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Reels(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Reels(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Reels(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Reels(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Width(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Width(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Width(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Width(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Height(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Height(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Height(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Height(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Spacing(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Spacing(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Spacing(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Spacing(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_IsTransparent(IDispReel* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsTransparent(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_IsTransparent(IDispReel* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IsTransparent(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Sound(IDispReel* This,BSTR *pVal) {
    return This->lpVtbl->get_Sound(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Sound(IDispReel* This,BSTR newVal) {
    return This->lpVtbl->put_Sound(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Steps(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Steps(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Steps(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Steps(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_TimerEnabled(IDispReel* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_TimerEnabled(IDispReel* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_TimerInterval(IDispReel* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_TimerInterval(IDispReel* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_X(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_X(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_X(IDispReel* This,float newVal) {
    return This->lpVtbl->put_X(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Y(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Y(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Y(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Y(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Range(IDispReel* This,float *pVal) {
    return This->lpVtbl->get_Range(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Range(IDispReel* This,float newVal) {
    return This->lpVtbl->put_Range(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Name(IDispReel* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Name(IDispReel* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_UpdateInterval(IDispReel* This,long *pVal) {
    return This->lpVtbl->get_UpdateInterval(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_UpdateInterval(IDispReel* This,long newVal) {
    return This->lpVtbl->put_UpdateInterval(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_UserValue(IDispReel* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_UserValue(IDispReel* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_UseImageGrid(IDispReel* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_UseImageGrid(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_UseImageGrid(IDispReel* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_UseImageGrid(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_Visible(IDispReel* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Visible(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_Visible(IDispReel* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Visible(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_get_ImagesPerGridRow(IDispReel* This,long *pVal) {
    return This->lpVtbl->get_ImagesPerGridRow(This,pVal);
}
static __WIDL_INLINE HRESULT IDispReel_put_ImagesPerGridRow(IDispReel* This,long newVal) {
    return This->lpVtbl->put_ImagesPerGridRow(This,newVal);
}
static __WIDL_INLINE HRESULT IDispReel_AddValue(IDispReel* This,long Value) {
    return This->lpVtbl->AddValue(This,Value);
}
static __WIDL_INLINE HRESULT IDispReel_ResetToZero(IDispReel* This) {
    return This->lpVtbl->ResetToZero(This);
}
static __WIDL_INLINE HRESULT IDispReel_SpinReel(IDispReel* This,long ReelNumber,long PulseCount) {
    return This->lpVtbl->SpinReel(This,ReelNumber,PulseCount);
}
static __WIDL_INLINE HRESULT IDispReel_SetValue(IDispReel* This,long Value) {
    return This->lpVtbl->SetValue(This,Value);
}
#endif
#endif

#endif


#endif  /* __IDispReel_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDispReelEvents dispinterface
 */
#ifndef __IDispReelEvents_DISPINTERFACE_DEFINED__
#define __IDispReelEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IDispReelEvents, 0x416d3717, 0x1f94, 0x4dae, 0x86,0xff, 0x67,0xea,0x11,0x12,0x85,0x97);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("416d3717-1f94-4dae-86ff-67ea11128597")
IDispReelEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDispReelEvents, 0x416d3717, 0x1f94, 0x4dae, 0x86,0xff, 0x67,0xea,0x11,0x12,0x85,0x97)
#endif
#else
typedef struct IDispReelEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDispReelEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDispReelEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDispReelEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDispReelEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDispReelEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDispReelEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDispReelEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IDispReelEventsVtbl;

interface IDispReelEvents {
    CONST_VTBL IDispReelEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDispReelEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDispReelEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDispReelEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDispReelEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDispReelEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDispReelEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDispReelEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDispReelEvents_QueryInterface(IDispReelEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDispReelEvents_AddRef(IDispReelEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDispReelEvents_Release(IDispReelEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IDispReelEvents_GetTypeInfoCount(IDispReelEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IDispReelEvents_GetTypeInfo(IDispReelEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IDispReelEvents_GetIDsOfNames(IDispReelEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IDispReelEvents_Invoke(IDispReelEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IDispReelEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ILightSeq interface
 */
#ifndef __ILightSeq_INTERFACE_DEFINED__
#define __ILightSeq_INTERFACE_DEFINED__

DEFINE_GUID(IID_ILightSeq, 0x4f9b83a5, 0xf165, 0x4411, 0x83,0xfd, 0x48,0xee,0xea,0xad,0x43,0xa4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4f9b83a5-f165-4411-83fd-48eeeaad43a4")
ILightSeq : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Collection(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Collection(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CenterX(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CenterX(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CenterY(
        float *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CenterY(
        float newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UpdateInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UpdateInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerEnabled(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerEnabled(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(
        long *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TimerInterval(
        long newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserValue(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserValue(
        VARIANT *newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Play(
        SequencerState Animation,
        long TailLength = 0,
        long Repeat = 1,
        long Pause = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE StopPlay(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILightSeq, 0x4f9b83a5, 0xf165, 0x4411, 0x83,0xfd, 0x48,0xee,0xea,0xad,0x43,0xa4)
#endif
#else
typedef struct ILightSeqVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILightSeq *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILightSeq *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILightSeq *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ILightSeq *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ILightSeq *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ILightSeq *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ILightSeq *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ILightSeq methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ILightSeq *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ILightSeq *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Collection)(
        ILightSeq *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Collection)(
        ILightSeq *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_CenterX)(
        ILightSeq *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CenterX)(
        ILightSeq *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_CenterY)(
        ILightSeq *This,
        float *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CenterY)(
        ILightSeq *This,
        float newVal);

    HRESULT (STDMETHODCALLTYPE *get_UpdateInterval)(
        ILightSeq *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UpdateInterval)(
        ILightSeq *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerEnabled)(
        ILightSeq *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerEnabled)(
        ILightSeq *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_TimerInterval)(
        ILightSeq *This,
        long *pVal);

    HRESULT (STDMETHODCALLTYPE *put_TimerInterval)(
        ILightSeq *This,
        long newVal);

    HRESULT (STDMETHODCALLTYPE *get_UserValue)(
        ILightSeq *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_UserValue)(
        ILightSeq *This,
        VARIANT *newVal);

    HRESULT (STDMETHODCALLTYPE *Play)(
        ILightSeq *This,
        SequencerState Animation,
        long TailLength,
        long Repeat,
        long Pause);

    HRESULT (STDMETHODCALLTYPE *StopPlay)(
        ILightSeq *This);

    END_INTERFACE
} ILightSeqVtbl;

interface ILightSeq {
    CONST_VTBL ILightSeqVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILightSeq_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILightSeq_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILightSeq_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ILightSeq_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ILightSeq_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ILightSeq_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ILightSeq_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ILightSeq methods ***/
#define ILightSeq_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define ILightSeq_put_Name(This,newVal) (This)->lpVtbl->put_Name(This,newVal)
#define ILightSeq_get_Collection(This,pVal) (This)->lpVtbl->get_Collection(This,pVal)
#define ILightSeq_put_Collection(This,newVal) (This)->lpVtbl->put_Collection(This,newVal)
#define ILightSeq_get_CenterX(This,pVal) (This)->lpVtbl->get_CenterX(This,pVal)
#define ILightSeq_put_CenterX(This,newVal) (This)->lpVtbl->put_CenterX(This,newVal)
#define ILightSeq_get_CenterY(This,pVal) (This)->lpVtbl->get_CenterY(This,pVal)
#define ILightSeq_put_CenterY(This,newVal) (This)->lpVtbl->put_CenterY(This,newVal)
#define ILightSeq_get_UpdateInterval(This,pVal) (This)->lpVtbl->get_UpdateInterval(This,pVal)
#define ILightSeq_put_UpdateInterval(This,newVal) (This)->lpVtbl->put_UpdateInterval(This,newVal)
#define ILightSeq_get_TimerEnabled(This,pVal) (This)->lpVtbl->get_TimerEnabled(This,pVal)
#define ILightSeq_put_TimerEnabled(This,newVal) (This)->lpVtbl->put_TimerEnabled(This,newVal)
#define ILightSeq_get_TimerInterval(This,pVal) (This)->lpVtbl->get_TimerInterval(This,pVal)
#define ILightSeq_put_TimerInterval(This,newVal) (This)->lpVtbl->put_TimerInterval(This,newVal)
#define ILightSeq_get_UserValue(This,pVal) (This)->lpVtbl->get_UserValue(This,pVal)
#define ILightSeq_put_UserValue(This,newVal) (This)->lpVtbl->put_UserValue(This,newVal)
#define ILightSeq_Play(This,Animation,TailLength,Repeat,Pause) (This)->lpVtbl->Play(This,Animation,TailLength,Repeat,Pause)
#define ILightSeq_StopPlay(This) (This)->lpVtbl->StopPlay(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ILightSeq_QueryInterface(ILightSeq* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ILightSeq_AddRef(ILightSeq* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ILightSeq_Release(ILightSeq* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ILightSeq_GetTypeInfoCount(ILightSeq* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ILightSeq_GetTypeInfo(ILightSeq* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ILightSeq_GetIDsOfNames(ILightSeq* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ILightSeq_Invoke(ILightSeq* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ILightSeq methods ***/
static __WIDL_INLINE HRESULT ILightSeq_get_Name(ILightSeq* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_Name(ILightSeq* This,BSTR newVal) {
    return This->lpVtbl->put_Name(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_Collection(ILightSeq* This,BSTR *pVal) {
    return This->lpVtbl->get_Collection(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_Collection(ILightSeq* This,BSTR newVal) {
    return This->lpVtbl->put_Collection(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_CenterX(ILightSeq* This,float *pVal) {
    return This->lpVtbl->get_CenterX(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_CenterX(ILightSeq* This,float newVal) {
    return This->lpVtbl->put_CenterX(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_CenterY(ILightSeq* This,float *pVal) {
    return This->lpVtbl->get_CenterY(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_CenterY(ILightSeq* This,float newVal) {
    return This->lpVtbl->put_CenterY(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_UpdateInterval(ILightSeq* This,long *pVal) {
    return This->lpVtbl->get_UpdateInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_UpdateInterval(ILightSeq* This,long newVal) {
    return This->lpVtbl->put_UpdateInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_TimerEnabled(ILightSeq* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_TimerEnabled(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_TimerEnabled(ILightSeq* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_TimerEnabled(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_TimerInterval(ILightSeq* This,long *pVal) {
    return This->lpVtbl->get_TimerInterval(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_TimerInterval(ILightSeq* This,long newVal) {
    return This->lpVtbl->put_TimerInterval(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_get_UserValue(ILightSeq* This,VARIANT *pVal) {
    return This->lpVtbl->get_UserValue(This,pVal);
}
static __WIDL_INLINE HRESULT ILightSeq_put_UserValue(ILightSeq* This,VARIANT *newVal) {
    return This->lpVtbl->put_UserValue(This,newVal);
}
static __WIDL_INLINE HRESULT ILightSeq_Play(ILightSeq* This,SequencerState Animation,long TailLength,long Repeat,long Pause) {
    return This->lpVtbl->Play(This,Animation,TailLength,Repeat,Pause);
}
static __WIDL_INLINE HRESULT ILightSeq_StopPlay(ILightSeq* This) {
    return This->lpVtbl->StopPlay(This);
}
#endif
#endif

#endif


#endif  /* __ILightSeq_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ILightSeqEvents dispinterface
 */
#ifndef __ILightSeqEvents_DISPINTERFACE_DEFINED__
#define __ILightSeqEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_ILightSeqEvents, 0xfe6b6615, 0x41b1, 0x4e34, 0xa3,0x7f, 0x44,0x7a,0xe1,0xb7,0x08,0x53);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fe6b6615-41b1-4e34-a37f-447ae1b70853")
ILightSeqEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILightSeqEvents, 0xfe6b6615, 0x41b1, 0x4e34, 0xa3,0x7f, 0x44,0x7a,0xe1,0xb7,0x08,0x53)
#endif
#else
typedef struct ILightSeqEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILightSeqEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILightSeqEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILightSeqEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ILightSeqEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ILightSeqEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ILightSeqEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ILightSeqEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ILightSeqEventsVtbl;

interface ILightSeqEvents {
    CONST_VTBL ILightSeqEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILightSeqEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILightSeqEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILightSeqEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ILightSeqEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ILightSeqEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ILightSeqEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ILightSeqEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ILightSeqEvents_QueryInterface(ILightSeqEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ILightSeqEvents_AddRef(ILightSeqEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ILightSeqEvents_Release(ILightSeqEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ILightSeqEvents_GetTypeInfoCount(ILightSeqEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ILightSeqEvents_GetTypeInfo(ILightSeqEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ILightSeqEvents_GetIDsOfNames(ILightSeqEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ILightSeqEvents_Invoke(ILightSeqEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __ILightSeqEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Table coclass
 */

DEFINE_GUID(CLSID_Table, 0x8a942b56, 0xf305, 0x468d, 0x97,0xb3, 0xf1,0x00,0x92,0x14,0x87,0xc5);

#ifdef __cplusplus
class DECLSPEC_UUID("8a942b56-f305-468d-97b3-f100921487c5") Table;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Table, 0x8a942b56, 0xf305, 0x468d, 0x97,0xb3, 0xf1,0x00,0x92,0x14,0x87,0xc5)
#endif
#endif

/*****************************************************************************
 * Wall coclass
 */

DEFINE_GUID(CLSID_Wall, 0xcf3b5615, 0x2271, 0x4fe4, 0xa1,0xbf, 0xe7,0x7d,0x81,0xb8,0x8c,0x5d);

#ifdef __cplusplus
class DECLSPEC_UUID("cf3b5615-2271-4fe4-a1bf-e77d81b88c5d") Wall;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Wall, 0xcf3b5615, 0x2271, 0x4fe4, 0xa1,0xbf, 0xe7,0x7d,0x81,0xb8,0x8c,0x5d)
#endif
#endif

/*****************************************************************************
 * DragPoint coclass
 */

DEFINE_GUID(CLSID_DragPoint, 0x83296774, 0xcaa2, 0x4a0d, 0xb3,0x30, 0x98,0xda,0x64,0x95,0xdf,0xe0);

#ifdef __cplusplus
class DECLSPEC_UUID("83296774-caa2-4a0d-b330-98da6495dfe0") DragPoint;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(DragPoint, 0x83296774, 0xcaa2, 0x4a0d, 0xb3,0x30, 0x98,0xda,0x64,0x95,0xdf,0xe0)
#endif
#endif

/*****************************************************************************
 * Flipper coclass
 */

DEFINE_GUID(CLSID_Flipper, 0x68ab2bbc, 0x8209, 0x40f3, 0xb6,0xf4, 0x54,0xf8,0xad,0xaa,0x0d,0xc7);

#ifdef __cplusplus
class DECLSPEC_UUID("68ab2bbc-8209-40f3-b6f4-54f8adaa0dc7") Flipper;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Flipper, 0x68ab2bbc, 0x8209, 0x40f3, 0xb6,0xf4, 0x54,0xf8,0xad,0xaa,0x0d,0xc7)
#endif
#endif

/*****************************************************************************
 * Timer coclass
 */

DEFINE_GUID(CLSID_Timer, 0xa0b914e6, 0x56a8, 0x4cc1, 0xa8,0x46, 0x45,0xff,0xf4,0xd8,0xca,0x17);

#ifdef __cplusplus
class DECLSPEC_UUID("a0b914e6-56a8-4cc1-a846-45fff4d8ca17") Timer;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Timer, 0xa0b914e6, 0x56a8, 0x4cc1, 0xa8,0x46, 0x45,0xff,0xf4,0xd8,0xca,0x17)
#endif
#endif

/*****************************************************************************
 * Plunger coclass
 */

DEFINE_GUID(CLSID_Plunger, 0x4c43960f, 0xe04c, 0x4a51, 0x9f,0xbd, 0x83,0xae,0x50,0xee,0xcc,0x7b);

#ifdef __cplusplus
class DECLSPEC_UUID("4c43960f-e04c-4a51-9fbd-83ae50eecc7b") Plunger;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Plunger, 0x4c43960f, 0xe04c, 0x4a51, 0x9f,0xbd, 0x83,0xae,0x50,0xee,0xcc,0x7b)
#endif
#endif

/*****************************************************************************
 * Textbox coclass
 */

DEFINE_GUID(CLSID_Textbox, 0xcb6071d5, 0xe0e5, 0x4cf9, 0xb1,0x14, 0xbb,0x84,0xea,0x70,0x1e,0x9c);

#ifdef __cplusplus
class DECLSPEC_UUID("cb6071d5-e0e5-4cf9-b114-bb84ea701e9c") Textbox;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Textbox, 0xcb6071d5, 0xe0e5, 0x4cf9, 0xb1,0x14, 0xbb,0x84,0xea,0x70,0x1e,0x9c)
#endif
#endif

/*****************************************************************************
 * Bumper coclass
 */

DEFINE_GUID(CLSID_Bumper, 0xc242ddff, 0x0d79, 0x4c56, 0x96,0x7f, 0x76,0x5a,0x30,0xde,0x8e,0xd6);

#ifdef __cplusplus
class DECLSPEC_UUID("c242ddff-0d79-4c56-967f-765a30de8ed6") Bumper;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Bumper, 0xc242ddff, 0x0d79, 0x4c56, 0x96,0x7f, 0x76,0x5a,0x30,0xde,0x8e,0xd6)
#endif
#endif

/*****************************************************************************
 * Trigger coclass
 */

DEFINE_GUID(CLSID_Trigger, 0x44d58c78, 0x14ba, 0x47f3, 0xb8,0x2c, 0x42,0x58,0x53,0xab,0xb6,0x98);

#ifdef __cplusplus
class DECLSPEC_UUID("44d58c78-14ba-47f3-b82c-425853abb698") Trigger;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Trigger, 0x44d58c78, 0x14ba, 0x47f3, 0xb8,0x2c, 0x42,0x58,0x53,0xab,0xb6,0x98)
#endif
#endif

/*****************************************************************************
 * Light coclass
 */

DEFINE_GUID(CLSID_Light, 0x31dd37e7, 0xdb9b, 0x4ab1, 0x94,0xc9, 0xfa,0xa0,0x6b,0x25,0x2d,0xfa);

#ifdef __cplusplus
class DECLSPEC_UUID("31dd37e7-db9b-4ab1-94c9-faa06b252dfa") Light;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Light, 0x31dd37e7, 0xdb9b, 0x4ab1, 0x94,0xc9, 0xfa,0xa0,0x6b,0x25,0x2d,0xfa)
#endif
#endif

/*****************************************************************************
 * Kicker coclass
 */

DEFINE_GUID(CLSID_Kicker, 0x498eb992, 0xc01f, 0x4cd4, 0xb7,0x10, 0xe4,0xe1,0xd2,0x68,0xc9,0x94);

#ifdef __cplusplus
class DECLSPEC_UUID("498eb992-c01f-4cd4-b710-e4e1d268c994") Kicker;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Kicker, 0x498eb992, 0xc01f, 0x4cd4, 0xb7,0x10, 0xe4,0xe1,0xd2,0x68,0xc9,0x94)
#endif
#endif

/*****************************************************************************
 * Gate coclass
 */

DEFINE_GUID(CLSID_Gate, 0x5692b7a1, 0xb753, 0x4f59, 0xa9,0xf9, 0x8e,0xe8,0x5e,0x1a,0x1c,0x3d);

#ifdef __cplusplus
class DECLSPEC_UUID("5692b7a1-b753-4f59-a9f9-8ee85e1a1c3d") Gate;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Gate, 0x5692b7a1, 0xb753, 0x4f59, 0xa9,0xf9, 0x8e,0xe8,0x5e,0x1a,0x1c,0x3d)
#endif
#endif

/*****************************************************************************
 * Spinner coclass
 */

DEFINE_GUID(CLSID_Spinner, 0x355fa5ff, 0xdb59, 0x4d94, 0x99,0xe3, 0x16,0xd3,0xb9,0x93,0xd6,0xb5);

#ifdef __cplusplus
class DECLSPEC_UUID("355fa5ff-db59-4d94-99e3-16d3b993d6b5") Spinner;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Spinner, 0x355fa5ff, 0xdb59, 0x4d94, 0x99,0xe3, 0x16,0xd3,0xb9,0x93,0xd6,0xb5)
#endif
#endif

/*****************************************************************************
 * Ramp coclass
 */

DEFINE_GUID(CLSID_Ramp, 0x374f02b0, 0x57a4, 0x40bc, 0x87,0x30, 0xd3,0x51,0xc8,0x58,0xb9,0xd3);

#ifdef __cplusplus
class DECLSPEC_UUID("374f02b0-57a4-40bc-8730-d351c858b9d3") Ramp;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Ramp, 0x374f02b0, 0x57a4, 0x40bc, 0x87,0x30, 0xd3,0x51,0xc8,0x58,0xb9,0xd3)
#endif
#endif

/*****************************************************************************
 * Flasher coclass
 */

DEFINE_GUID(CLSID_Flasher, 0x847b5f6c, 0x65dc, 0x4b3a, 0xa7,0x21, 0xb8,0xf9,0x31,0xc2,0x31,0x33);

#ifdef __cplusplus
class DECLSPEC_UUID("847b5f6c-65dc-4b3a-a721-b8f931c23133") Flasher;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Flasher, 0x847b5f6c, 0x65dc, 0x4b3a, 0xa7,0x21, 0xb8,0xf9,0x31,0xc2,0x31,0x33)
#endif
#endif

/*****************************************************************************
 * Rubber coclass
 */

DEFINE_GUID(CLSID_Rubber, 0xb0715dc0, 0x002f, 0x11e4, 0x91,0x91, 0x08,0x00,0x20,0x0c,0x9a,0x66);

#ifdef __cplusplus
class DECLSPEC_UUID("b0715dc0-002f-11e4-9191-0800200c9a66") Rubber;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Rubber, 0xb0715dc0, 0x002f, 0x11e4, 0x91,0x91, 0x08,0x00,0x20,0x0c,0x9a,0x66)
#endif
#endif

/*****************************************************************************
 * Ball coclass
 */

DEFINE_GUID(CLSID_Ball, 0xd4966068, 0xdedb, 0x4eb9, 0x9a,0xb8, 0x45,0x74,0xcc,0xaa,0x5f,0x1d);

#ifdef __cplusplus
class DECLSPEC_UUID("d4966068-dedb-4eb9-9ab8-4574ccaa5f1d") Ball;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Ball, 0xd4966068, 0xdedb, 0x4eb9, 0x9a,0xb8, 0x45,0x74,0xcc,0xaa,0x5f,0x1d)
#endif
#endif

/*****************************************************************************
 * Collection coclass
 */

DEFINE_GUID(CLSID_Collection, 0xd4d4e043, 0x594f, 0x49f0, 0xb5,0x61, 0x4a,0xa9,0x94,0x2d,0xcf,0x18);

#ifdef __cplusplus
class DECLSPEC_UUID("d4d4e043-594f-49f0-b561-4aa9942dcf18") Collection;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Collection, 0xd4d4e043, 0x594f, 0x49f0, 0xb5,0x61, 0x4a,0xa9,0x94,0x2d,0xcf,0x18)
#endif
#endif

/*****************************************************************************
 * DispReel coclass
 */

DEFINE_GUID(CLSID_DispReel, 0x47b68e91, 0x098c, 0x44ee, 0xb2,0xb1, 0x04,0xc8,0x76,0x54,0xcf,0x5e);

#ifdef __cplusplus
class DECLSPEC_UUID("47b68e91-098c-44ee-b2b1-04c87654cf5e") DispReel;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(DispReel, 0x47b68e91, 0x098c, 0x44ee, 0xb2,0xb1, 0x04,0xc8,0x76,0x54,0xcf,0x5e)
#endif
#endif

/*****************************************************************************
 * LightSeq coclass
 */

DEFINE_GUID(CLSID_LightSeq, 0xf4758e77, 0xad9a, 0x49a6, 0x81,0x46, 0xab,0x94,0x54,0x0f,0x01,0x02);

#ifdef __cplusplus
class DECLSPEC_UUID("f4758e77-ad9a-49a6-8146-ab94540f0102") LightSeq;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(LightSeq, 0xf4758e77, 0xad9a, 0x49a6, 0x81,0x46, 0xab,0x94,0x54,0x0f,0x01,0x02)
#endif
#endif

/*****************************************************************************
 * Primitive coclass
 */

DEFINE_GUID(CLSID_Primitive, 0xffa76bf2, 0xb558, 0x4ef6, 0xaa,0x81, 0x5f,0xdc,0x5f,0x71,0xcf,0xe8);

#ifdef __cplusplus
class DECLSPEC_UUID("ffa76bf2-b558-4ef6-aa81-5fdc5f71cfe8") Primitive;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Primitive, 0xffa76bf2, 0xb558, 0x4ef6, 0xaa,0x81, 0x5f,0xdc,0x5f,0x71,0xcf,0xe8)
#endif
#endif

/*****************************************************************************
 * HitTarget coclass
 */

DEFINE_GUID(CLSID_HitTarget, 0x7770b875, 0x0f54, 0x4187, 0x81,0xe3, 0x38,0x97,0x42,0xd9,0x7b,0xaf);

#ifdef __cplusplus
class DECLSPEC_UUID("7770b875-0f54-4187-81e3-389742d97baf") HitTarget;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(HitTarget, 0x7770b875, 0x0f54, 0x4187, 0x81,0xe3, 0x38,0x97,0x42,0xd9,0x7b,0xaf)
#endif
#endif

#endif /* __VPinballLib_LIBRARY_DEFINED__ */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __vpinball_standalone_i_h__ */
