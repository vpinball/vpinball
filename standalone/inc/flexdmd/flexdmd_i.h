/*** Autogenerated by WIDL 8.21 from ../inc/flexdmd/FlexDMD.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __flexdmd_i_h__
#define __flexdmd_i_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __ICompositeAction_FWD_DEFINED__
#define __ICompositeAction_FWD_DEFINED__
typedef interface ICompositeAction ICompositeAction;
#ifdef __cplusplus
interface ICompositeAction;
#endif /* __cplusplus */
#endif

#ifndef __ITweenAction_FWD_DEFINED__
#define __ITweenAction_FWD_DEFINED__
typedef interface ITweenAction ITweenAction;
#ifdef __cplusplus
interface ITweenAction;
#endif /* __cplusplus */
#endif

#ifndef __IActionFactory_FWD_DEFINED__
#define __IActionFactory_FWD_DEFINED__
typedef interface IActionFactory IActionFactory;
#ifdef __cplusplus
interface IActionFactory;
#endif /* __cplusplus */
#endif

#ifndef __IActor_FWD_DEFINED__
#define __IActor_FWD_DEFINED__
typedef interface IActor IActor;
#ifdef __cplusplus
interface IActor;
#endif /* __cplusplus */
#endif

#ifndef __IGroupActor_FWD_DEFINED__
#define __IGroupActor_FWD_DEFINED__
typedef interface IGroupActor IGroupActor;
#ifdef __cplusplus
interface IGroupActor;
#endif /* __cplusplus */
#endif

#ifndef __IFrameActor_FWD_DEFINED__
#define __IFrameActor_FWD_DEFINED__
typedef interface IFrameActor IFrameActor;
#ifdef __cplusplus
interface IFrameActor;
#endif /* __cplusplus */
#endif

#ifndef __IImageActor_FWD_DEFINED__
#define __IImageActor_FWD_DEFINED__
typedef interface IImageActor IImageActor;
#ifdef __cplusplus
interface IImageActor;
#endif /* __cplusplus */
#endif

#ifndef __IVideoActor_FWD_DEFINED__
#define __IVideoActor_FWD_DEFINED__
typedef interface IVideoActor IVideoActor;
#ifdef __cplusplus
interface IVideoActor;
#endif /* __cplusplus */
#endif

#ifndef __ILabelActor_FWD_DEFINED__
#define __ILabelActor_FWD_DEFINED__
typedef interface ILabelActor ILabelActor;
#ifdef __cplusplus
interface ILabelActor;
#endif /* __cplusplus */
#endif

#ifndef __IFlexDMD_FWD_DEFINED__
#define __IFlexDMD_FWD_DEFINED__
typedef interface IFlexDMD IFlexDMD;
#ifdef __cplusplus
interface IFlexDMD;
#endif /* __cplusplus */
#endif

#ifndef __IDMDObjectEvents_FWD_DEFINED__
#define __IDMDObjectEvents_FWD_DEFINED__
typedef interface IDMDObjectEvents IDMDObjectEvents;
#ifdef __cplusplus
interface IDMDObjectEvents;
#endif /* __cplusplus */
#endif

#ifndef __IUltraDMD_FWD_DEFINED__
#define __IUltraDMD_FWD_DEFINED__
typedef interface IUltraDMD IUltraDMD;
#ifdef __cplusplus
interface IUltraDMD;
#endif /* __cplusplus */
#endif

#ifndef __FlexDMD_FWD_DEFINED__
#define __FlexDMD_FWD_DEFINED__
#ifdef __cplusplus
typedef class FlexDMD FlexDMD;
#else
typedef struct FlexDMD FlexDMD;
#endif /* defined __cplusplus */
#endif /* defined __FlexDMD_FWD_DEFINED__ */

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef float single;
typedef INT64 int64;
typedef void *_Bitmap;
#ifndef __FlexDMD_LIBRARY_DEFINED__
#define __FlexDMD_LIBRARY_DEFINED__

DEFINE_GUID(LIBID_FlexDMD, 0xb863555a, 0xa234, 0x43f4, 0xa0,0xfd, 0x34,0xe6,0xa0,0xe0,0x05,0x47);

#ifndef __ICompositeAction_FWD_DEFINED__
#define __ICompositeAction_FWD_DEFINED__
typedef interface ICompositeAction ICompositeAction;
#ifdef __cplusplus
interface ICompositeAction;
#endif /* __cplusplus */
#endif

#ifndef __ITweenAction_FWD_DEFINED__
#define __ITweenAction_FWD_DEFINED__
typedef interface ITweenAction ITweenAction;
#ifdef __cplusplus
interface ITweenAction;
#endif /* __cplusplus */
#endif

#ifndef __IActionFactory_FWD_DEFINED__
#define __IActionFactory_FWD_DEFINED__
typedef interface IActionFactory IActionFactory;
#ifdef __cplusplus
interface IActionFactory;
#endif /* __cplusplus */
#endif

#ifndef __IActor_FWD_DEFINED__
#define __IActor_FWD_DEFINED__
typedef interface IActor IActor;
#ifdef __cplusplus
interface IActor;
#endif /* __cplusplus */
#endif

#ifndef __IGroupActor_FWD_DEFINED__
#define __IGroupActor_FWD_DEFINED__
typedef interface IGroupActor IGroupActor;
#ifdef __cplusplus
interface IGroupActor;
#endif /* __cplusplus */
#endif

#ifndef __IFrameActor_FWD_DEFINED__
#define __IFrameActor_FWD_DEFINED__
typedef interface IFrameActor IFrameActor;
#ifdef __cplusplus
interface IFrameActor;
#endif /* __cplusplus */
#endif

#ifndef __IImageActor_FWD_DEFINED__
#define __IImageActor_FWD_DEFINED__
typedef interface IImageActor IImageActor;
#ifdef __cplusplus
interface IImageActor;
#endif /* __cplusplus */
#endif

#ifndef __IVideoActor_FWD_DEFINED__
#define __IVideoActor_FWD_DEFINED__
typedef interface IVideoActor IVideoActor;
#ifdef __cplusplus
interface IVideoActor;
#endif /* __cplusplus */
#endif

#ifndef __ILabelActor_FWD_DEFINED__
#define __ILabelActor_FWD_DEFINED__
typedef interface ILabelActor ILabelActor;
#ifdef __cplusplus
interface ILabelActor;
#endif /* __cplusplus */
#endif

#ifndef __IFlexDMD_FWD_DEFINED__
#define __IFlexDMD_FWD_DEFINED__
typedef interface IFlexDMD IFlexDMD;
#ifdef __cplusplus
interface IFlexDMD;
#endif /* __cplusplus */
#endif

#ifndef __IDMDObjectEvents_FWD_DEFINED__
#define __IDMDObjectEvents_FWD_DEFINED__
typedef interface IDMDObjectEvents IDMDObjectEvents;
#ifdef __cplusplus
interface IDMDObjectEvents;
#endif /* __cplusplus */
#endif

#ifndef __IUltraDMD_FWD_DEFINED__
#define __IUltraDMD_FWD_DEFINED__
typedef interface IUltraDMD IUltraDMD;
#ifdef __cplusplus
interface IUltraDMD;
#endif /* __cplusplus */
#endif

typedef enum __WIDL_FlexDMD_generated_name_0000001E {
    Interpolation_Linear = 0,
    Interpolation_ElasticIn = 1,
    Interpolation_ElasticOut = 2,
    Interpolation_ElasticInOut = 3,
    Interpolation_QuadIn = 4,
    Interpolation_QuadOut = 5,
    Interpolation_QuadInOut = 6,
    Interpolation_CubeIn = 7,
    Interpolation_CubeOut = 8,
    Interpolation_CubeInOut = 9,
    Interpolation_QuartIn = 10,
    Interpolation_QuartOut = 11,
    Interpolation_QuartInOut = 12,
    Interpolation_QuintIn = 13,
    Interpolation_QuintOut = 14,
    Interpolation_QuintInOut = 15,
    Interpolation_SineIn = 16,
    Interpolation_SineOut = 17,
    Interpolation_SineInOut = 18,
    Interpolation_BounceIn = 19,
    Interpolation_BounceOut = 20,
    Interpolation_BounceInOut = 21,
    Interpolation_CircIn = 22,
    Interpolation_CircOut = 23,
    Interpolation_CircInOut = 24,
    Interpolation_ExpoIn = 25,
    Interpolation_ExpoOut = 26,
    Interpolation_ExpoInOut = 27,
    Interpolation_BackIn = 28,
    Interpolation_BackOut = 29,
    Interpolation_BackInOut = 30
} Interpolation;
typedef enum __WIDL_FlexDMD_generated_name_0000001F {
    Alignment_TopLeft = 0,
    Alignment_Top = 1,
    Alignment_TopRight = 2,
    Alignment_Left = 3,
    Alignment_Center = 4,
    Alignment_Right = 5,
    Alignment_BottomLeft = 6,
    Alignment_Bottom = 7,
    Alignment_BottomRight = 8
} Alignment;
/*****************************************************************************
 * ICompositeAction interface
 */
#ifndef __ICompositeAction_INTERFACE_DEFINED__
#define __ICompositeAction_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICompositeAction, 0xdca215a5, 0xef1b, 0x4924, 0xb5,0xea, 0xbf,0x10,0x83,0x98,0xa3,0x18);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("dca215a5-ef1b-4924-b5ea-bf108398a318")
ICompositeAction : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Add(
        IUnknown *action,
        ICompositeAction **pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICompositeAction, 0xdca215a5, 0xef1b, 0x4924, 0xb5,0xea, 0xbf,0x10,0x83,0x98,0xa3,0x18)
#endif
#else
typedef struct ICompositeActionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICompositeAction *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICompositeAction *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICompositeAction *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ICompositeAction *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ICompositeAction *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ICompositeAction *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ICompositeAction *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ICompositeAction methods ***/
    HRESULT (STDMETHODCALLTYPE *Add)(
        ICompositeAction *This,
        IUnknown *action,
        ICompositeAction **pRetVal);

    END_INTERFACE
} ICompositeActionVtbl;

interface ICompositeAction {
    CONST_VTBL ICompositeActionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICompositeAction_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICompositeAction_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICompositeAction_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ICompositeAction_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ICompositeAction_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ICompositeAction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ICompositeAction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ICompositeAction methods ***/
#define ICompositeAction_Add(This,action,pRetVal) (This)->lpVtbl->Add(This,action,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ICompositeAction_QueryInterface(ICompositeAction* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ICompositeAction_AddRef(ICompositeAction* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ICompositeAction_Release(ICompositeAction* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ICompositeAction_GetTypeInfoCount(ICompositeAction* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ICompositeAction_GetTypeInfo(ICompositeAction* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ICompositeAction_GetIDsOfNames(ICompositeAction* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ICompositeAction_Invoke(ICompositeAction* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ICompositeAction methods ***/
static __WIDL_INLINE HRESULT ICompositeAction_Add(ICompositeAction* This,IUnknown *action,ICompositeAction **pRetVal) {
    return This->lpVtbl->Add(This,action,pRetVal);
}
#endif
#endif

#endif


#endif  /* __ICompositeAction_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITweenAction interface
 */
#ifndef __ITweenAction_INTERFACE_DEFINED__
#define __ITweenAction_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITweenAction, 0x7a165bd9, 0x9825, 0x488d, 0xb2,0x92, 0x87,0xca,0xac,0x46,0xcb,0x3c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7a165bd9-9825-488d-b292-87caac46cb3c")
ITweenAction : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Ease(
        Interpolation *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Ease(
        Interpolation pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITweenAction, 0x7a165bd9, 0x9825, 0x488d, 0xb2,0x92, 0x87,0xca,0xac,0x46,0xcb,0x3c)
#endif
#else
typedef struct ITweenActionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITweenAction *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITweenAction *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITweenAction *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ITweenAction *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ITweenAction *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ITweenAction *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ITweenAction *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ITweenAction methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Ease)(
        ITweenAction *This,
        Interpolation *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Ease)(
        ITweenAction *This,
        Interpolation pRetVal);

    END_INTERFACE
} ITweenActionVtbl;

interface ITweenAction {
    CONST_VTBL ITweenActionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITweenAction_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITweenAction_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITweenAction_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ITweenAction_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ITweenAction_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ITweenAction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ITweenAction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ITweenAction methods ***/
#define ITweenAction_get_Ease(This,pRetVal) (This)->lpVtbl->get_Ease(This,pRetVal)
#define ITweenAction_put_Ease(This,pRetVal) (This)->lpVtbl->put_Ease(This,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ITweenAction_QueryInterface(ITweenAction* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ITweenAction_AddRef(ITweenAction* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ITweenAction_Release(ITweenAction* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ITweenAction_GetTypeInfoCount(ITweenAction* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ITweenAction_GetTypeInfo(ITweenAction* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ITweenAction_GetIDsOfNames(ITweenAction* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ITweenAction_Invoke(ITweenAction* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ITweenAction methods ***/
static __WIDL_INLINE HRESULT ITweenAction_get_Ease(ITweenAction* This,Interpolation *pRetVal) {
    return This->lpVtbl->get_Ease(This,pRetVal);
}
static __WIDL_INLINE HRESULT ITweenAction_put_Ease(ITweenAction* This,Interpolation pRetVal) {
    return This->lpVtbl->put_Ease(This,pRetVal);
}
#endif
#endif

#endif


#endif  /* __ITweenAction_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IActionFactory interface
 */
#ifndef __IActionFactory_INTERFACE_DEFINED__
#define __IActionFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActionFactory, 0xde32f29e, 0xf8c8, 0x4e79, 0xae,0xe1, 0x47,0x25,0xa3,0x20,0xb0,0xb6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("de32f29e-f8c8-4e79-aee1-4725a320b0b6")
IActionFactory : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Wait(
        single secondsToWait,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delayed(
        single secondsToWait,
        IUnknown *action,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Parallel(
        ICompositeAction **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Sequence(
        ICompositeAction **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Repeat(
        IUnknown *action,
        LONG count,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Blink(
        single secondsShow,
        single secondsHide,
        LONG Repeat,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Show(
        VARIANT_BOOL visible,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddTo(
        IGroupActor *parent,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveFromParent(
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddChild(
        IUnknown *child,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveChild(
        IUnknown *child,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Seek(
        single pos,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE MoveTo(
        single x,
        single y,
        single duration,
        ITweenAction **pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActionFactory, 0xde32f29e, 0xf8c8, 0x4e79, 0xae,0xe1, 0x47,0x25,0xa3,0x20,0xb0,0xb6)
#endif
#else
typedef struct IActionFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActionFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActionFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActionFactory *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IActionFactory *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IActionFactory *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IActionFactory *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IActionFactory *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IActionFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *Wait)(
        IActionFactory *This,
        single secondsToWait,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Delayed)(
        IActionFactory *This,
        single secondsToWait,
        IUnknown *action,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Parallel)(
        IActionFactory *This,
        ICompositeAction **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Sequence)(
        IActionFactory *This,
        ICompositeAction **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Repeat)(
        IActionFactory *This,
        IUnknown *action,
        LONG count,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Blink)(
        IActionFactory *This,
        single secondsShow,
        single secondsHide,
        LONG Repeat,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Show)(
        IActionFactory *This,
        VARIANT_BOOL visible,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddTo)(
        IActionFactory *This,
        IGroupActor *parent,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *RemoveFromParent)(
        IActionFactory *This,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddChild)(
        IActionFactory *This,
        IUnknown *child,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *RemoveChild)(
        IActionFactory *This,
        IUnknown *child,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Seek)(
        IActionFactory *This,
        single pos,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *MoveTo)(
        IActionFactory *This,
        single x,
        single y,
        single duration,
        ITweenAction **pRetVal);

    END_INTERFACE
} IActionFactoryVtbl;

interface IActionFactory {
    CONST_VTBL IActionFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActionFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActionFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActionFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IActionFactory_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IActionFactory_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IActionFactory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IActionFactory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IActionFactory methods ***/
#define IActionFactory_Wait(This,secondsToWait,pRetVal) (This)->lpVtbl->Wait(This,secondsToWait,pRetVal)
#define IActionFactory_Delayed(This,secondsToWait,action,pRetVal) (This)->lpVtbl->Delayed(This,secondsToWait,action,pRetVal)
#define IActionFactory_Parallel(This,pRetVal) (This)->lpVtbl->Parallel(This,pRetVal)
#define IActionFactory_Sequence(This,pRetVal) (This)->lpVtbl->Sequence(This,pRetVal)
#define IActionFactory_Repeat(This,action,count,pRetVal) (This)->lpVtbl->Repeat(This,action,count,pRetVal)
#define IActionFactory_Blink(This,secondsShow,secondsHide,Repeat,pRetVal) (This)->lpVtbl->Blink(This,secondsShow,secondsHide,Repeat,pRetVal)
#define IActionFactory_Show(This,visible,pRetVal) (This)->lpVtbl->Show(This,visible,pRetVal)
#define IActionFactory_AddTo(This,parent,pRetVal) (This)->lpVtbl->AddTo(This,parent,pRetVal)
#define IActionFactory_RemoveFromParent(This,pRetVal) (This)->lpVtbl->RemoveFromParent(This,pRetVal)
#define IActionFactory_AddChild(This,child,pRetVal) (This)->lpVtbl->AddChild(This,child,pRetVal)
#define IActionFactory_RemoveChild(This,child,pRetVal) (This)->lpVtbl->RemoveChild(This,child,pRetVal)
#define IActionFactory_Seek(This,pos,pRetVal) (This)->lpVtbl->Seek(This,pos,pRetVal)
#define IActionFactory_MoveTo(This,x,y,duration,pRetVal) (This)->lpVtbl->MoveTo(This,x,y,duration,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IActionFactory_QueryInterface(IActionFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IActionFactory_AddRef(IActionFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IActionFactory_Release(IActionFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IActionFactory_GetTypeInfoCount(IActionFactory* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IActionFactory_GetTypeInfo(IActionFactory* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IActionFactory_GetIDsOfNames(IActionFactory* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IActionFactory_Invoke(IActionFactory* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IActionFactory methods ***/
static __WIDL_INLINE HRESULT IActionFactory_Wait(IActionFactory* This,single secondsToWait,IUnknown **pRetVal) {
    return This->lpVtbl->Wait(This,secondsToWait,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Delayed(IActionFactory* This,single secondsToWait,IUnknown *action,IUnknown **pRetVal) {
    return This->lpVtbl->Delayed(This,secondsToWait,action,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Parallel(IActionFactory* This,ICompositeAction **pRetVal) {
    return This->lpVtbl->Parallel(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Sequence(IActionFactory* This,ICompositeAction **pRetVal) {
    return This->lpVtbl->Sequence(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Repeat(IActionFactory* This,IUnknown *action,LONG count,IUnknown **pRetVal) {
    return This->lpVtbl->Repeat(This,action,count,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Blink(IActionFactory* This,single secondsShow,single secondsHide,LONG Repeat,IUnknown **pRetVal) {
    return This->lpVtbl->Blink(This,secondsShow,secondsHide,Repeat,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Show(IActionFactory* This,VARIANT_BOOL visible,IUnknown **pRetVal) {
    return This->lpVtbl->Show(This,visible,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_AddTo(IActionFactory* This,IGroupActor *parent,IUnknown **pRetVal) {
    return This->lpVtbl->AddTo(This,parent,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_RemoveFromParent(IActionFactory* This,IUnknown **pRetVal) {
    return This->lpVtbl->RemoveFromParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_AddChild(IActionFactory* This,IUnknown *child,IUnknown **pRetVal) {
    return This->lpVtbl->AddChild(This,child,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_RemoveChild(IActionFactory* This,IUnknown *child,IUnknown **pRetVal) {
    return This->lpVtbl->RemoveChild(This,child,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_Seek(IActionFactory* This,single pos,IUnknown **pRetVal) {
    return This->lpVtbl->Seek(This,pos,pRetVal);
}
static __WIDL_INLINE HRESULT IActionFactory_MoveTo(IActionFactory* This,single x,single y,single duration,ITweenAction **pRetVal) {
    return This->lpVtbl->MoveTo(This,x,y,duration,pRetVal);
}
#endif
#endif

#endif


#endif  /* __IActionFactory_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IActor interface
 */
#ifndef __IActor_INTERFACE_DEFINED__
#define __IActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActor, 0x6f205a9b, 0xb007, 0x4dcd, 0xa6,0x35, 0x51,0xb2,0xc9,0x39,0xa7,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6f205a9b-b007-4dcd-a635-51b2c939a796")
IActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActor, 0x6f205a9b, 0xb007, 0x4dcd, 0xa6,0x35, 0x51,0xb2,0xc9,0x39,0xa7,0x96)
#endif
#else
typedef struct IActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        IActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        IActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        IActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        IActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        IActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        IActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        IActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        IActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        IActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        IActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        IActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        IActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        IActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        IActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        IActor *This);

    END_INTERFACE
} IActorVtbl;

interface IActor {
    CONST_VTBL IActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IActor methods ***/
#define IActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define IActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define IActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define IActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define IActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define IActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define IActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define IActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define IActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define IActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define IActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define IActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define IActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define IActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define IActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define IActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define IActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define IActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define IActor_Pack(This) (This)->lpVtbl->Pack(This)
#define IActor_Remove(This) (This)->lpVtbl->Remove(This)
#define IActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define IActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define IActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IActor_QueryInterface(IActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IActor_AddRef(IActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IActor_Release(IActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IActor_GetTypeInfoCount(IActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IActor_GetTypeInfo(IActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IActor_GetIDsOfNames(IActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IActor_Invoke(IActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IActor methods ***/
static __WIDL_INLINE HRESULT IActor_get_Name(IActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_Name(IActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_x(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_x(IActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_y(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_y(IActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_Width(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_Width(IActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_Height(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_Height(IActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_visible(IActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_visible(IActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_FillParent(IActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_FillParent(IActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_ClearBackground(IActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_put_ClearBackground(IActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_SetBounds(IActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT IActor_SetPosition(IActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT IActor_SetAlignedPosition(IActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT IActor_SetSize(IActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT IActor_get_PrefWidth(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_get_PrefHeight(IActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_Pack(IActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT IActor_Remove(IActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT IActor_get_ActionFactory(IActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT IActor_AddAction(IActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT IActor_ClearActions(IActor* This) {
    return This->lpVtbl->ClearActions(This);
}
#endif
#endif

#endif


#endif  /* __IActor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IGroupActor interface
 */
#ifndef __IGroupActor_INTERFACE_DEFINED__
#define __IGroupActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IGroupActor, 0x1bf9f8ae, 0x1ba0, 0x4fa2, 0xad,0x03, 0x48,0xe9,0xfd,0x0f,0x4c,0x92);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1bf9f8ae-1ba0-4fa2-ad03-48e9fd0f4c92")
IGroupActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Clip(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Clip(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChildCount(
        LONG *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE HasChild(
        BSTR Name,
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGroup(
        BSTR Name,
        IGroupActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFrame(
        BSTR Name,
        IFrameActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLabel(
        BSTR Name,
        ILabelActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVideo(
        BSTR Name,
        IVideoActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetImage(
        BSTR Name,
        IImageActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveAll(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddActor(
        IUnknown *child) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveActor(
        IUnknown *child) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGroupActor, 0x1bf9f8ae, 0x1ba0, 0x4fa2, 0xad,0x03, 0x48,0xe9,0xfd,0x0f,0x4c,0x92)
#endif
#else
typedef struct IGroupActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGroupActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGroupActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGroupActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGroupActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGroupActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGroupActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGroupActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IGroupActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IGroupActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IGroupActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IGroupActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IGroupActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IGroupActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IGroupActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        IGroupActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        IGroupActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        IGroupActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        IGroupActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        IGroupActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        IGroupActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        IGroupActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        IGroupActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        IGroupActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        IGroupActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        IGroupActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        IGroupActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IGroupActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        IGroupActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        IGroupActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        IGroupActor *This);

    HRESULT (STDMETHODCALLTYPE *get_Clip)(
        IGroupActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Clip)(
        IGroupActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ChildCount)(
        IGroupActor *This,
        LONG *pRetVal);

    HRESULT (STDMETHODCALLTYPE *HasChild)(
        IGroupActor *This,
        BSTR Name,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *GetGroup)(
        IGroupActor *This,
        BSTR Name,
        IGroupActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *GetFrame)(
        IGroupActor *This,
        BSTR Name,
        IFrameActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *GetLabel)(
        IGroupActor *This,
        BSTR Name,
        ILabelActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *GetVideo)(
        IGroupActor *This,
        BSTR Name,
        IVideoActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *GetImage)(
        IGroupActor *This,
        BSTR Name,
        IImageActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *RemoveAll)(
        IGroupActor *This);

    HRESULT (STDMETHODCALLTYPE *AddActor)(
        IGroupActor *This,
        IUnknown *child);

    HRESULT (STDMETHODCALLTYPE *RemoveActor)(
        IGroupActor *This,
        IUnknown *child);

    END_INTERFACE
} IGroupActorVtbl;

interface IGroupActor {
    CONST_VTBL IGroupActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGroupActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGroupActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGroupActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGroupActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGroupActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGroupActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGroupActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IGroupActor methods ***/
#define IGroupActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define IGroupActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define IGroupActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define IGroupActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define IGroupActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define IGroupActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define IGroupActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IGroupActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IGroupActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IGroupActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IGroupActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define IGroupActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define IGroupActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define IGroupActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define IGroupActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define IGroupActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define IGroupActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define IGroupActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define IGroupActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define IGroupActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define IGroupActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define IGroupActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define IGroupActor_Pack(This) (This)->lpVtbl->Pack(This)
#define IGroupActor_Remove(This) (This)->lpVtbl->Remove(This)
#define IGroupActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define IGroupActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define IGroupActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#define IGroupActor_get_Clip(This,pRetVal) (This)->lpVtbl->get_Clip(This,pRetVal)
#define IGroupActor_put_Clip(This,pRetVal) (This)->lpVtbl->put_Clip(This,pRetVal)
#define IGroupActor_get_ChildCount(This,pRetVal) (This)->lpVtbl->get_ChildCount(This,pRetVal)
#define IGroupActor_HasChild(This,Name,pRetVal) (This)->lpVtbl->HasChild(This,Name,pRetVal)
#define IGroupActor_GetGroup(This,Name,pRetVal) (This)->lpVtbl->GetGroup(This,Name,pRetVal)
#define IGroupActor_GetFrame(This,Name,pRetVal) (This)->lpVtbl->GetFrame(This,Name,pRetVal)
#define IGroupActor_GetLabel(This,Name,pRetVal) (This)->lpVtbl->GetLabel(This,Name,pRetVal)
#define IGroupActor_GetVideo(This,Name,pRetVal) (This)->lpVtbl->GetVideo(This,Name,pRetVal)
#define IGroupActor_GetImage(This,Name,pRetVal) (This)->lpVtbl->GetImage(This,Name,pRetVal)
#define IGroupActor_RemoveAll(This) (This)->lpVtbl->RemoveAll(This)
#define IGroupActor_AddActor(This,child) (This)->lpVtbl->AddActor(This,child)
#define IGroupActor_RemoveActor(This,child) (This)->lpVtbl->RemoveActor(This,child)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGroupActor_QueryInterface(IGroupActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGroupActor_AddRef(IGroupActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGroupActor_Release(IGroupActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGroupActor_GetTypeInfoCount(IGroupActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGroupActor_GetTypeInfo(IGroupActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGroupActor_GetIDsOfNames(IGroupActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGroupActor_Invoke(IGroupActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IGroupActor methods ***/
static __WIDL_INLINE HRESULT IGroupActor_get_Name(IGroupActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_Name(IGroupActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_x(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_x(IGroupActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_y(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_y(IGroupActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_Width(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_Width(IGroupActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_Height(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_Height(IGroupActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_visible(IGroupActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_visible(IGroupActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_FillParent(IGroupActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_FillParent(IGroupActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_ClearBackground(IGroupActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_ClearBackground(IGroupActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_SetBounds(IGroupActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT IGroupActor_SetPosition(IGroupActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT IGroupActor_SetAlignedPosition(IGroupActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT IGroupActor_SetSize(IGroupActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT IGroupActor_get_PrefWidth(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_PrefHeight(IGroupActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_Pack(IGroupActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT IGroupActor_Remove(IGroupActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT IGroupActor_get_ActionFactory(IGroupActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_AddAction(IGroupActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT IGroupActor_ClearActions(IGroupActor* This) {
    return This->lpVtbl->ClearActions(This);
}
static __WIDL_INLINE HRESULT IGroupActor_get_Clip(IGroupActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Clip(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_put_Clip(IGroupActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Clip(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_get_ChildCount(IGroupActor* This,LONG *pRetVal) {
    return This->lpVtbl->get_ChildCount(This,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_HasChild(IGroupActor* This,BSTR Name,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->HasChild(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_GetGroup(IGroupActor* This,BSTR Name,IGroupActor **pRetVal) {
    return This->lpVtbl->GetGroup(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_GetFrame(IGroupActor* This,BSTR Name,IFrameActor **pRetVal) {
    return This->lpVtbl->GetFrame(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_GetLabel(IGroupActor* This,BSTR Name,ILabelActor **pRetVal) {
    return This->lpVtbl->GetLabel(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_GetVideo(IGroupActor* This,BSTR Name,IVideoActor **pRetVal) {
    return This->lpVtbl->GetVideo(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_GetImage(IGroupActor* This,BSTR Name,IImageActor **pRetVal) {
    return This->lpVtbl->GetImage(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IGroupActor_RemoveAll(IGroupActor* This) {
    return This->lpVtbl->RemoveAll(This);
}
static __WIDL_INLINE HRESULT IGroupActor_AddActor(IGroupActor* This,IUnknown *child) {
    return This->lpVtbl->AddActor(This,child);
}
static __WIDL_INLINE HRESULT IGroupActor_RemoveActor(IGroupActor* This,IUnknown *child) {
    return This->lpVtbl->RemoveActor(This,child);
}
#endif
#endif

#endif


#endif  /* __IGroupActor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFrameActor interface
 */
#ifndef __IFrameActor_INTERFACE_DEFINED__
#define __IFrameActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFrameActor, 0x05e06a6b, 0x94db, 0x4f7f, 0xb7,0xa8, 0xf8,0xe0,0x97,0x16,0xa0,0x41);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("05e06a6b-94db-4f7f-b7a8-f8e09716a041")
IFrameActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Thickness(
        LONG *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Thickness(
        LONG pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BorderColor(
        OLE_COLOR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BorderColor(
        OLE_COLOR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Fill(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Fill(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillColor(
        OLE_COLOR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillColor(
        OLE_COLOR pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFrameActor, 0x05e06a6b, 0x94db, 0x4f7f, 0xb7,0xa8, 0xf8,0xe0,0x97,0x16,0xa0,0x41)
#endif
#else
typedef struct IFrameActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFrameActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFrameActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFrameActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFrameActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFrameActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFrameActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFrameActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFrameActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFrameActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFrameActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IFrameActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IFrameActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IFrameActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IFrameActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        IFrameActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        IFrameActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        IFrameActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        IFrameActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        IFrameActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        IFrameActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        IFrameActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        IFrameActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        IFrameActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        IFrameActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        IFrameActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        IFrameActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IFrameActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        IFrameActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        IFrameActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        IFrameActor *This);

    HRESULT (STDMETHODCALLTYPE *get_Thickness)(
        IFrameActor *This,
        LONG *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Thickness)(
        IFrameActor *This,
        LONG pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_BorderColor)(
        IFrameActor *This,
        OLE_COLOR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_BorderColor)(
        IFrameActor *This,
        OLE_COLOR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Fill)(
        IFrameActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Fill)(
        IFrameActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillColor)(
        IFrameActor *This,
        OLE_COLOR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillColor)(
        IFrameActor *This,
        OLE_COLOR pRetVal);

    END_INTERFACE
} IFrameActorVtbl;

interface IFrameActor {
    CONST_VTBL IFrameActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFrameActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFrameActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFrameActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFrameActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFrameActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFrameActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFrameActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFrameActor methods ***/
#define IFrameActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define IFrameActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define IFrameActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define IFrameActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define IFrameActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define IFrameActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define IFrameActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IFrameActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IFrameActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IFrameActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IFrameActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define IFrameActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define IFrameActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define IFrameActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define IFrameActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define IFrameActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define IFrameActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define IFrameActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define IFrameActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define IFrameActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define IFrameActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define IFrameActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define IFrameActor_Pack(This) (This)->lpVtbl->Pack(This)
#define IFrameActor_Remove(This) (This)->lpVtbl->Remove(This)
#define IFrameActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define IFrameActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define IFrameActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#define IFrameActor_get_Thickness(This,pRetVal) (This)->lpVtbl->get_Thickness(This,pRetVal)
#define IFrameActor_put_Thickness(This,pRetVal) (This)->lpVtbl->put_Thickness(This,pRetVal)
#define IFrameActor_get_BorderColor(This,pRetVal) (This)->lpVtbl->get_BorderColor(This,pRetVal)
#define IFrameActor_put_BorderColor(This,pRetVal) (This)->lpVtbl->put_BorderColor(This,pRetVal)
#define IFrameActor_get_Fill(This,pRetVal) (This)->lpVtbl->get_Fill(This,pRetVal)
#define IFrameActor_put_Fill(This,pRetVal) (This)->lpVtbl->put_Fill(This,pRetVal)
#define IFrameActor_get_FillColor(This,pRetVal) (This)->lpVtbl->get_FillColor(This,pRetVal)
#define IFrameActor_put_FillColor(This,pRetVal) (This)->lpVtbl->put_FillColor(This,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFrameActor_QueryInterface(IFrameActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFrameActor_AddRef(IFrameActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFrameActor_Release(IFrameActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFrameActor_GetTypeInfoCount(IFrameActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFrameActor_GetTypeInfo(IFrameActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFrameActor_GetIDsOfNames(IFrameActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFrameActor_Invoke(IFrameActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFrameActor methods ***/
static __WIDL_INLINE HRESULT IFrameActor_get_Name(IFrameActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_Name(IFrameActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_x(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_x(IFrameActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_y(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_y(IFrameActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_Width(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_Width(IFrameActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_Height(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_Height(IFrameActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_visible(IFrameActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_visible(IFrameActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_FillParent(IFrameActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_FillParent(IFrameActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_ClearBackground(IFrameActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_ClearBackground(IFrameActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_SetBounds(IFrameActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT IFrameActor_SetPosition(IFrameActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT IFrameActor_SetAlignedPosition(IFrameActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT IFrameActor_SetSize(IFrameActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT IFrameActor_get_PrefWidth(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_PrefHeight(IFrameActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_Pack(IFrameActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT IFrameActor_Remove(IFrameActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT IFrameActor_get_ActionFactory(IFrameActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_AddAction(IFrameActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT IFrameActor_ClearActions(IFrameActor* This) {
    return This->lpVtbl->ClearActions(This);
}
static __WIDL_INLINE HRESULT IFrameActor_get_Thickness(IFrameActor* This,LONG *pRetVal) {
    return This->lpVtbl->get_Thickness(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_Thickness(IFrameActor* This,LONG pRetVal) {
    return This->lpVtbl->put_Thickness(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_BorderColor(IFrameActor* This,OLE_COLOR *pRetVal) {
    return This->lpVtbl->get_BorderColor(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_BorderColor(IFrameActor* This,OLE_COLOR pRetVal) {
    return This->lpVtbl->put_BorderColor(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_Fill(IFrameActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Fill(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_Fill(IFrameActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Fill(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_get_FillColor(IFrameActor* This,OLE_COLOR *pRetVal) {
    return This->lpVtbl->get_FillColor(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFrameActor_put_FillColor(IFrameActor* This,OLE_COLOR pRetVal) {
    return This->lpVtbl->put_FillColor(This,pRetVal);
}
#endif
#endif

#endif


#endif  /* __IFrameActor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IImageActor interface
 */
#ifndef __IImageActor_INTERFACE_DEFINED__
#define __IImageActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IImageActor, 0x42caeb83, 0xc045, 0x443d, 0x95,0x28, 0x43,0x04,0xe9,0xf2,0x7a,0x20);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("42caeb83-c045-443d-9528-4304e9f27a20")
IImageActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Bitmap(
        _Bitmap **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE putref_Bitmap(
        _Bitmap *pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IImageActor, 0x42caeb83, 0xc045, 0x443d, 0x95,0x28, 0x43,0x04,0xe9,0xf2,0x7a,0x20)
#endif
#else
typedef struct IImageActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IImageActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IImageActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IImageActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IImageActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IImageActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IImageActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IImageActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IImageActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IImageActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IImageActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IImageActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IImageActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IImageActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IImageActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        IImageActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        IImageActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        IImageActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        IImageActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        IImageActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        IImageActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        IImageActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        IImageActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        IImageActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        IImageActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        IImageActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        IImageActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IImageActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        IImageActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        IImageActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        IImageActor *This);

    HRESULT (STDMETHODCALLTYPE *get_Bitmap)(
        IImageActor *This,
        _Bitmap **pRetVal);

    HRESULT (STDMETHODCALLTYPE *putref_Bitmap)(
        IImageActor *This,
        _Bitmap *pRetVal);

    END_INTERFACE
} IImageActorVtbl;

interface IImageActor {
    CONST_VTBL IImageActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IImageActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IImageActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IImageActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IImageActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IImageActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IImageActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IImageActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IImageActor methods ***/
#define IImageActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define IImageActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define IImageActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define IImageActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define IImageActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define IImageActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define IImageActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IImageActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IImageActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IImageActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IImageActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define IImageActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define IImageActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define IImageActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define IImageActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define IImageActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define IImageActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define IImageActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define IImageActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define IImageActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define IImageActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define IImageActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define IImageActor_Pack(This) (This)->lpVtbl->Pack(This)
#define IImageActor_Remove(This) (This)->lpVtbl->Remove(This)
#define IImageActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define IImageActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define IImageActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#define IImageActor_get_Bitmap(This,pRetVal) (This)->lpVtbl->get_Bitmap(This,pRetVal)
#define IImageActor_putref_Bitmap(This,pRetVal) (This)->lpVtbl->putref_Bitmap(This,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IImageActor_QueryInterface(IImageActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IImageActor_AddRef(IImageActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IImageActor_Release(IImageActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IImageActor_GetTypeInfoCount(IImageActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IImageActor_GetTypeInfo(IImageActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IImageActor_GetIDsOfNames(IImageActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IImageActor_Invoke(IImageActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IImageActor methods ***/
static __WIDL_INLINE HRESULT IImageActor_get_Name(IImageActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_Name(IImageActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_x(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_x(IImageActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_y(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_y(IImageActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_Width(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_Width(IImageActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_Height(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_Height(IImageActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_visible(IImageActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_visible(IImageActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_FillParent(IImageActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_FillParent(IImageActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_ClearBackground(IImageActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_put_ClearBackground(IImageActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_SetBounds(IImageActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT IImageActor_SetPosition(IImageActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT IImageActor_SetAlignedPosition(IImageActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT IImageActor_SetSize(IImageActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT IImageActor_get_PrefWidth(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_get_PrefHeight(IImageActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_Pack(IImageActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT IImageActor_Remove(IImageActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT IImageActor_get_ActionFactory(IImageActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_AddAction(IImageActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT IImageActor_ClearActions(IImageActor* This) {
    return This->lpVtbl->ClearActions(This);
}
static __WIDL_INLINE HRESULT IImageActor_get_Bitmap(IImageActor* This,_Bitmap **pRetVal) {
    return This->lpVtbl->get_Bitmap(This,pRetVal);
}
static __WIDL_INLINE HRESULT IImageActor_putref_Bitmap(IImageActor* This,_Bitmap *pRetVal) {
    return This->lpVtbl->putref_Bitmap(This,pRetVal);
}
#endif
#endif

#endif


#endif  /* __IImageActor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IVideoActor interface
 */
#ifndef __IVideoActor_INTERFACE_DEFINED__
#define __IVideoActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_IVideoActor, 0xcf9afd55, 0x03a3, 0x458d, 0x8e,0xab, 0x11,0x9c,0x55,0x09,0x0b,0xab);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cf9afd55-03a3-458d-8eab-119c55090bab")
IVideoActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

    virtual void STDMETHODCALLTYPE Missing34(
        ) = 0;

    virtual void STDMETHODCALLTYPE Missing35(
        ) = 0;

    virtual void STDMETHODCALLTYPE Missing36(
        ) = 0;

    virtual void STDMETHODCALLTYPE Missing37(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Length(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Loop(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Loop(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Paused(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Paused(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PlaySpeed(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PlaySpeed(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Seek(
        single posInSeconds) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IVideoActor, 0xcf9afd55, 0x03a3, 0x458d, 0x8e,0xab, 0x11,0x9c,0x55,0x09,0x0b,0xab)
#endif
#else
typedef struct IVideoActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IVideoActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IVideoActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IVideoActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IVideoActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IVideoActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IVideoActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IVideoActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IVideoActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IVideoActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IVideoActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IVideoActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IVideoActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IVideoActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IVideoActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        IVideoActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        IVideoActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        IVideoActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        IVideoActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        IVideoActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        IVideoActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        IVideoActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        IVideoActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        IVideoActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        IVideoActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        IVideoActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IVideoActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        IVideoActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        IVideoActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        IVideoActor *This);

    void (STDMETHODCALLTYPE *Missing34)(
        IVideoActor *This);

    void (STDMETHODCALLTYPE *Missing35)(
        IVideoActor *This);

    void (STDMETHODCALLTYPE *Missing36)(
        IVideoActor *This);

    void (STDMETHODCALLTYPE *Missing37)(
        IVideoActor *This);

    HRESULT (STDMETHODCALLTYPE *get_Length)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Loop)(
        IVideoActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Loop)(
        IVideoActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Paused)(
        IVideoActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Paused)(
        IVideoActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PlaySpeed)(
        IVideoActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_PlaySpeed)(
        IVideoActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *Seek)(
        IVideoActor *This,
        single posInSeconds);

    END_INTERFACE
} IVideoActorVtbl;

interface IVideoActor {
    CONST_VTBL IVideoActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IVideoActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IVideoActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IVideoActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IVideoActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IVideoActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IVideoActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IVideoActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IVideoActor methods ***/
#define IVideoActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define IVideoActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define IVideoActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define IVideoActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define IVideoActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define IVideoActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define IVideoActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IVideoActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IVideoActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IVideoActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IVideoActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define IVideoActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define IVideoActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define IVideoActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define IVideoActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define IVideoActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define IVideoActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define IVideoActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define IVideoActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define IVideoActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define IVideoActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define IVideoActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define IVideoActor_Pack(This) (This)->lpVtbl->Pack(This)
#define IVideoActor_Remove(This) (This)->lpVtbl->Remove(This)
#define IVideoActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define IVideoActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define IVideoActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#define IVideoActor_Missing34(This) (This)->lpVtbl->Missing34(This)
#define IVideoActor_Missing35(This) (This)->lpVtbl->Missing35(This)
#define IVideoActor_Missing36(This) (This)->lpVtbl->Missing36(This)
#define IVideoActor_Missing37(This) (This)->lpVtbl->Missing37(This)
#define IVideoActor_get_Length(This,pRetVal) (This)->lpVtbl->get_Length(This,pRetVal)
#define IVideoActor_get_Loop(This,pRetVal) (This)->lpVtbl->get_Loop(This,pRetVal)
#define IVideoActor_put_Loop(This,pRetVal) (This)->lpVtbl->put_Loop(This,pRetVal)
#define IVideoActor_get_Paused(This,pRetVal) (This)->lpVtbl->get_Paused(This,pRetVal)
#define IVideoActor_put_Paused(This,pRetVal) (This)->lpVtbl->put_Paused(This,pRetVal)
#define IVideoActor_get_PlaySpeed(This,pRetVal) (This)->lpVtbl->get_PlaySpeed(This,pRetVal)
#define IVideoActor_put_PlaySpeed(This,pRetVal) (This)->lpVtbl->put_PlaySpeed(This,pRetVal)
#define IVideoActor_Seek(This,posInSeconds) (This)->lpVtbl->Seek(This,posInSeconds)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IVideoActor_QueryInterface(IVideoActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IVideoActor_AddRef(IVideoActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IVideoActor_Release(IVideoActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IVideoActor_GetTypeInfoCount(IVideoActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IVideoActor_GetTypeInfo(IVideoActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IVideoActor_GetIDsOfNames(IVideoActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IVideoActor_Invoke(IVideoActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IVideoActor methods ***/
static __WIDL_INLINE HRESULT IVideoActor_get_Name(IVideoActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_Name(IVideoActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_x(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_x(IVideoActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_y(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_y(IVideoActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_Width(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_Width(IVideoActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_Height(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_Height(IVideoActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_visible(IVideoActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_visible(IVideoActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_FillParent(IVideoActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_FillParent(IVideoActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_ClearBackground(IVideoActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_ClearBackground(IVideoActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_SetBounds(IVideoActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT IVideoActor_SetPosition(IVideoActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT IVideoActor_SetAlignedPosition(IVideoActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT IVideoActor_SetSize(IVideoActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT IVideoActor_get_PrefWidth(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_PrefHeight(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_Pack(IVideoActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT IVideoActor_Remove(IVideoActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT IVideoActor_get_ActionFactory(IVideoActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_AddAction(IVideoActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT IVideoActor_ClearActions(IVideoActor* This) {
    return This->lpVtbl->ClearActions(This);
}
static __WIDL_INLINE void IVideoActor_Missing34(IVideoActor* This) {
    This->lpVtbl->Missing34(This);
}
static __WIDL_INLINE void IVideoActor_Missing35(IVideoActor* This) {
    This->lpVtbl->Missing35(This);
}
static __WIDL_INLINE void IVideoActor_Missing36(IVideoActor* This) {
    This->lpVtbl->Missing36(This);
}
static __WIDL_INLINE void IVideoActor_Missing37(IVideoActor* This) {
    This->lpVtbl->Missing37(This);
}
static __WIDL_INLINE HRESULT IVideoActor_get_Length(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_Length(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_Loop(IVideoActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Loop(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_Loop(IVideoActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Loop(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_Paused(IVideoActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Paused(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_Paused(IVideoActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Paused(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_get_PlaySpeed(IVideoActor* This,single *pRetVal) {
    return This->lpVtbl->get_PlaySpeed(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_put_PlaySpeed(IVideoActor* This,single pRetVal) {
    return This->lpVtbl->put_PlaySpeed(This,pRetVal);
}
static __WIDL_INLINE HRESULT IVideoActor_Seek(IVideoActor* This,single posInSeconds) {
    return This->lpVtbl->Seek(This,posInSeconds);
}
#endif
#endif

#endif


#endif  /* __IVideoActor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ILabelActor interface
 */
#ifndef __ILabelActor_INTERFACE_DEFINED__
#define __ILabelActor_INTERFACE_DEFINED__

DEFINE_GUID(IID_ILabelActor, 0xa8aad77f, 0x4f01, 0x433b, 0xb6,0x53, 0xb6,0xf1,0x42,0x34,0xf4,0xf2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a8aad77f-4f01-433b-b653-b6f14234f4f2")
ILabelActor : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_x(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        single pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_visible(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_visible(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FillParent(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FillParent(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClearBackground(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClearBackground(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBounds(
        single x,
        single y,
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPosition(
        single x,
        single y) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAlignedPosition(
        single x,
        single y,
        Alignment alignment) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSize(
        single Width,
        single Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefWidth(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PrefHeight(
        single *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pack(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ActionFactory(
        IActionFactory **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddAction(
        IUnknown *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearActions(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AutoPack(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AutoPack(
        VARIANT_BOOL pRetVal) = 0;

    virtual void STDMETHODCALLTYPE Missing36(
        ) = 0;

    virtual void STDMETHODCALLTYPE Missing37(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Font(
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE putref_Font(
        IUnknown *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Text(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Text(
        BSTR pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILabelActor, 0xa8aad77f, 0x4f01, 0x433b, 0xb6,0x53, 0xb6,0xf1,0x42,0x34,0xf4,0xf2)
#endif
#else
typedef struct ILabelActorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILabelActor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILabelActor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILabelActor *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        ILabelActor *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        ILabelActor *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        ILabelActor *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ILabelActor *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** ILabelActor methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        ILabelActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        ILabelActor *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_x)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        ILabelActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        ILabelActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        ILabelActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        ILabelActor *This,
        single pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_visible)(
        ILabelActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_visible)(
        ILabelActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_FillParent)(
        ILabelActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_FillParent)(
        ILabelActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ClearBackground)(
        ILabelActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ClearBackground)(
        ILabelActor *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *SetBounds)(
        ILabelActor *This,
        single x,
        single y,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *SetPosition)(
        ILabelActor *This,
        single x,
        single y);

    HRESULT (STDMETHODCALLTYPE *SetAlignedPosition)(
        ILabelActor *This,
        single x,
        single y,
        Alignment alignment);

    HRESULT (STDMETHODCALLTYPE *SetSize)(
        ILabelActor *This,
        single Width,
        single Height);

    HRESULT (STDMETHODCALLTYPE *get_PrefWidth)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_PrefHeight)(
        ILabelActor *This,
        single *pRetVal);

    HRESULT (STDMETHODCALLTYPE *Pack)(
        ILabelActor *This);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        ILabelActor *This);

    HRESULT (STDMETHODCALLTYPE *get_ActionFactory)(
        ILabelActor *This,
        IActionFactory **pRetVal);

    HRESULT (STDMETHODCALLTYPE *AddAction)(
        ILabelActor *This,
        IUnknown *action);

    HRESULT (STDMETHODCALLTYPE *ClearActions)(
        ILabelActor *This);

    HRESULT (STDMETHODCALLTYPE *get_AutoPack)(
        ILabelActor *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_AutoPack)(
        ILabelActor *This,
        VARIANT_BOOL pRetVal);

    void (STDMETHODCALLTYPE *Missing36)(
        ILabelActor *This);

    void (STDMETHODCALLTYPE *Missing37)(
        ILabelActor *This);

    HRESULT (STDMETHODCALLTYPE *get_Font)(
        ILabelActor *This,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *putref_Font)(
        ILabelActor *This,
        IUnknown *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Text)(
        ILabelActor *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Text)(
        ILabelActor *This,
        BSTR pRetVal);

    END_INTERFACE
} ILabelActorVtbl;

interface ILabelActor {
    CONST_VTBL ILabelActorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILabelActor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILabelActor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILabelActor_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define ILabelActor_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define ILabelActor_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define ILabelActor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define ILabelActor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** ILabelActor methods ***/
#define ILabelActor_get_Name(This,pRetVal) (This)->lpVtbl->get_Name(This,pRetVal)
#define ILabelActor_put_Name(This,pRetVal) (This)->lpVtbl->put_Name(This,pRetVal)
#define ILabelActor_get_x(This,pRetVal) (This)->lpVtbl->get_x(This,pRetVal)
#define ILabelActor_put_x(This,pRetVal) (This)->lpVtbl->put_x(This,pRetVal)
#define ILabelActor_get_y(This,pRetVal) (This)->lpVtbl->get_y(This,pRetVal)
#define ILabelActor_put_y(This,pRetVal) (This)->lpVtbl->put_y(This,pRetVal)
#define ILabelActor_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define ILabelActor_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define ILabelActor_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define ILabelActor_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define ILabelActor_get_visible(This,pRetVal) (This)->lpVtbl->get_visible(This,pRetVal)
#define ILabelActor_put_visible(This,pRetVal) (This)->lpVtbl->put_visible(This,pRetVal)
#define ILabelActor_get_FillParent(This,pRetVal) (This)->lpVtbl->get_FillParent(This,pRetVal)
#define ILabelActor_put_FillParent(This,pRetVal) (This)->lpVtbl->put_FillParent(This,pRetVal)
#define ILabelActor_get_ClearBackground(This,pRetVal) (This)->lpVtbl->get_ClearBackground(This,pRetVal)
#define ILabelActor_put_ClearBackground(This,pRetVal) (This)->lpVtbl->put_ClearBackground(This,pRetVal)
#define ILabelActor_SetBounds(This,x,y,Width,Height) (This)->lpVtbl->SetBounds(This,x,y,Width,Height)
#define ILabelActor_SetPosition(This,x,y) (This)->lpVtbl->SetPosition(This,x,y)
#define ILabelActor_SetAlignedPosition(This,x,y,alignment) (This)->lpVtbl->SetAlignedPosition(This,x,y,alignment)
#define ILabelActor_SetSize(This,Width,Height) (This)->lpVtbl->SetSize(This,Width,Height)
#define ILabelActor_get_PrefWidth(This,pRetVal) (This)->lpVtbl->get_PrefWidth(This,pRetVal)
#define ILabelActor_get_PrefHeight(This,pRetVal) (This)->lpVtbl->get_PrefHeight(This,pRetVal)
#define ILabelActor_Pack(This) (This)->lpVtbl->Pack(This)
#define ILabelActor_Remove(This) (This)->lpVtbl->Remove(This)
#define ILabelActor_get_ActionFactory(This,pRetVal) (This)->lpVtbl->get_ActionFactory(This,pRetVal)
#define ILabelActor_AddAction(This,action) (This)->lpVtbl->AddAction(This,action)
#define ILabelActor_ClearActions(This) (This)->lpVtbl->ClearActions(This)
#define ILabelActor_get_AutoPack(This,pRetVal) (This)->lpVtbl->get_AutoPack(This,pRetVal)
#define ILabelActor_put_AutoPack(This,pRetVal) (This)->lpVtbl->put_AutoPack(This,pRetVal)
#define ILabelActor_Missing36(This) (This)->lpVtbl->Missing36(This)
#define ILabelActor_Missing37(This) (This)->lpVtbl->Missing37(This)
#define ILabelActor_get_Font(This,pRetVal) (This)->lpVtbl->get_Font(This,pRetVal)
#define ILabelActor_putref_Font(This,pRetVal) (This)->lpVtbl->putref_Font(This,pRetVal)
#define ILabelActor_get_Text(This,pRetVal) (This)->lpVtbl->get_Text(This,pRetVal)
#define ILabelActor_put_Text(This,pRetVal) (This)->lpVtbl->put_Text(This,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ILabelActor_QueryInterface(ILabelActor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ILabelActor_AddRef(ILabelActor* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ILabelActor_Release(ILabelActor* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT ILabelActor_GetTypeInfoCount(ILabelActor* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT ILabelActor_GetTypeInfo(ILabelActor* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT ILabelActor_GetIDsOfNames(ILabelActor* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT ILabelActor_Invoke(ILabelActor* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** ILabelActor methods ***/
static __WIDL_INLINE HRESULT ILabelActor_get_Name(ILabelActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_Name(ILabelActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Name(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_x(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_x(ILabelActor* This,single pRetVal) {
    return This->lpVtbl->put_x(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_y(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_y(ILabelActor* This,single pRetVal) {
    return This->lpVtbl->put_y(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_Width(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_Width(ILabelActor* This,single pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_Height(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_Height(ILabelActor* This,single pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_visible(ILabelActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_visible(ILabelActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_visible(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_FillParent(ILabelActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_FillParent(ILabelActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_FillParent(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_ClearBackground(ILabelActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_ClearBackground(ILabelActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_ClearBackground(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_SetBounds(ILabelActor* This,single x,single y,single Width,single Height) {
    return This->lpVtbl->SetBounds(This,x,y,Width,Height);
}
static __WIDL_INLINE HRESULT ILabelActor_SetPosition(ILabelActor* This,single x,single y) {
    return This->lpVtbl->SetPosition(This,x,y);
}
static __WIDL_INLINE HRESULT ILabelActor_SetAlignedPosition(ILabelActor* This,single x,single y,Alignment alignment) {
    return This->lpVtbl->SetAlignedPosition(This,x,y,alignment);
}
static __WIDL_INLINE HRESULT ILabelActor_SetSize(ILabelActor* This,single Width,single Height) {
    return This->lpVtbl->SetSize(This,Width,Height);
}
static __WIDL_INLINE HRESULT ILabelActor_get_PrefWidth(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefWidth(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_PrefHeight(ILabelActor* This,single *pRetVal) {
    return This->lpVtbl->get_PrefHeight(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_Pack(ILabelActor* This) {
    return This->lpVtbl->Pack(This);
}
static __WIDL_INLINE HRESULT ILabelActor_Remove(ILabelActor* This) {
    return This->lpVtbl->Remove(This);
}
static __WIDL_INLINE HRESULT ILabelActor_get_ActionFactory(ILabelActor* This,IActionFactory **pRetVal) {
    return This->lpVtbl->get_ActionFactory(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_AddAction(ILabelActor* This,IUnknown *action) {
    return This->lpVtbl->AddAction(This,action);
}
static __WIDL_INLINE HRESULT ILabelActor_ClearActions(ILabelActor* This) {
    return This->lpVtbl->ClearActions(This);
}
static __WIDL_INLINE HRESULT ILabelActor_get_AutoPack(ILabelActor* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_AutoPack(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_AutoPack(ILabelActor* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_AutoPack(This,pRetVal);
}
static __WIDL_INLINE void ILabelActor_Missing36(ILabelActor* This) {
    This->lpVtbl->Missing36(This);
}
static __WIDL_INLINE void ILabelActor_Missing37(ILabelActor* This) {
    This->lpVtbl->Missing37(This);
}
static __WIDL_INLINE HRESULT ILabelActor_get_Font(ILabelActor* This,IUnknown **pRetVal) {
    return This->lpVtbl->get_Font(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_putref_Font(ILabelActor* This,IUnknown *pRetVal) {
    return This->lpVtbl->putref_Font(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_get_Text(ILabelActor* This,BSTR *pRetVal) {
    return This->lpVtbl->get_Text(This,pRetVal);
}
static __WIDL_INLINE HRESULT ILabelActor_put_Text(ILabelActor* This,BSTR pRetVal) {
    return This->lpVtbl->put_Text(This,pRetVal);
}
#endif
#endif

#endif


#endif  /* __ILabelActor_INTERFACE_DEFINED__ */

typedef enum __WIDL_FlexDMD_generated_name_00000020 {
    RenderMode_DMD_GRAY_2 = 0,
    RenderMode_DMD_GRAY_4 = 1,
    RenderMode_DMD_RGB = 2,
    RenderMode_SEG_2x16Alpha = 3,
    RenderMode_SEG_2x20Alpha = 4,
    RenderMode_SEG_2x7Alpha_2x7Num = 5,
    RenderMode_SEG_2x7Alpha_2x7Num_4x1Num = 6,
    RenderMode_SEG_2x7Num_2x7Num_4x1Num = 7,
    RenderMode_SEG_2x7Num_2x7Num_10x1Num = 8,
    RenderMode_SEG_2x7Num_2x7Num_4x1Num_gen7 = 9,
    RenderMode_SEG_2x7Num10_2x7Num10_4x1Num = 10,
    RenderMode_SEG_2x6Num_2x6Num_4x1Num = 11,
    RenderMode_SEG_2x6Num10_2x6Num10_4x1Num = 12,
    RenderMode_SEG_4x7Num10 = 13,
    RenderMode_SEG_6x4Num_4x1Num = 14,
    RenderMode_SEG_2x7Num_4x1Num_1x16Alpha = 15,
    RenderMode_SEG_1x16Alpha_1x16Num_1x7Num = 16
} RenderMode;
/*****************************************************************************
 * IFlexDMD interface
 */
#ifndef __IFlexDMD_INTERFACE_DEFINED__
#define __IFlexDMD_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFlexDMD, 0xb592e61d, 0x9553, 0x4d91, 0xa0,0xf5, 0xfd,0xf1,0x11,0xe2,0x8f,0x5e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b592e61d-9553-4d91-a0f5-fdf111e28f5e")
IFlexDMD : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Version(
        LONG *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RuntimeVersion(
        LONG *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RuntimeVersion(
        LONG pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Run(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Run(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Show(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Show(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GameName(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GameName(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Width(
        unsigned short *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Width(
        unsigned short pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Height(
        unsigned short *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Height(
        unsigned short pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Color(
        OLE_COLOR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Color(
        OLE_COLOR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RenderMode(
        RenderMode *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RenderMode(
        RenderMode pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ProjectFolder(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ProjectFolder(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_TableFile(
        BSTR *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_TableFile(
        BSTR pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Clear(
        VARIANT_BOOL *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Clear(
        VARIANT_BOOL pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DmdColoredPixels(
        VARIANT *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DmdPixels(
        VARIANT *pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE putref_Segments(
        VARIANT rhs) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Stage(
        IGroupActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE LockRenderThread(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnlockRenderThread(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewGroup(
        BSTR Name,
        IGroupActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewFrame(
        BSTR Name,
        IFrameActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewLabel(
        BSTR Name,
        IUnknown *Font,
        BSTR Text,
        ILabelActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewVideo(
        BSTR Name,
        BSTR video,
        IVideoActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewImage(
        BSTR Name,
        BSTR image,
        IImageActor **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewFont(
        BSTR Font,
        OLE_COLOR tint,
        OLE_COLOR borderTint,
        LONG borderSize,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewUltraDMD(
        IUltraDMD **pRetVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFlexDMD, 0xb592e61d, 0x9553, 0x4d91, 0xa0,0xf5, 0xfd,0xf1,0x11,0xe2,0x8f,0x5e)
#endif
#else
typedef struct IFlexDMDVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFlexDMD *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFlexDMD *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFlexDMD *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFlexDMD *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFlexDMD *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFlexDMD *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFlexDMD *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFlexDMD methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IFlexDMD *This,
        LONG *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_RuntimeVersion)(
        IFlexDMD *This,
        LONG *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_RuntimeVersion)(
        IFlexDMD *This,
        LONG pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Run)(
        IFlexDMD *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Run)(
        IFlexDMD *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Show)(
        IFlexDMD *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Show)(
        IFlexDMD *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_GameName)(
        IFlexDMD *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_GameName)(
        IFlexDMD *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Width)(
        IFlexDMD *This,
        unsigned short *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Width)(
        IFlexDMD *This,
        unsigned short pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Height)(
        IFlexDMD *This,
        unsigned short *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Height)(
        IFlexDMD *This,
        unsigned short pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Color)(
        IFlexDMD *This,
        OLE_COLOR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Color)(
        IFlexDMD *This,
        OLE_COLOR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_RenderMode)(
        IFlexDMD *This,
        RenderMode *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_RenderMode)(
        IFlexDMD *This,
        RenderMode pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_ProjectFolder)(
        IFlexDMD *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_ProjectFolder)(
        IFlexDMD *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_TableFile)(
        IFlexDMD *This,
        BSTR *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_TableFile)(
        IFlexDMD *This,
        BSTR pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_Clear)(
        IFlexDMD *This,
        VARIANT_BOOL *pRetVal);

    HRESULT (STDMETHODCALLTYPE *put_Clear)(
        IFlexDMD *This,
        VARIANT_BOOL pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_DmdColoredPixels)(
        IFlexDMD *This,
        VARIANT *pRetVal);

    HRESULT (STDMETHODCALLTYPE *get_DmdPixels)(
        IFlexDMD *This,
        VARIANT *pRetVal);

    HRESULT (STDMETHODCALLTYPE *putref_Segments)(
        IFlexDMD *This,
        VARIANT rhs);

    HRESULT (STDMETHODCALLTYPE *get_Stage)(
        IFlexDMD *This,
        IGroupActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *LockRenderThread)(
        IFlexDMD *This);

    HRESULT (STDMETHODCALLTYPE *UnlockRenderThread)(
        IFlexDMD *This);

    HRESULT (STDMETHODCALLTYPE *NewGroup)(
        IFlexDMD *This,
        BSTR Name,
        IGroupActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewFrame)(
        IFlexDMD *This,
        BSTR Name,
        IFrameActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewLabel)(
        IFlexDMD *This,
        BSTR Name,
        IUnknown *Font,
        BSTR Text,
        ILabelActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewVideo)(
        IFlexDMD *This,
        BSTR Name,
        BSTR video,
        IVideoActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewImage)(
        IFlexDMD *This,
        BSTR Name,
        BSTR image,
        IImageActor **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewFont)(
        IFlexDMD *This,
        BSTR Font,
        OLE_COLOR tint,
        OLE_COLOR borderTint,
        LONG borderSize,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *NewUltraDMD)(
        IFlexDMD *This,
        IUltraDMD **pRetVal);

    END_INTERFACE
} IFlexDMDVtbl;

interface IFlexDMD {
    CONST_VTBL IFlexDMDVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFlexDMD_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFlexDMD_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFlexDMD_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFlexDMD_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFlexDMD_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFlexDMD_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFlexDMD_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFlexDMD methods ***/
#define IFlexDMD_get_Version(This,pRetVal) (This)->lpVtbl->get_Version(This,pRetVal)
#define IFlexDMD_get_RuntimeVersion(This,pRetVal) (This)->lpVtbl->get_RuntimeVersion(This,pRetVal)
#define IFlexDMD_put_RuntimeVersion(This,pRetVal) (This)->lpVtbl->put_RuntimeVersion(This,pRetVal)
#define IFlexDMD_get_Run(This,pRetVal) (This)->lpVtbl->get_Run(This,pRetVal)
#define IFlexDMD_put_Run(This,pRetVal) (This)->lpVtbl->put_Run(This,pRetVal)
#define IFlexDMD_get_Show(This,pRetVal) (This)->lpVtbl->get_Show(This,pRetVal)
#define IFlexDMD_put_Show(This,pRetVal) (This)->lpVtbl->put_Show(This,pRetVal)
#define IFlexDMD_get_GameName(This,pRetVal) (This)->lpVtbl->get_GameName(This,pRetVal)
#define IFlexDMD_put_GameName(This,pRetVal) (This)->lpVtbl->put_GameName(This,pRetVal)
#define IFlexDMD_get_Width(This,pRetVal) (This)->lpVtbl->get_Width(This,pRetVal)
#define IFlexDMD_put_Width(This,pRetVal) (This)->lpVtbl->put_Width(This,pRetVal)
#define IFlexDMD_get_Height(This,pRetVal) (This)->lpVtbl->get_Height(This,pRetVal)
#define IFlexDMD_put_Height(This,pRetVal) (This)->lpVtbl->put_Height(This,pRetVal)
#define IFlexDMD_get_Color(This,pRetVal) (This)->lpVtbl->get_Color(This,pRetVal)
#define IFlexDMD_put_Color(This,pRetVal) (This)->lpVtbl->put_Color(This,pRetVal)
#define IFlexDMD_get_RenderMode(This,pRetVal) (This)->lpVtbl->get_RenderMode(This,pRetVal)
#define IFlexDMD_put_RenderMode(This,pRetVal) (This)->lpVtbl->put_RenderMode(This,pRetVal)
#define IFlexDMD_get_ProjectFolder(This,pRetVal) (This)->lpVtbl->get_ProjectFolder(This,pRetVal)
#define IFlexDMD_put_ProjectFolder(This,pRetVal) (This)->lpVtbl->put_ProjectFolder(This,pRetVal)
#define IFlexDMD_get_TableFile(This,pRetVal) (This)->lpVtbl->get_TableFile(This,pRetVal)
#define IFlexDMD_put_TableFile(This,pRetVal) (This)->lpVtbl->put_TableFile(This,pRetVal)
#define IFlexDMD_get_Clear(This,pRetVal) (This)->lpVtbl->get_Clear(This,pRetVal)
#define IFlexDMD_put_Clear(This,pRetVal) (This)->lpVtbl->put_Clear(This,pRetVal)
#define IFlexDMD_get_DmdColoredPixels(This,pRetVal) (This)->lpVtbl->get_DmdColoredPixels(This,pRetVal)
#define IFlexDMD_get_DmdPixels(This,pRetVal) (This)->lpVtbl->get_DmdPixels(This,pRetVal)
#define IFlexDMD_putref_Segments(This,rhs) (This)->lpVtbl->putref_Segments(This,rhs)
#define IFlexDMD_get_Stage(This,pRetVal) (This)->lpVtbl->get_Stage(This,pRetVal)
#define IFlexDMD_LockRenderThread(This) (This)->lpVtbl->LockRenderThread(This)
#define IFlexDMD_UnlockRenderThread(This) (This)->lpVtbl->UnlockRenderThread(This)
#define IFlexDMD_NewGroup(This,Name,pRetVal) (This)->lpVtbl->NewGroup(This,Name,pRetVal)
#define IFlexDMD_NewFrame(This,Name,pRetVal) (This)->lpVtbl->NewFrame(This,Name,pRetVal)
#define IFlexDMD_NewLabel(This,Name,Font,Text,pRetVal) (This)->lpVtbl->NewLabel(This,Name,Font,Text,pRetVal)
#define IFlexDMD_NewVideo(This,Name,video,pRetVal) (This)->lpVtbl->NewVideo(This,Name,video,pRetVal)
#define IFlexDMD_NewImage(This,Name,image,pRetVal) (This)->lpVtbl->NewImage(This,Name,image,pRetVal)
#define IFlexDMD_NewFont(This,Font,tint,borderTint,borderSize,pRetVal) (This)->lpVtbl->NewFont(This,Font,tint,borderTint,borderSize,pRetVal)
#define IFlexDMD_NewUltraDMD(This,pRetVal) (This)->lpVtbl->NewUltraDMD(This,pRetVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IFlexDMD_QueryInterface(IFlexDMD* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IFlexDMD_AddRef(IFlexDMD* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IFlexDMD_Release(IFlexDMD* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IFlexDMD_GetTypeInfoCount(IFlexDMD* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IFlexDMD_GetTypeInfo(IFlexDMD* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IFlexDMD_GetIDsOfNames(IFlexDMD* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IFlexDMD_Invoke(IFlexDMD* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFlexDMD methods ***/
static __WIDL_INLINE HRESULT IFlexDMD_get_Version(IFlexDMD* This,LONG *pRetVal) {
    return This->lpVtbl->get_Version(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_RuntimeVersion(IFlexDMD* This,LONG *pRetVal) {
    return This->lpVtbl->get_RuntimeVersion(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_RuntimeVersion(IFlexDMD* This,LONG pRetVal) {
    return This->lpVtbl->put_RuntimeVersion(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Run(IFlexDMD* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Run(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Run(IFlexDMD* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Run(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Show(IFlexDMD* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Show(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Show(IFlexDMD* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Show(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_GameName(IFlexDMD* This,BSTR *pRetVal) {
    return This->lpVtbl->get_GameName(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_GameName(IFlexDMD* This,BSTR pRetVal) {
    return This->lpVtbl->put_GameName(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Width(IFlexDMD* This,unsigned short *pRetVal) {
    return This->lpVtbl->get_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Width(IFlexDMD* This,unsigned short pRetVal) {
    return This->lpVtbl->put_Width(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Height(IFlexDMD* This,unsigned short *pRetVal) {
    return This->lpVtbl->get_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Height(IFlexDMD* This,unsigned short pRetVal) {
    return This->lpVtbl->put_Height(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Color(IFlexDMD* This,OLE_COLOR *pRetVal) {
    return This->lpVtbl->get_Color(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Color(IFlexDMD* This,OLE_COLOR pRetVal) {
    return This->lpVtbl->put_Color(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_RenderMode(IFlexDMD* This,RenderMode *pRetVal) {
    return This->lpVtbl->get_RenderMode(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_RenderMode(IFlexDMD* This,RenderMode pRetVal) {
    return This->lpVtbl->put_RenderMode(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_ProjectFolder(IFlexDMD* This,BSTR *pRetVal) {
    return This->lpVtbl->get_ProjectFolder(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_ProjectFolder(IFlexDMD* This,BSTR pRetVal) {
    return This->lpVtbl->put_ProjectFolder(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_TableFile(IFlexDMD* This,BSTR *pRetVal) {
    return This->lpVtbl->get_TableFile(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_TableFile(IFlexDMD* This,BSTR pRetVal) {
    return This->lpVtbl->put_TableFile(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Clear(IFlexDMD* This,VARIANT_BOOL *pRetVal) {
    return This->lpVtbl->get_Clear(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_put_Clear(IFlexDMD* This,VARIANT_BOOL pRetVal) {
    return This->lpVtbl->put_Clear(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_DmdColoredPixels(IFlexDMD* This,VARIANT *pRetVal) {
    return This->lpVtbl->get_DmdColoredPixels(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_DmdPixels(IFlexDMD* This,VARIANT *pRetVal) {
    return This->lpVtbl->get_DmdPixels(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_putref_Segments(IFlexDMD* This,VARIANT rhs) {
    return This->lpVtbl->putref_Segments(This,rhs);
}
static __WIDL_INLINE HRESULT IFlexDMD_get_Stage(IFlexDMD* This,IGroupActor **pRetVal) {
    return This->lpVtbl->get_Stage(This,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_LockRenderThread(IFlexDMD* This) {
    return This->lpVtbl->LockRenderThread(This);
}
static __WIDL_INLINE HRESULT IFlexDMD_UnlockRenderThread(IFlexDMD* This) {
    return This->lpVtbl->UnlockRenderThread(This);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewGroup(IFlexDMD* This,BSTR Name,IGroupActor **pRetVal) {
    return This->lpVtbl->NewGroup(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewFrame(IFlexDMD* This,BSTR Name,IFrameActor **pRetVal) {
    return This->lpVtbl->NewFrame(This,Name,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewLabel(IFlexDMD* This,BSTR Name,IUnknown *Font,BSTR Text,ILabelActor **pRetVal) {
    return This->lpVtbl->NewLabel(This,Name,Font,Text,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewVideo(IFlexDMD* This,BSTR Name,BSTR video,IVideoActor **pRetVal) {
    return This->lpVtbl->NewVideo(This,Name,video,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewImage(IFlexDMD* This,BSTR Name,BSTR image,IImageActor **pRetVal) {
    return This->lpVtbl->NewImage(This,Name,image,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewFont(IFlexDMD* This,BSTR Font,OLE_COLOR tint,OLE_COLOR borderTint,LONG borderSize,IUnknown **pRetVal) {
    return This->lpVtbl->NewFont(This,Font,tint,borderTint,borderSize,pRetVal);
}
static __WIDL_INLINE HRESULT IFlexDMD_NewUltraDMD(IFlexDMD* This,IUltraDMD **pRetVal) {
    return This->lpVtbl->NewUltraDMD(This,pRetVal);
}
#endif
#endif

#endif


#endif  /* __IFlexDMD_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDMDObjectEvents dispinterface
 */
#ifndef __IDMDObjectEvents_DISPINTERFACE_DEFINED__
#define __IDMDObjectEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IDMDObjectEvents, 0x83fbf3e4, 0xb4f4, 0x415a, 0x9a,0x5b, 0x7c,0x2f,0x63,0x5f,0xf8,0x3b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("83fbf3e4-b4f4-415a-9a5b-7c2f635ff83b")
IDMDObjectEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDMDObjectEvents, 0x83fbf3e4, 0xb4f4, 0x415a, 0x9a,0x5b, 0x7c,0x2f,0x63,0x5f,0xf8,0x3b)
#endif
#else
typedef struct IDMDObjectEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDMDObjectEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDMDObjectEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDMDObjectEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDMDObjectEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDMDObjectEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDMDObjectEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDMDObjectEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IDMDObjectEventsVtbl;

interface IDMDObjectEvents {
    CONST_VTBL IDMDObjectEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDMDObjectEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDMDObjectEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDMDObjectEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDMDObjectEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDMDObjectEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDMDObjectEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDMDObjectEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDMDObjectEvents_QueryInterface(IDMDObjectEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDMDObjectEvents_AddRef(IDMDObjectEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDMDObjectEvents_Release(IDMDObjectEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IDMDObjectEvents_GetTypeInfoCount(IDMDObjectEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IDMDObjectEvents_GetTypeInfo(IDMDObjectEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IDMDObjectEvents_GetIDsOfNames(IDMDObjectEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IDMDObjectEvents_Invoke(IDMDObjectEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IDMDObjectEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * IUltraDMD dispinterface
 */
#ifndef __IUltraDMD_DISPINTERFACE_DEFINED__
#define __IUltraDMD_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_IUltraDMD, 0xf7e68187, 0x251f, 0x4dfb, 0xaf,0x79, 0xf1,0xd4,0xd6,0x9e,0xe1,0x88);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f7e68187-251f-4dfb-af79-f1d4d69ee188")
IUltraDMD : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IUltraDMD, 0xf7e68187, 0x251f, 0x4dfb, 0xaf,0x79, 0xf1,0xd4,0xd6,0x9e,0xe1,0x88)
#endif
#else
typedef struct IUltraDMDVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IUltraDMD *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IUltraDMD *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IUltraDMD *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IUltraDMD *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IUltraDMD *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IUltraDMD *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IUltraDMD *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} IUltraDMDVtbl;

interface IUltraDMD {
    CONST_VTBL IUltraDMDVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IUltraDMD_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IUltraDMD_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IUltraDMD_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IUltraDMD_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IUltraDMD_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IUltraDMD_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IUltraDMD_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IUltraDMD_QueryInterface(IUltraDMD* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IUltraDMD_AddRef(IUltraDMD* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IUltraDMD_Release(IUltraDMD* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IUltraDMD_GetTypeInfoCount(IUltraDMD* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IUltraDMD_GetTypeInfo(IUltraDMD* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IUltraDMD_GetIDsOfNames(IUltraDMD* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IUltraDMD_Invoke(IUltraDMD* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* __IUltraDMD_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * FlexDMD coclass
 */

DEFINE_GUID(CLSID_FlexDMD, 0x766e10d3, 0xdfe3, 0x4e1b, 0xac,0x99, 0xc4,0xd2,0xbe,0x16,0xe9,0x1f);

#ifdef __cplusplus
class DECLSPEC_UUID("766e10d3-dfe3-4e1b-ac99-c4d2be16e91f") FlexDMD;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(FlexDMD, 0x766e10d3, 0xdfe3, 0x4e1b, 0xac,0x99, 0xc4,0xd2,0xbe,0x16,0xe9,0x1f)
#endif
#endif

#endif /* __FlexDMD_LIBRARY_DEFINED__ */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __flexdmd_i_h__ */
