/*** Autogenerated by WIDL 8.21 from ../inc/vpinmame/VPinMAME.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __vpinmame_i_h__
#define __vpinmame_i_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __IRom_FWD_DEFINED__
#define __IRom_FWD_DEFINED__
typedef interface IRom IRom;
#ifdef __cplusplus
interface IRom;
#endif /* __cplusplus */
#endif

#ifndef __IRoms_FWD_DEFINED__
#define __IRoms_FWD_DEFINED__
typedef interface IRoms IRoms;
#ifdef __cplusplus
interface IRoms;
#endif /* __cplusplus */
#endif

#ifndef __IEnumRoms_FWD_DEFINED__
#define __IEnumRoms_FWD_DEFINED__
typedef interface IEnumRoms IEnumRoms;
#ifdef __cplusplus
interface IEnumRoms;
#endif /* __cplusplus */
#endif

#ifndef __IGameSettings_FWD_DEFINED__
#define __IGameSettings_FWD_DEFINED__
typedef interface IGameSettings IGameSettings;
#ifdef __cplusplus
interface IGameSettings;
#endif /* __cplusplus */
#endif

#ifndef __IGame_FWD_DEFINED__
#define __IGame_FWD_DEFINED__
typedef interface IGame IGame;
#ifdef __cplusplus
interface IGame;
#endif /* __cplusplus */
#endif

#ifndef __IGames_FWD_DEFINED__
#define __IGames_FWD_DEFINED__
typedef interface IGames IGames;
#ifdef __cplusplus
interface IGames;
#endif /* __cplusplus */
#endif

#ifndef __IEnumGames_FWD_DEFINED__
#define __IEnumGames_FWD_DEFINED__
typedef interface IEnumGames IEnumGames;
#ifdef __cplusplus
interface IEnumGames;
#endif /* __cplusplus */
#endif

#ifndef __IControllerSettings_FWD_DEFINED__
#define __IControllerSettings_FWD_DEFINED__
typedef interface IControllerSettings IControllerSettings;
#ifdef __cplusplus
interface IControllerSettings;
#endif /* __cplusplus */
#endif

#ifndef __IController_FWD_DEFINED__
#define __IController_FWD_DEFINED__
typedef interface IController IController;
#ifdef __cplusplus
interface IController;
#endif /* __cplusplus */
#endif

#ifndef __IWSHDlgCtrl_FWD_DEFINED__
#define __IWSHDlgCtrl_FWD_DEFINED__
typedef interface IWSHDlgCtrl IWSHDlgCtrl;
#ifdef __cplusplus
interface IWSHDlgCtrl;
#endif /* __cplusplus */
#endif

#ifndef __IWSHDlgCtrls_FWD_DEFINED__
#define __IWSHDlgCtrls_FWD_DEFINED__
typedef interface IWSHDlgCtrls IWSHDlgCtrls;
#ifdef __cplusplus
interface IWSHDlgCtrls;
#endif /* __cplusplus */
#endif

#ifndef __IEnumWSHDlgCtrls_FWD_DEFINED__
#define __IEnumWSHDlgCtrls_FWD_DEFINED__
typedef interface IEnumWSHDlgCtrls IEnumWSHDlgCtrls;
#ifdef __cplusplus
interface IEnumWSHDlgCtrls;
#endif /* __cplusplus */
#endif

#ifndef __IWSHDlg_FWD_DEFINED__
#define __IWSHDlg_FWD_DEFINED__
typedef interface IWSHDlg IWSHDlg;
#ifdef __cplusplus
interface IWSHDlg;
#endif /* __cplusplus */
#endif

#ifndef __Game_FWD_DEFINED__
#define __Game_FWD_DEFINED__
#ifdef __cplusplus
typedef class Game Game;
#else
typedef struct Game Game;
#endif /* defined __cplusplus */
#endif /* defined __Game_FWD_DEFINED__ */

#ifndef __GameSettings_FWD_DEFINED__
#define __GameSettings_FWD_DEFINED__
#ifdef __cplusplus
typedef class GameSettings GameSettings;
#else
typedef struct GameSettings GameSettings;
#endif /* defined __cplusplus */
#endif /* defined __GameSettings_FWD_DEFINED__ */

#ifndef __Games_FWD_DEFINED__
#define __Games_FWD_DEFINED__
#ifdef __cplusplus
typedef class Games Games;
#else
typedef struct Games Games;
#endif /* defined __cplusplus */
#endif /* defined __Games_FWD_DEFINED__ */

#ifndef __EnumGames_FWD_DEFINED__
#define __EnumGames_FWD_DEFINED__
#ifdef __cplusplus
typedef class EnumGames EnumGames;
#else
typedef struct EnumGames EnumGames;
#endif /* defined __cplusplus */
#endif /* defined __EnumGames_FWD_DEFINED__ */

#ifndef __Rom_FWD_DEFINED__
#define __Rom_FWD_DEFINED__
#ifdef __cplusplus
typedef class Rom Rom;
#else
typedef struct Rom Rom;
#endif /* defined __cplusplus */
#endif /* defined __Rom_FWD_DEFINED__ */

#ifndef __Roms_FWD_DEFINED__
#define __Roms_FWD_DEFINED__
#ifdef __cplusplus
typedef class Roms Roms;
#else
typedef struct Roms Roms;
#endif /* defined __cplusplus */
#endif /* defined __Roms_FWD_DEFINED__ */

#ifndef __EnumRoms_FWD_DEFINED__
#define __EnumRoms_FWD_DEFINED__
#ifdef __cplusplus
typedef class EnumRoms EnumRoms;
#else
typedef struct EnumRoms EnumRoms;
#endif /* defined __cplusplus */
#endif /* defined __EnumRoms_FWD_DEFINED__ */

#ifndef ___IControllerEvents_FWD_DEFINED__
#define ___IControllerEvents_FWD_DEFINED__
typedef interface _IControllerEvents _IControllerEvents;
#ifdef __cplusplus
interface _IControllerEvents;
#endif /* __cplusplus */
#endif

#ifndef __ControllerSettings_FWD_DEFINED__
#define __ControllerSettings_FWD_DEFINED__
#ifdef __cplusplus
typedef class ControllerSettings ControllerSettings;
#else
typedef struct ControllerSettings ControllerSettings;
#endif /* defined __cplusplus */
#endif /* defined __ControllerSettings_FWD_DEFINED__ */

#ifndef __Controller_FWD_DEFINED__
#define __Controller_FWD_DEFINED__
#ifdef __cplusplus
typedef class Controller Controller;
#else
typedef struct Controller Controller;
#endif /* defined __cplusplus */
#endif /* defined __Controller_FWD_DEFINED__ */

#ifndef __WSHDlgCtrl_FWD_DEFINED__
#define __WSHDlgCtrl_FWD_DEFINED__
#ifdef __cplusplus
typedef class WSHDlgCtrl WSHDlgCtrl;
#else
typedef struct WSHDlgCtrl WSHDlgCtrl;
#endif /* defined __cplusplus */
#endif /* defined __WSHDlgCtrl_FWD_DEFINED__ */

#ifndef __WSHDlgCtrls_FWD_DEFINED__
#define __WSHDlgCtrls_FWD_DEFINED__
#ifdef __cplusplus
typedef class WSHDlgCtrls WSHDlgCtrls;
#else
typedef struct WSHDlgCtrls WSHDlgCtrls;
#endif /* defined __cplusplus */
#endif /* defined __WSHDlgCtrls_FWD_DEFINED__ */

#ifndef __EnumWSHDlgCtrls_FWD_DEFINED__
#define __EnumWSHDlgCtrls_FWD_DEFINED__
#ifdef __cplusplus
typedef class EnumWSHDlgCtrls EnumWSHDlgCtrls;
#else
typedef struct EnumWSHDlgCtrls EnumWSHDlgCtrls;
#endif /* defined __cplusplus */
#endif /* defined __EnumWSHDlgCtrls_FWD_DEFINED__ */

#ifndef __WSHDlg_FWD_DEFINED__
#define __WSHDlg_FWD_DEFINED__
#ifdef __cplusplus
typedef class WSHDlg WSHDlg;
#else
typedef struct WSHDlg WSHDlg;
#endif /* defined __cplusplus */
#endif /* defined __WSHDlg_FWD_DEFINED__ */

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IRom interface
 */
#ifndef __IRom_INTERFACE_DEFINED__
#define __IRom_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRom, 0xaf29eada, 0x63c3, 0x4cb9, 0x89,0xab, 0x1a,0x8d,0x2f,0x28,0x07,0x10);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("af29eada-63c3-4cb9-89ab-1a8d2f280710")
IRom : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_State(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StateDescription(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Audit(
        VARIANT_BOOL fStrict = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Length(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ExpLength(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Checksum(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ExpChecksum(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Flags(
        LONG *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRom, 0xaf29eada, 0x63c3, 0x4cb9, 0x89,0xab, 0x1a,0x8d,0x2f,0x28,0x07,0x10)
#endif
#else
typedef struct IRomVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRom *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRom *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRom *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRom *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRom *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRom *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRom *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IRom methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IRom *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_State)(
        IRom *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_StateDescription)(
        IRom *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *Audit)(
        IRom *This,
        VARIANT_BOOL fStrict);

    HRESULT (STDMETHODCALLTYPE *get_Length)(
        IRom *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ExpLength)(
        IRom *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Checksum)(
        IRom *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ExpChecksum)(
        IRom *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Flags)(
        IRom *This,
        LONG *pVal);

    END_INTERFACE
} IRomVtbl;

interface IRom {
    CONST_VTBL IRomVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRom_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRom_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRom_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRom_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRom_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRom_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRom_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IRom methods ***/
#define IRom_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IRom_get_State(This,pVal) (This)->lpVtbl->get_State(This,pVal)
#define IRom_get_StateDescription(This,pVal) (This)->lpVtbl->get_StateDescription(This,pVal)
#define IRom_Audit(This,fStrict) (This)->lpVtbl->Audit(This,fStrict)
#define IRom_get_Length(This,pVal) (This)->lpVtbl->get_Length(This,pVal)
#define IRom_get_ExpLength(This,pVal) (This)->lpVtbl->get_ExpLength(This,pVal)
#define IRom_get_Checksum(This,pVal) (This)->lpVtbl->get_Checksum(This,pVal)
#define IRom_get_ExpChecksum(This,pVal) (This)->lpVtbl->get_ExpChecksum(This,pVal)
#define IRom_get_Flags(This,pVal) (This)->lpVtbl->get_Flags(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRom_QueryInterface(IRom* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRom_AddRef(IRom* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRom_Release(IRom* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRom_GetTypeInfoCount(IRom* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRom_GetTypeInfo(IRom* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRom_GetIDsOfNames(IRom* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRom_Invoke(IRom* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IRom methods ***/
static __WIDL_INLINE HRESULT IRom_get_Name(IRom* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_State(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_State(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_StateDescription(IRom* This,BSTR *pVal) {
    return This->lpVtbl->get_StateDescription(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_Audit(IRom* This,VARIANT_BOOL fStrict) {
    return This->lpVtbl->Audit(This,fStrict);
}
static __WIDL_INLINE HRESULT IRom_get_Length(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_Length(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_ExpLength(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_ExpLength(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_Checksum(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_Checksum(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_ExpChecksum(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_ExpChecksum(This,pVal);
}
static __WIDL_INLINE HRESULT IRom_get_Flags(IRom* This,LONG *pVal) {
    return This->lpVtbl->get_Flags(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IRom_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRoms interface
 */
#ifndef __IRoms_INTERFACE_DEFINED__
#define __IRoms_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRoms, 0xfdad01ba, 0xce74, 0x46aa, 0xa1,0xbc, 0x6a,0x17,0x6a,0xb2,0x29,0x02);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fdad01ba-ce74-46aa-a1bc-6a176ab22902")
IRoms : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *pnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT *pKey,
        IRom **ppGame) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppunkEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Available(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_State(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StateDescription(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Audit(
        VARIANT_BOOL fStrict = 0) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRoms, 0xfdad01ba, 0xce74, 0x46aa, 0xa1,0xbc, 0x6a,0x17,0x6a,0xb2,0x29,0x02)
#endif
#else
typedef struct IRomsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRoms *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRoms *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRoms *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRoms *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRoms *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRoms *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRoms *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IRoms methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IRoms *This,
        LONG *pnCount);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IRoms *This,
        VARIANT *pKey,
        IRom **ppGame);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IRoms *This,
        IUnknown **ppunkEnum);

    HRESULT (STDMETHODCALLTYPE *get_Available)(
        IRoms *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_State)(
        IRoms *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *get_StateDescription)(
        IRoms *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *Audit)(
        IRoms *This,
        VARIANT_BOOL fStrict);

    END_INTERFACE
} IRomsVtbl;

interface IRoms {
    CONST_VTBL IRomsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRoms_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRoms_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRoms_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRoms_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRoms_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRoms_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRoms_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IRoms methods ***/
#define IRoms_get_Count(This,pnCount) (This)->lpVtbl->get_Count(This,pnCount)
#define IRoms_get_Item(This,pKey,ppGame) (This)->lpVtbl->get_Item(This,pKey,ppGame)
#define IRoms_get__NewEnum(This,ppunkEnum) (This)->lpVtbl->get__NewEnum(This,ppunkEnum)
#define IRoms_get_Available(This,pVal) (This)->lpVtbl->get_Available(This,pVal)
#define IRoms_get_State(This,pVal) (This)->lpVtbl->get_State(This,pVal)
#define IRoms_get_StateDescription(This,pVal) (This)->lpVtbl->get_StateDescription(This,pVal)
#define IRoms_Audit(This,fStrict) (This)->lpVtbl->Audit(This,fStrict)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRoms_QueryInterface(IRoms* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRoms_AddRef(IRoms* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRoms_Release(IRoms* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IRoms_GetTypeInfoCount(IRoms* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IRoms_GetTypeInfo(IRoms* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IRoms_GetIDsOfNames(IRoms* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IRoms_Invoke(IRoms* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IRoms methods ***/
static __WIDL_INLINE HRESULT IRoms_get_Count(IRoms* This,LONG *pnCount) {
    return This->lpVtbl->get_Count(This,pnCount);
}
static __WIDL_INLINE HRESULT IRoms_get_Item(IRoms* This,VARIANT *pKey,IRom **ppGame) {
    return This->lpVtbl->get_Item(This,pKey,ppGame);
}
static __WIDL_INLINE HRESULT IRoms_get__NewEnum(IRoms* This,IUnknown **ppunkEnum) {
    return This->lpVtbl->get__NewEnum(This,ppunkEnum);
}
static __WIDL_INLINE HRESULT IRoms_get_Available(IRoms* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Available(This,pVal);
}
static __WIDL_INLINE HRESULT IRoms_get_State(IRoms* This,LONG *pVal) {
    return This->lpVtbl->get_State(This,pVal);
}
static __WIDL_INLINE HRESULT IRoms_get_StateDescription(IRoms* This,BSTR *pVal) {
    return This->lpVtbl->get_StateDescription(This,pVal);
}
static __WIDL_INLINE HRESULT IRoms_Audit(IRoms* This,VARIANT_BOOL fStrict) {
    return This->lpVtbl->Audit(This,fStrict);
}
#endif
#endif

#endif


#endif  /* __IRoms_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumRoms interface
 */
#ifndef __IEnumRoms_INTERFACE_DEFINED__
#define __IEnumRoms_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumRoms, 0x821a5916, 0xa71f, 0x4ae0, 0xb4,0x8e, 0xda,0x6f,0xfc,0x0a,0xf6,0xcd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("821a5916-a71f-4ae0-b48e-da6ffc0af6cd")
IEnumRoms : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        ULONG celt) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IUnknown **ppEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumRoms, 0x821a5916, 0xa71f, 0x4ae0, 0xb4,0x8e, 0xda,0x6f,0xfc,0x0a,0xf6,0xcd)
#endif
#else
typedef struct IEnumRomsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumRoms *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumRoms *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumRoms *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IEnumRoms *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IEnumRoms *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IEnumRoms *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IEnumRoms *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IEnumRoms methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumRoms *This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumRoms *This,
        ULONG celt);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumRoms *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumRoms *This,
        IUnknown **ppEnum);

    END_INTERFACE
} IEnumRomsVtbl;

interface IEnumRoms {
    CONST_VTBL IEnumRomsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumRoms_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumRoms_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumRoms_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IEnumRoms_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IEnumRoms_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IEnumRoms_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IEnumRoms_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IEnumRoms methods ***/
#define IEnumRoms_Next(This,celt,rgVar,pCeltFetched) (This)->lpVtbl->Next(This,celt,rgVar,pCeltFetched)
#define IEnumRoms_Skip(This,celt) (This)->lpVtbl->Skip(This,celt)
#define IEnumRoms_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumRoms_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IEnumRoms_QueryInterface(IEnumRoms* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IEnumRoms_AddRef(IEnumRoms* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IEnumRoms_Release(IEnumRoms* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IEnumRoms_GetTypeInfoCount(IEnumRoms* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IEnumRoms_GetTypeInfo(IEnumRoms* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IEnumRoms_GetIDsOfNames(IEnumRoms* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IEnumRoms_Invoke(IEnumRoms* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IEnumRoms methods ***/
static __WIDL_INLINE HRESULT IEnumRoms_Next(IEnumRoms* This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched) {
    return This->lpVtbl->Next(This,celt,rgVar,pCeltFetched);
}
static __WIDL_INLINE HRESULT IEnumRoms_Skip(IEnumRoms* This,ULONG celt) {
    return This->lpVtbl->Skip(This,celt);
}
static __WIDL_INLINE HRESULT IEnumRoms_Reset(IEnumRoms* This) {
    return This->lpVtbl->Reset(This);
}
static __WIDL_INLINE HRESULT IEnumRoms_Clone(IEnumRoms* This,IUnknown **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
#endif
#endif

#endif


#endif  /* __IEnumRoms_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IGameSettings interface
 */
#ifndef __IGameSettings_INTERFACE_DEFINED__
#define __IGameSettings_INTERFACE_DEFINED__

DEFINE_GUID(IID_IGameSettings, 0x693c0a27, 0xa067, 0x4895, 0xb9,0x48, 0x65,0x91,0x25,0x51,0xe7,0xc3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("693c0a27-a067-4895-b948-65912551e7c3")
IGameSettings : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE ShowSettingsDlg(
        LONG_PTR hParentWnd = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clear(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Value(
        BSTR sName,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Value(
        BSTR sName,
        VARIANT newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDisplayPosition(
        VARIANT newValX,
        VARIANT newValY,
        LONG_PTR hWnd = 0) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGameSettings, 0x693c0a27, 0xa067, 0x4895, 0xb9,0x48, 0x65,0x91,0x25,0x51,0xe7,0xc3)
#endif
#else
typedef struct IGameSettingsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGameSettings *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGameSettings *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGameSettings *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGameSettings *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGameSettings *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGameSettings *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGameSettings *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IGameSettings methods ***/
    HRESULT (STDMETHODCALLTYPE *ShowSettingsDlg)(
        IGameSettings *This,
        LONG_PTR hParentWnd);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        IGameSettings *This);

    HRESULT (STDMETHODCALLTYPE *get_Value)(
        IGameSettings *This,
        BSTR sName,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Value)(
        IGameSettings *This,
        BSTR sName,
        VARIANT newVal);

    HRESULT (STDMETHODCALLTYPE *SetDisplayPosition)(
        IGameSettings *This,
        VARIANT newValX,
        VARIANT newValY,
        LONG_PTR hWnd);

    END_INTERFACE
} IGameSettingsVtbl;

interface IGameSettings {
    CONST_VTBL IGameSettingsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGameSettings_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGameSettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGameSettings_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGameSettings_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGameSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGameSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGameSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IGameSettings methods ***/
#define IGameSettings_ShowSettingsDlg(This,hParentWnd) (This)->lpVtbl->ShowSettingsDlg(This,hParentWnd)
#define IGameSettings_Clear(This) (This)->lpVtbl->Clear(This)
#define IGameSettings_get_Value(This,sName,pVal) (This)->lpVtbl->get_Value(This,sName,pVal)
#define IGameSettings_put_Value(This,sName,newVal) (This)->lpVtbl->put_Value(This,sName,newVal)
#define IGameSettings_SetDisplayPosition(This,newValX,newValY,hWnd) (This)->lpVtbl->SetDisplayPosition(This,newValX,newValY,hWnd)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGameSettings_QueryInterface(IGameSettings* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGameSettings_AddRef(IGameSettings* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGameSettings_Release(IGameSettings* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGameSettings_GetTypeInfoCount(IGameSettings* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGameSettings_GetTypeInfo(IGameSettings* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGameSettings_GetIDsOfNames(IGameSettings* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGameSettings_Invoke(IGameSettings* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IGameSettings methods ***/
static __WIDL_INLINE HRESULT IGameSettings_ShowSettingsDlg(IGameSettings* This,LONG_PTR hParentWnd) {
    return This->lpVtbl->ShowSettingsDlg(This,hParentWnd);
}
static __WIDL_INLINE HRESULT IGameSettings_Clear(IGameSettings* This) {
    return This->lpVtbl->Clear(This);
}
static __WIDL_INLINE HRESULT IGameSettings_get_Value(IGameSettings* This,BSTR sName,VARIANT *pVal) {
    return This->lpVtbl->get_Value(This,sName,pVal);
}
static __WIDL_INLINE HRESULT IGameSettings_put_Value(IGameSettings* This,BSTR sName,VARIANT newVal) {
    return This->lpVtbl->put_Value(This,sName,newVal);
}
static __WIDL_INLINE HRESULT IGameSettings_SetDisplayPosition(IGameSettings* This,VARIANT newValX,VARIANT newValY,LONG_PTR hWnd) {
    return This->lpVtbl->SetDisplayPosition(This,newValX,newValY,hWnd);
}
#endif
#endif

#endif


#endif  /* __IGameSettings_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IGame interface
 */
#ifndef __IGame_INTERFACE_DEFINED__
#define __IGame_INTERFACE_DEFINED__

DEFINE_GUID(IID_IGame, 0xbd262bee, 0x902b, 0x47d2, 0x8c,0xc4, 0x54,0x89,0x0b,0xb7,0xdc,0x1c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bd262bee-902b-47d2-8cc4-54890bb7dc1c")
IGame : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Description(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Year(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Manufacturer(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CloneOf(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Roms(
        IRoms **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Settings(
        IGameSettings **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowInfoDlg(
        int nShowOptions,
        LONG_PTR hParentWnd,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
        VARIANT_BOOL *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGame, 0xbd262bee, 0x902b, 0x47d2, 0x8c,0xc4, 0x54,0x89,0x0b,0xb7,0xdc,0x1c)
#endif
#else
typedef struct IGameVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGame *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGame *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGame *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGame *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGame *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGame *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGame *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IGame methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IGame *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IGame *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Year)(
        IGame *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Manufacturer)(
        IGame *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_CloneOf)(
        IGame *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Roms)(
        IGame *This,
        IRoms **pVal);

    HRESULT (STDMETHODCALLTYPE *get_Settings)(
        IGame *This,
        IGameSettings **pVal);

    HRESULT (STDMETHODCALLTYPE *ShowInfoDlg)(
        IGame *This,
        int nShowOptions,
        LONG_PTR hParentWnd,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_IsSupported)(
        IGame *This,
        VARIANT_BOOL *pVal);

    END_INTERFACE
} IGameVtbl;

interface IGame {
    CONST_VTBL IGameVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGame_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGame_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGame_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGame_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGame_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IGame methods ***/
#define IGame_get_Name(This,pVal) (This)->lpVtbl->get_Name(This,pVal)
#define IGame_get_Description(This,pVal) (This)->lpVtbl->get_Description(This,pVal)
#define IGame_get_Year(This,pVal) (This)->lpVtbl->get_Year(This,pVal)
#define IGame_get_Manufacturer(This,pVal) (This)->lpVtbl->get_Manufacturer(This,pVal)
#define IGame_get_CloneOf(This,pVal) (This)->lpVtbl->get_CloneOf(This,pVal)
#define IGame_get_Roms(This,pVal) (This)->lpVtbl->get_Roms(This,pVal)
#define IGame_get_Settings(This,pVal) (This)->lpVtbl->get_Settings(This,pVal)
#define IGame_ShowInfoDlg(This,nShowOptions,hParentWnd,pVal) (This)->lpVtbl->ShowInfoDlg(This,nShowOptions,hParentWnd,pVal)
#define IGame_get_IsSupported(This,pVal) (This)->lpVtbl->get_IsSupported(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGame_QueryInterface(IGame* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGame_AddRef(IGame* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGame_Release(IGame* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGame_GetTypeInfoCount(IGame* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGame_GetTypeInfo(IGame* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGame_GetIDsOfNames(IGame* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGame_Invoke(IGame* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IGame methods ***/
static __WIDL_INLINE HRESULT IGame_get_Name(IGame* This,BSTR *pVal) {
    return This->lpVtbl->get_Name(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_Description(IGame* This,BSTR *pVal) {
    return This->lpVtbl->get_Description(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_Year(IGame* This,BSTR *pVal) {
    return This->lpVtbl->get_Year(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_Manufacturer(IGame* This,BSTR *pVal) {
    return This->lpVtbl->get_Manufacturer(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_CloneOf(IGame* This,BSTR *pVal) {
    return This->lpVtbl->get_CloneOf(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_Roms(IGame* This,IRoms **pVal) {
    return This->lpVtbl->get_Roms(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_Settings(IGame* This,IGameSettings **pVal) {
    return This->lpVtbl->get_Settings(This,pVal);
}
static __WIDL_INLINE HRESULT IGame_ShowInfoDlg(IGame* This,int nShowOptions,LONG_PTR hParentWnd,int *pVal) {
    return This->lpVtbl->ShowInfoDlg(This,nShowOptions,hParentWnd,pVal);
}
static __WIDL_INLINE HRESULT IGame_get_IsSupported(IGame* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IsSupported(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IGame_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IGames interface
 */
#ifndef __IGames_INTERFACE_DEFINED__
#define __IGames_INTERFACE_DEFINED__

DEFINE_GUID(IID_IGames, 0x0f7b0ec8, 0x343f, 0x48d3, 0xb3,0xb8, 0x98,0xba,0x4a,0xc6,0x21,0xe9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0f7b0ec8-343f-48d3-b3b8-98ba4ac621e9")
IGames : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *pnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT *pKey,
        IGame **ppGame) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppunkEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IGames, 0x0f7b0ec8, 0x343f, 0x48d3, 0xb3,0xb8, 0x98,0xba,0x4a,0xc6,0x21,0xe9)
#endif
#else
typedef struct IGamesVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IGames *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IGames *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IGames *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IGames *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IGames *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IGames *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IGames *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IGames methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IGames *This,
        LONG *pnCount);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IGames *This,
        VARIANT *pKey,
        IGame **ppGame);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IGames *This,
        IUnknown **ppunkEnum);

    END_INTERFACE
} IGamesVtbl;

interface IGames {
    CONST_VTBL IGamesVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IGames_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IGames_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IGames_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IGames_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IGames_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IGames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IGames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IGames methods ***/
#define IGames_get_Count(This,pnCount) (This)->lpVtbl->get_Count(This,pnCount)
#define IGames_get_Item(This,pKey,ppGame) (This)->lpVtbl->get_Item(This,pKey,ppGame)
#define IGames_get__NewEnum(This,ppunkEnum) (This)->lpVtbl->get__NewEnum(This,ppunkEnum)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IGames_QueryInterface(IGames* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IGames_AddRef(IGames* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IGames_Release(IGames* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IGames_GetTypeInfoCount(IGames* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IGames_GetTypeInfo(IGames* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IGames_GetIDsOfNames(IGames* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IGames_Invoke(IGames* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IGames methods ***/
static __WIDL_INLINE HRESULT IGames_get_Count(IGames* This,LONG *pnCount) {
    return This->lpVtbl->get_Count(This,pnCount);
}
static __WIDL_INLINE HRESULT IGames_get_Item(IGames* This,VARIANT *pKey,IGame **ppGame) {
    return This->lpVtbl->get_Item(This,pKey,ppGame);
}
static __WIDL_INLINE HRESULT IGames_get__NewEnum(IGames* This,IUnknown **ppunkEnum) {
    return This->lpVtbl->get__NewEnum(This,ppunkEnum);
}
#endif
#endif

#endif


#endif  /* __IGames_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumGames interface
 */
#ifndef __IEnumGames_INTERFACE_DEFINED__
#define __IEnumGames_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumGames, 0x6a4dae2f, 0x2fee, 0x4e6f, 0x86,0xba, 0x5a,0x93,0x74,0x2e,0x58,0x4c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6a4dae2f-2fee-4e6f-86ba-5a93742e584c")
IEnumGames : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        ULONG celt) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IUnknown **ppEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumGames, 0x6a4dae2f, 0x2fee, 0x4e6f, 0x86,0xba, 0x5a,0x93,0x74,0x2e,0x58,0x4c)
#endif
#else
typedef struct IEnumGamesVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumGames *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumGames *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumGames *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IEnumGames *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IEnumGames *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IEnumGames *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IEnumGames *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IEnumGames methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumGames *This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumGames *This,
        ULONG celt);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumGames *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumGames *This,
        IUnknown **ppEnum);

    END_INTERFACE
} IEnumGamesVtbl;

interface IEnumGames {
    CONST_VTBL IEnumGamesVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumGames_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumGames_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumGames_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IEnumGames_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IEnumGames_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IEnumGames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IEnumGames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IEnumGames methods ***/
#define IEnumGames_Next(This,celt,rgVar,pCeltFetched) (This)->lpVtbl->Next(This,celt,rgVar,pCeltFetched)
#define IEnumGames_Skip(This,celt) (This)->lpVtbl->Skip(This,celt)
#define IEnumGames_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumGames_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IEnumGames_QueryInterface(IEnumGames* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IEnumGames_AddRef(IEnumGames* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IEnumGames_Release(IEnumGames* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IEnumGames_GetTypeInfoCount(IEnumGames* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IEnumGames_GetTypeInfo(IEnumGames* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IEnumGames_GetIDsOfNames(IEnumGames* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IEnumGames_Invoke(IEnumGames* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IEnumGames methods ***/
static __WIDL_INLINE HRESULT IEnumGames_Next(IEnumGames* This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched) {
    return This->lpVtbl->Next(This,celt,rgVar,pCeltFetched);
}
static __WIDL_INLINE HRESULT IEnumGames_Skip(IEnumGames* This,ULONG celt) {
    return This->lpVtbl->Skip(This,celt);
}
static __WIDL_INLINE HRESULT IEnumGames_Reset(IEnumGames* This) {
    return This->lpVtbl->Reset(This);
}
static __WIDL_INLINE HRESULT IEnumGames_Clone(IEnumGames* This,IUnknown **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
#endif
#endif

#endif


#endif  /* __IEnumGames_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IControllerSettings interface
 */
#ifndef __IControllerSettings_INTERFACE_DEFINED__
#define __IControllerSettings_INTERFACE_DEFINED__

DEFINE_GUID(IID_IControllerSettings, 0x1bfe619e, 0xa76e, 0x465b, 0xb1,0x1e, 0x4a,0x28,0x53,0x89,0x1a,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1bfe619e-a76e-465b-b11e-4a2853891a45")
IControllerSettings : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE ShowSettingsDlg(
        LONG_PTR hParentWnd) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clear(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Value(
        BSTR sName,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Value(
        BSTR sName,
        VARIANT newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_InstallDir(
        BSTR *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IControllerSettings, 0x1bfe619e, 0xa76e, 0x465b, 0xb1,0x1e, 0x4a,0x28,0x53,0x89,0x1a,0x45)
#endif
#else
typedef struct IControllerSettingsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IControllerSettings *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IControllerSettings *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IControllerSettings *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IControllerSettings *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IControllerSettings *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IControllerSettings *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IControllerSettings *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IControllerSettings methods ***/
    HRESULT (STDMETHODCALLTYPE *ShowSettingsDlg)(
        IControllerSettings *This,
        LONG_PTR hParentWnd);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        IControllerSettings *This);

    HRESULT (STDMETHODCALLTYPE *get_Value)(
        IControllerSettings *This,
        BSTR sName,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Value)(
        IControllerSettings *This,
        BSTR sName,
        VARIANT newVal);

    HRESULT (STDMETHODCALLTYPE *get_InstallDir)(
        IControllerSettings *This,
        BSTR *pVal);

    END_INTERFACE
} IControllerSettingsVtbl;

interface IControllerSettings {
    CONST_VTBL IControllerSettingsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IControllerSettings_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IControllerSettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IControllerSettings_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IControllerSettings_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IControllerSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IControllerSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IControllerSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IControllerSettings methods ***/
#define IControllerSettings_ShowSettingsDlg(This,hParentWnd) (This)->lpVtbl->ShowSettingsDlg(This,hParentWnd)
#define IControllerSettings_Clear(This) (This)->lpVtbl->Clear(This)
#define IControllerSettings_get_Value(This,sName,pVal) (This)->lpVtbl->get_Value(This,sName,pVal)
#define IControllerSettings_put_Value(This,sName,newVal) (This)->lpVtbl->put_Value(This,sName,newVal)
#define IControllerSettings_get_InstallDir(This,pVal) (This)->lpVtbl->get_InstallDir(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IControllerSettings_QueryInterface(IControllerSettings* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IControllerSettings_AddRef(IControllerSettings* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IControllerSettings_Release(IControllerSettings* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IControllerSettings_GetTypeInfoCount(IControllerSettings* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IControllerSettings_GetTypeInfo(IControllerSettings* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IControllerSettings_GetIDsOfNames(IControllerSettings* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IControllerSettings_Invoke(IControllerSettings* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IControllerSettings methods ***/
static __WIDL_INLINE HRESULT IControllerSettings_ShowSettingsDlg(IControllerSettings* This,LONG_PTR hParentWnd) {
    return This->lpVtbl->ShowSettingsDlg(This,hParentWnd);
}
static __WIDL_INLINE HRESULT IControllerSettings_Clear(IControllerSettings* This) {
    return This->lpVtbl->Clear(This);
}
static __WIDL_INLINE HRESULT IControllerSettings_get_Value(IControllerSettings* This,BSTR sName,VARIANT *pVal) {
    return This->lpVtbl->get_Value(This,sName,pVal);
}
static __WIDL_INLINE HRESULT IControllerSettings_put_Value(IControllerSettings* This,BSTR sName,VARIANT newVal) {
    return This->lpVtbl->put_Value(This,sName,newVal);
}
static __WIDL_INLINE HRESULT IControllerSettings_get_InstallDir(IControllerSettings* This,BSTR *pVal) {
    return This->lpVtbl->get_InstallDir(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IControllerSettings_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IController interface
 */
#ifndef __IController_INTERFACE_DEFINED__
#define __IController_INTERFACE_DEFINED__

DEFINE_GUID(IID_IController, 0xce9ecc7c, 0x960f, 0x407e, 0xb2,0x7b, 0x62,0xe3,0x9a,0xb1,0xe3,0x0f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ce9ecc7c-960f-407e-b27b-62e39ab1e30f")
IController : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Run(
        LONG_PTR hParentWnd = 0,
        int nMinVersion = 99) = 0;

    virtual HRESULT STDMETHODCALLTYPE Stop(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowOptsDialog(
        LONG_PTR hParentWnd = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowAboutDialog(
        LONG_PTR hParentWnd = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Lamp(
        int nLamp,
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Solenoid(
        int nSolenoid,
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Switch(
        int nSwitchNo,
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Switch(
        int nSwitchNo,
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_WPCNumbering(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Lamps(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedLamps(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Switches(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Switches(
        VARIANT newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedSolenoids(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GameName(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_GameName(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HandleKeyboard(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HandleKeyboard(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowTitle(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowTitle(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Pause(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Pause(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Machines(
        BSTR sMachine,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Running(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE CheckROMS(
        int nShowOptions,
        LONG_PTR hParentWnd,
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HandleMechanics(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_HandleMechanics(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GIString(
        int nString,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedGIStrings(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowDMDOnly(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowDMDOnly(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SplashInfoLine(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SplashInfoLine(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Solenoids(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Dip(
        int nNo,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Dip(
        int nNo,
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GIStrings(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GetMech(
        int mechNo,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowFrame(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowFrame(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DoubleSize(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DoubleSize(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDisplayPosition(
        int x,
        int y,
        LONG_PTR hParentWindow = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LockDisplay(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LockDisplay(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SolMask(
        int nLow,
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SolMask(
        int nLow,
        LONG newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowPathesDialog(
        LONG_PTR hParentWnd = 0) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Version(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Mech(
        int param,
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NewSoundCommands(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Games(
        IGames **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Settings(
        IControllerSettings **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedLEDs(
        int nHigh,
        int nLow,
        int nnHigh,
        int nnLow,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Hidden(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Hidden(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Game(
        IGame **pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MechSamples(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MechSamples(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetWindowRect(
        LONG_PTR hWnd,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetClientRect(
        LONG_PTR hWnd,
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RawDmdWidth(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RawDmdHeight(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RawDmdPixels(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DmdWidth(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DmdHeight(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DmdPixel(
        int x,
        int y,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_updateDmdPixels(
        int **buf,
        int width,
        int height,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedLampsState(
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LampsState(
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedSolenoidsState(
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SolenoidsState(
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedGIsState(
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MasterVolume(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MasterVolume(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_EnumAudioDevices(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AudioDevicesCount(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AudioDeviceDescription(
        int num,
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AudioDeviceModule(
        int num,
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CurrentAudioDevice(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CurrentAudioDevice(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FastFrames(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_FastFrames(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_IgnoreRomCrc(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_IgnoreRomCrc(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CabinetMode(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_CabinetMode(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowPinDMD(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowPinDMD(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowWinDMD(
        VARIANT_BOOL *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ShowWinDMD(
        VARIANT_BOOL newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedLEDsState(
        int nHigh,
        int nLow,
        int nnHigh,
        int nnLow,
        int **buf,
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RawDmdColoredPixels(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NVRAM(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ChangedNVRAM(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SoundMode(
        int *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SoundMode(
        int newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ROMName(
        BSTR *pVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IController, 0xce9ecc7c, 0x960f, 0x407e, 0xb2,0x7b, 0x62,0xe3,0x9a,0xb1,0xe3,0x0f)
#endif
#else
typedef struct IControllerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IController *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IController *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IController *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IController *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IController *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IController *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IController *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IController methods ***/
    HRESULT (STDMETHODCALLTYPE *Run)(
        IController *This,
        LONG_PTR hParentWnd,
        int nMinVersion);

    HRESULT (STDMETHODCALLTYPE *Stop)(
        IController *This);

    HRESULT (STDMETHODCALLTYPE *ShowOptsDialog)(
        IController *This,
        LONG_PTR hParentWnd);

    HRESULT (STDMETHODCALLTYPE *ShowAboutDialog)(
        IController *This,
        LONG_PTR hParentWnd);

    HRESULT (STDMETHODCALLTYPE *get_Lamp)(
        IController *This,
        int nLamp,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Solenoid)(
        IController *This,
        int nSolenoid,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Switch)(
        IController *This,
        int nSwitchNo,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Switch)(
        IController *This,
        int nSwitchNo,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_WPCNumbering)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Lamps)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedLamps)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Switches)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Switches)(
        IController *This,
        VARIANT newVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedSolenoids)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_GameName)(
        IController *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_GameName)(
        IController *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_HandleKeyboard)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HandleKeyboard)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowTitle)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowTitle)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Pause)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Pause)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Machines)(
        IController *This,
        BSTR sMachine,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Running)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *CheckROMS)(
        IController *This,
        int nShowOptions,
        LONG_PTR hParentWnd,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *get_HandleMechanics)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_HandleMechanics)(
        IController *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_GIString)(
        IController *This,
        int nString,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedGIStrings)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowDMDOnly)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowDMDOnly)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_SplashInfoLine)(
        IController *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SplashInfoLine)(
        IController *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *get_Solenoids)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Dip)(
        IController *This,
        int nNo,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Dip)(
        IController *This,
        int nNo,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_GIStrings)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_GetMech)(
        IController *This,
        int mechNo,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowFrame)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowFrame)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_DoubleSize)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_DoubleSize)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *SetDisplayPosition)(
        IController *This,
        int x,
        int y,
        LONG_PTR hParentWindow);

    HRESULT (STDMETHODCALLTYPE *get_LockDisplay)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_LockDisplay)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_SolMask)(
        IController *This,
        int nLow,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SolMask)(
        IController *This,
        int nLow,
        LONG newVal);

    HRESULT (STDMETHODCALLTYPE *ShowPathesDialog)(
        IController *This,
        LONG_PTR hParentWnd);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IController *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Mech)(
        IController *This,
        int param,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_NewSoundCommands)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Games)(
        IController *This,
        IGames **pVal);

    HRESULT (STDMETHODCALLTYPE *get_Settings)(
        IController *This,
        IControllerSettings **pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedLEDs)(
        IController *This,
        int nHigh,
        int nLow,
        int nnHigh,
        int nnLow,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Hidden)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Hidden)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_Game)(
        IController *This,
        IGame **pVal);

    HRESULT (STDMETHODCALLTYPE *get_MechSamples)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MechSamples)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *GetWindowRect)(
        IController *This,
        LONG_PTR hWnd,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *GetClientRect)(
        IController *This,
        LONG_PTR hWnd,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RawDmdWidth)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RawDmdHeight)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RawDmdPixels)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_DmdWidth)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_DmdHeight)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_DmdPixel)(
        IController *This,
        int x,
        int y,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_updateDmdPixels)(
        IController *This,
        int **buf,
        int width,
        int height,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedLampsState)(
        IController *This,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_LampsState)(
        IController *This,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedSolenoidsState)(
        IController *This,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_SolenoidsState)(
        IController *This,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedGIsState)(
        IController *This,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_MasterVolume)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_MasterVolume)(
        IController *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_EnumAudioDevices)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_AudioDevicesCount)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_AudioDeviceDescription)(
        IController *This,
        int num,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_AudioDeviceModule)(
        IController *This,
        int num,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_CurrentAudioDevice)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CurrentAudioDevice)(
        IController *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_FastFrames)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_FastFrames)(
        IController *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_IgnoreRomCrc)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_IgnoreRomCrc)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_CabinetMode)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_CabinetMode)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowPinDMD)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowPinDMD)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ShowWinDMD)(
        IController *This,
        VARIANT_BOOL *pVal);

    HRESULT (STDMETHODCALLTYPE *put_ShowWinDMD)(
        IController *This,
        VARIANT_BOOL newVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedLEDsState)(
        IController *This,
        int nHigh,
        int nLow,
        int nnHigh,
        int nnLow,
        int **buf,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *get_RawDmdColoredPixels)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_NVRAM)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_ChangedNVRAM)(
        IController *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *get_SoundMode)(
        IController *This,
        int *pVal);

    HRESULT (STDMETHODCALLTYPE *put_SoundMode)(
        IController *This,
        int newVal);

    HRESULT (STDMETHODCALLTYPE *get_ROMName)(
        IController *This,
        BSTR *pVal);

    END_INTERFACE
} IControllerVtbl;

interface IController {
    CONST_VTBL IControllerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IController_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IController_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IController_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IController_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IController_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IController_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IController_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IController methods ***/
#define IController_Run(This,hParentWnd,nMinVersion) (This)->lpVtbl->Run(This,hParentWnd,nMinVersion)
#define IController_Stop(This) (This)->lpVtbl->Stop(This)
#define IController_ShowOptsDialog(This,hParentWnd) (This)->lpVtbl->ShowOptsDialog(This,hParentWnd)
#define IController_ShowAboutDialog(This,hParentWnd) (This)->lpVtbl->ShowAboutDialog(This,hParentWnd)
#define IController_get_Lamp(This,nLamp,pVal) (This)->lpVtbl->get_Lamp(This,nLamp,pVal)
#define IController_get_Solenoid(This,nSolenoid,pVal) (This)->lpVtbl->get_Solenoid(This,nSolenoid,pVal)
#define IController_get_Switch(This,nSwitchNo,pVal) (This)->lpVtbl->get_Switch(This,nSwitchNo,pVal)
#define IController_put_Switch(This,nSwitchNo,newVal) (This)->lpVtbl->put_Switch(This,nSwitchNo,newVal)
#define IController_get_WPCNumbering(This,pVal) (This)->lpVtbl->get_WPCNumbering(This,pVal)
#define IController_get_Lamps(This,pVal) (This)->lpVtbl->get_Lamps(This,pVal)
#define IController_get_ChangedLamps(This,pVal) (This)->lpVtbl->get_ChangedLamps(This,pVal)
#define IController_get_Switches(This,pVal) (This)->lpVtbl->get_Switches(This,pVal)
#define IController_put_Switches(This,newVal) (This)->lpVtbl->put_Switches(This,newVal)
#define IController_get_ChangedSolenoids(This,pVal) (This)->lpVtbl->get_ChangedSolenoids(This,pVal)
#define IController_get_GameName(This,pVal) (This)->lpVtbl->get_GameName(This,pVal)
#define IController_put_GameName(This,newVal) (This)->lpVtbl->put_GameName(This,newVal)
#define IController_get_HandleKeyboard(This,pVal) (This)->lpVtbl->get_HandleKeyboard(This,pVal)
#define IController_put_HandleKeyboard(This,newVal) (This)->lpVtbl->put_HandleKeyboard(This,newVal)
#define IController_get_ShowTitle(This,pVal) (This)->lpVtbl->get_ShowTitle(This,pVal)
#define IController_put_ShowTitle(This,newVal) (This)->lpVtbl->put_ShowTitle(This,newVal)
#define IController_get_Pause(This,pVal) (This)->lpVtbl->get_Pause(This,pVal)
#define IController_put_Pause(This,newVal) (This)->lpVtbl->put_Pause(This,newVal)
#define IController_get_Machines(This,sMachine,pVal) (This)->lpVtbl->get_Machines(This,sMachine,pVal)
#define IController_get_Running(This,pVal) (This)->lpVtbl->get_Running(This,pVal)
#define IController_CheckROMS(This,nShowOptions,hParentWnd,pVal) (This)->lpVtbl->CheckROMS(This,nShowOptions,hParentWnd,pVal)
#define IController_get_HandleMechanics(This,pVal) (This)->lpVtbl->get_HandleMechanics(This,pVal)
#define IController_put_HandleMechanics(This,newVal) (This)->lpVtbl->put_HandleMechanics(This,newVal)
#define IController_get_GIString(This,nString,pVal) (This)->lpVtbl->get_GIString(This,nString,pVal)
#define IController_get_ChangedGIStrings(This,pVal) (This)->lpVtbl->get_ChangedGIStrings(This,pVal)
#define IController_get_ShowDMDOnly(This,pVal) (This)->lpVtbl->get_ShowDMDOnly(This,pVal)
#define IController_put_ShowDMDOnly(This,newVal) (This)->lpVtbl->put_ShowDMDOnly(This,newVal)
#define IController_get_SplashInfoLine(This,pVal) (This)->lpVtbl->get_SplashInfoLine(This,pVal)
#define IController_put_SplashInfoLine(This,newVal) (This)->lpVtbl->put_SplashInfoLine(This,newVal)
#define IController_get_Solenoids(This,pVal) (This)->lpVtbl->get_Solenoids(This,pVal)
#define IController_get_Dip(This,nNo,pVal) (This)->lpVtbl->get_Dip(This,nNo,pVal)
#define IController_put_Dip(This,nNo,newVal) (This)->lpVtbl->put_Dip(This,nNo,newVal)
#define IController_get_GIStrings(This,pVal) (This)->lpVtbl->get_GIStrings(This,pVal)
#define IController_get_GetMech(This,mechNo,pVal) (This)->lpVtbl->get_GetMech(This,mechNo,pVal)
#define IController_get_ShowFrame(This,pVal) (This)->lpVtbl->get_ShowFrame(This,pVal)
#define IController_put_ShowFrame(This,newVal) (This)->lpVtbl->put_ShowFrame(This,newVal)
#define IController_get_DoubleSize(This,pVal) (This)->lpVtbl->get_DoubleSize(This,pVal)
#define IController_put_DoubleSize(This,newVal) (This)->lpVtbl->put_DoubleSize(This,newVal)
#define IController_SetDisplayPosition(This,x,y,hParentWindow) (This)->lpVtbl->SetDisplayPosition(This,x,y,hParentWindow)
#define IController_get_LockDisplay(This,pVal) (This)->lpVtbl->get_LockDisplay(This,pVal)
#define IController_put_LockDisplay(This,newVal) (This)->lpVtbl->put_LockDisplay(This,newVal)
#define IController_get_SolMask(This,nLow,pVal) (This)->lpVtbl->get_SolMask(This,nLow,pVal)
#define IController_put_SolMask(This,nLow,newVal) (This)->lpVtbl->put_SolMask(This,nLow,newVal)
#define IController_ShowPathesDialog(This,hParentWnd) (This)->lpVtbl->ShowPathesDialog(This,hParentWnd)
#define IController_get_Version(This,pVal) (This)->lpVtbl->get_Version(This,pVal)
#define IController_put_Mech(This,param,newVal) (This)->lpVtbl->put_Mech(This,param,newVal)
#define IController_get_NewSoundCommands(This,pVal) (This)->lpVtbl->get_NewSoundCommands(This,pVal)
#define IController_get_Games(This,pVal) (This)->lpVtbl->get_Games(This,pVal)
#define IController_get_Settings(This,pVal) (This)->lpVtbl->get_Settings(This,pVal)
#define IController_get_ChangedLEDs(This,nHigh,nLow,nnHigh,nnLow,pVal) (This)->lpVtbl->get_ChangedLEDs(This,nHigh,nLow,nnHigh,nnLow,pVal)
#define IController_get_Hidden(This,pVal) (This)->lpVtbl->get_Hidden(This,pVal)
#define IController_put_Hidden(This,newVal) (This)->lpVtbl->put_Hidden(This,newVal)
#define IController_get_Game(This,pVal) (This)->lpVtbl->get_Game(This,pVal)
#define IController_get_MechSamples(This,pVal) (This)->lpVtbl->get_MechSamples(This,pVal)
#define IController_put_MechSamples(This,newVal) (This)->lpVtbl->put_MechSamples(This,newVal)
#define IController_GetWindowRect(This,hWnd,pVal) (This)->lpVtbl->GetWindowRect(This,hWnd,pVal)
#define IController_GetClientRect(This,hWnd,pVal) (This)->lpVtbl->GetClientRect(This,hWnd,pVal)
#define IController_get_RawDmdWidth(This,pVal) (This)->lpVtbl->get_RawDmdWidth(This,pVal)
#define IController_get_RawDmdHeight(This,pVal) (This)->lpVtbl->get_RawDmdHeight(This,pVal)
#define IController_get_RawDmdPixels(This,pVal) (This)->lpVtbl->get_RawDmdPixels(This,pVal)
#define IController_get_DmdWidth(This,pVal) (This)->lpVtbl->get_DmdWidth(This,pVal)
#define IController_get_DmdHeight(This,pVal) (This)->lpVtbl->get_DmdHeight(This,pVal)
#define IController_get_DmdPixel(This,x,y,pVal) (This)->lpVtbl->get_DmdPixel(This,x,y,pVal)
#define IController_get_updateDmdPixels(This,buf,width,height,pVal) (This)->lpVtbl->get_updateDmdPixels(This,buf,width,height,pVal)
#define IController_get_ChangedLampsState(This,buf,pVal) (This)->lpVtbl->get_ChangedLampsState(This,buf,pVal)
#define IController_get_LampsState(This,buf,pVal) (This)->lpVtbl->get_LampsState(This,buf,pVal)
#define IController_get_ChangedSolenoidsState(This,buf,pVal) (This)->lpVtbl->get_ChangedSolenoidsState(This,buf,pVal)
#define IController_get_SolenoidsState(This,buf,pVal) (This)->lpVtbl->get_SolenoidsState(This,buf,pVal)
#define IController_get_ChangedGIsState(This,buf,pVal) (This)->lpVtbl->get_ChangedGIsState(This,buf,pVal)
#define IController_get_MasterVolume(This,pVal) (This)->lpVtbl->get_MasterVolume(This,pVal)
#define IController_put_MasterVolume(This,newVal) (This)->lpVtbl->put_MasterVolume(This,newVal)
#define IController_get_EnumAudioDevices(This,pVal) (This)->lpVtbl->get_EnumAudioDevices(This,pVal)
#define IController_get_AudioDevicesCount(This,pVal) (This)->lpVtbl->get_AudioDevicesCount(This,pVal)
#define IController_get_AudioDeviceDescription(This,num,pVal) (This)->lpVtbl->get_AudioDeviceDescription(This,num,pVal)
#define IController_get_AudioDeviceModule(This,num,pVal) (This)->lpVtbl->get_AudioDeviceModule(This,num,pVal)
#define IController_get_CurrentAudioDevice(This,pVal) (This)->lpVtbl->get_CurrentAudioDevice(This,pVal)
#define IController_put_CurrentAudioDevice(This,newVal) (This)->lpVtbl->put_CurrentAudioDevice(This,newVal)
#define IController_get_FastFrames(This,pVal) (This)->lpVtbl->get_FastFrames(This,pVal)
#define IController_put_FastFrames(This,newVal) (This)->lpVtbl->put_FastFrames(This,newVal)
#define IController_get_IgnoreRomCrc(This,pVal) (This)->lpVtbl->get_IgnoreRomCrc(This,pVal)
#define IController_put_IgnoreRomCrc(This,newVal) (This)->lpVtbl->put_IgnoreRomCrc(This,newVal)
#define IController_get_CabinetMode(This,pVal) (This)->lpVtbl->get_CabinetMode(This,pVal)
#define IController_put_CabinetMode(This,newVal) (This)->lpVtbl->put_CabinetMode(This,newVal)
#define IController_get_ShowPinDMD(This,pVal) (This)->lpVtbl->get_ShowPinDMD(This,pVal)
#define IController_put_ShowPinDMD(This,newVal) (This)->lpVtbl->put_ShowPinDMD(This,newVal)
#define IController_get_ShowWinDMD(This,pVal) (This)->lpVtbl->get_ShowWinDMD(This,pVal)
#define IController_put_ShowWinDMD(This,newVal) (This)->lpVtbl->put_ShowWinDMD(This,newVal)
#define IController_get_ChangedLEDsState(This,nHigh,nLow,nnHigh,nnLow,buf,pVal) (This)->lpVtbl->get_ChangedLEDsState(This,nHigh,nLow,nnHigh,nnLow,buf,pVal)
#define IController_get_RawDmdColoredPixels(This,pVal) (This)->lpVtbl->get_RawDmdColoredPixels(This,pVal)
#define IController_get_NVRAM(This,pVal) (This)->lpVtbl->get_NVRAM(This,pVal)
#define IController_get_ChangedNVRAM(This,pVal) (This)->lpVtbl->get_ChangedNVRAM(This,pVal)
#define IController_get_SoundMode(This,pVal) (This)->lpVtbl->get_SoundMode(This,pVal)
#define IController_put_SoundMode(This,newVal) (This)->lpVtbl->put_SoundMode(This,newVal)
#define IController_get_ROMName(This,pVal) (This)->lpVtbl->get_ROMName(This,pVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IController_QueryInterface(IController* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IController_AddRef(IController* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IController_Release(IController* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IController_GetTypeInfoCount(IController* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IController_GetTypeInfo(IController* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IController_GetIDsOfNames(IController* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IController_Invoke(IController* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IController methods ***/
static __WIDL_INLINE HRESULT IController_Run(IController* This,LONG_PTR hParentWnd,int nMinVersion) {
    return This->lpVtbl->Run(This,hParentWnd,nMinVersion);
}
static __WIDL_INLINE HRESULT IController_Stop(IController* This) {
    return This->lpVtbl->Stop(This);
}
static __WIDL_INLINE HRESULT IController_ShowOptsDialog(IController* This,LONG_PTR hParentWnd) {
    return This->lpVtbl->ShowOptsDialog(This,hParentWnd);
}
static __WIDL_INLINE HRESULT IController_ShowAboutDialog(IController* This,LONG_PTR hParentWnd) {
    return This->lpVtbl->ShowAboutDialog(This,hParentWnd);
}
static __WIDL_INLINE HRESULT IController_get_Lamp(IController* This,int nLamp,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Lamp(This,nLamp,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Solenoid(IController* This,int nSolenoid,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Solenoid(This,nSolenoid,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Switch(IController* This,int nSwitchNo,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Switch(This,nSwitchNo,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Switch(IController* This,int nSwitchNo,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Switch(This,nSwitchNo,newVal);
}
static __WIDL_INLINE HRESULT IController_get_WPCNumbering(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_WPCNumbering(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Lamps(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_Lamps(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedLamps(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_ChangedLamps(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Switches(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_Switches(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Switches(IController* This,VARIANT newVal) {
    return This->lpVtbl->put_Switches(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedSolenoids(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_ChangedSolenoids(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_GameName(IController* This,BSTR *pVal) {
    return This->lpVtbl->get_GameName(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_GameName(IController* This,BSTR newVal) {
    return This->lpVtbl->put_GameName(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_HandleKeyboard(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_HandleKeyboard(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_HandleKeyboard(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_HandleKeyboard(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ShowTitle(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowTitle(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_ShowTitle(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowTitle(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_Pause(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Pause(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Pause(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Pause(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_Machines(IController* This,BSTR sMachine,VARIANT *pVal) {
    return This->lpVtbl->get_Machines(This,sMachine,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Running(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Running(This,pVal);
}
static __WIDL_INLINE HRESULT IController_CheckROMS(IController* This,int nShowOptions,LONG_PTR hParentWnd,VARIANT_BOOL *pVal) {
    return This->lpVtbl->CheckROMS(This,nShowOptions,hParentWnd,pVal);
}
static __WIDL_INLINE HRESULT IController_get_HandleMechanics(IController* This,int *pVal) {
    return This->lpVtbl->get_HandleMechanics(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_HandleMechanics(IController* This,int newVal) {
    return This->lpVtbl->put_HandleMechanics(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_GIString(IController* This,int nString,int *pVal) {
    return This->lpVtbl->get_GIString(This,nString,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedGIStrings(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_ChangedGIStrings(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ShowDMDOnly(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowDMDOnly(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_ShowDMDOnly(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowDMDOnly(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_SplashInfoLine(IController* This,BSTR *pVal) {
    return This->lpVtbl->get_SplashInfoLine(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_SplashInfoLine(IController* This,BSTR newVal) {
    return This->lpVtbl->put_SplashInfoLine(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_Solenoids(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_Solenoids(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Dip(IController* This,int nNo,int *pVal) {
    return This->lpVtbl->get_Dip(This,nNo,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Dip(IController* This,int nNo,int newVal) {
    return This->lpVtbl->put_Dip(This,nNo,newVal);
}
static __WIDL_INLINE HRESULT IController_get_GIStrings(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_GIStrings(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_GetMech(IController* This,int mechNo,int *pVal) {
    return This->lpVtbl->get_GetMech(This,mechNo,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ShowFrame(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowFrame(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_ShowFrame(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowFrame(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_DoubleSize(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_DoubleSize(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_DoubleSize(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_DoubleSize(This,newVal);
}
static __WIDL_INLINE HRESULT IController_SetDisplayPosition(IController* This,int x,int y,LONG_PTR hParentWindow) {
    return This->lpVtbl->SetDisplayPosition(This,x,y,hParentWindow);
}
static __WIDL_INLINE HRESULT IController_get_LockDisplay(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_LockDisplay(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_LockDisplay(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_LockDisplay(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_SolMask(IController* This,int nLow,LONG *pVal) {
    return This->lpVtbl->get_SolMask(This,nLow,pVal);
}
static __WIDL_INLINE HRESULT IController_put_SolMask(IController* This,int nLow,LONG newVal) {
    return This->lpVtbl->put_SolMask(This,nLow,newVal);
}
static __WIDL_INLINE HRESULT IController_ShowPathesDialog(IController* This,LONG_PTR hParentWnd) {
    return This->lpVtbl->ShowPathesDialog(This,hParentWnd);
}
static __WIDL_INLINE HRESULT IController_get_Version(IController* This,BSTR *pVal) {
    return This->lpVtbl->get_Version(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Mech(IController* This,int param,int newVal) {
    return This->lpVtbl->put_Mech(This,param,newVal);
}
static __WIDL_INLINE HRESULT IController_get_NewSoundCommands(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_NewSoundCommands(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Games(IController* This,IGames **pVal) {
    return This->lpVtbl->get_Games(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Settings(IController* This,IControllerSettings **pVal) {
    return This->lpVtbl->get_Settings(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedLEDs(IController* This,int nHigh,int nLow,int nnHigh,int nnLow,VARIANT *pVal) {
    return This->lpVtbl->get_ChangedLEDs(This,nHigh,nLow,nnHigh,nnLow,pVal);
}
static __WIDL_INLINE HRESULT IController_get_Hidden(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_Hidden(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_Hidden(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_Hidden(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_Game(IController* This,IGame **pVal) {
    return This->lpVtbl->get_Game(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_MechSamples(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_MechSamples(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_MechSamples(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_MechSamples(This,newVal);
}
static __WIDL_INLINE HRESULT IController_GetWindowRect(IController* This,LONG_PTR hWnd,VARIANT *pVal) {
    return This->lpVtbl->GetWindowRect(This,hWnd,pVal);
}
static __WIDL_INLINE HRESULT IController_GetClientRect(IController* This,LONG_PTR hWnd,VARIANT *pVal) {
    return This->lpVtbl->GetClientRect(This,hWnd,pVal);
}
static __WIDL_INLINE HRESULT IController_get_RawDmdWidth(IController* This,int *pVal) {
    return This->lpVtbl->get_RawDmdWidth(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_RawDmdHeight(IController* This,int *pVal) {
    return This->lpVtbl->get_RawDmdHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_RawDmdPixels(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_RawDmdPixels(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_DmdWidth(IController* This,int *pVal) {
    return This->lpVtbl->get_DmdWidth(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_DmdHeight(IController* This,int *pVal) {
    return This->lpVtbl->get_DmdHeight(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_DmdPixel(IController* This,int x,int y,int *pVal) {
    return This->lpVtbl->get_DmdPixel(This,x,y,pVal);
}
static __WIDL_INLINE HRESULT IController_get_updateDmdPixels(IController* This,int **buf,int width,int height,int *pVal) {
    return This->lpVtbl->get_updateDmdPixels(This,buf,width,height,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedLampsState(IController* This,int **buf,int *pVal) {
    return This->lpVtbl->get_ChangedLampsState(This,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_LampsState(IController* This,int **buf,int *pVal) {
    return This->lpVtbl->get_LampsState(This,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedSolenoidsState(IController* This,int **buf,int *pVal) {
    return This->lpVtbl->get_ChangedSolenoidsState(This,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_SolenoidsState(IController* This,int **buf,int *pVal) {
    return This->lpVtbl->get_SolenoidsState(This,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedGIsState(IController* This,int **buf,int *pVal) {
    return This->lpVtbl->get_ChangedGIsState(This,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_MasterVolume(IController* This,int *pVal) {
    return This->lpVtbl->get_MasterVolume(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_MasterVolume(IController* This,int newVal) {
    return This->lpVtbl->put_MasterVolume(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_EnumAudioDevices(IController* This,int *pVal) {
    return This->lpVtbl->get_EnumAudioDevices(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_AudioDevicesCount(IController* This,int *pVal) {
    return This->lpVtbl->get_AudioDevicesCount(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_AudioDeviceDescription(IController* This,int num,BSTR *pVal) {
    return This->lpVtbl->get_AudioDeviceDescription(This,num,pVal);
}
static __WIDL_INLINE HRESULT IController_get_AudioDeviceModule(IController* This,int num,BSTR *pVal) {
    return This->lpVtbl->get_AudioDeviceModule(This,num,pVal);
}
static __WIDL_INLINE HRESULT IController_get_CurrentAudioDevice(IController* This,int *pVal) {
    return This->lpVtbl->get_CurrentAudioDevice(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_CurrentAudioDevice(IController* This,int newVal) {
    return This->lpVtbl->put_CurrentAudioDevice(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_FastFrames(IController* This,int *pVal) {
    return This->lpVtbl->get_FastFrames(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_FastFrames(IController* This,int newVal) {
    return This->lpVtbl->put_FastFrames(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_IgnoreRomCrc(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_IgnoreRomCrc(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_IgnoreRomCrc(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_IgnoreRomCrc(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_CabinetMode(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_CabinetMode(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_CabinetMode(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_CabinetMode(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ShowPinDMD(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowPinDMD(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_ShowPinDMD(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowPinDMD(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ShowWinDMD(IController* This,VARIANT_BOOL *pVal) {
    return This->lpVtbl->get_ShowWinDMD(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_ShowWinDMD(IController* This,VARIANT_BOOL newVal) {
    return This->lpVtbl->put_ShowWinDMD(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedLEDsState(IController* This,int nHigh,int nLow,int nnHigh,int nnLow,int **buf,int *pVal) {
    return This->lpVtbl->get_ChangedLEDsState(This,nHigh,nLow,nnHigh,nnLow,buf,pVal);
}
static __WIDL_INLINE HRESULT IController_get_RawDmdColoredPixels(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_RawDmdColoredPixels(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_NVRAM(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_NVRAM(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_ChangedNVRAM(IController* This,VARIANT *pVal) {
    return This->lpVtbl->get_ChangedNVRAM(This,pVal);
}
static __WIDL_INLINE HRESULT IController_get_SoundMode(IController* This,int *pVal) {
    return This->lpVtbl->get_SoundMode(This,pVal);
}
static __WIDL_INLINE HRESULT IController_put_SoundMode(IController* This,int newVal) {
    return This->lpVtbl->put_SoundMode(This,newVal);
}
static __WIDL_INLINE HRESULT IController_get_ROMName(IController* This,BSTR *pVal) {
    return This->lpVtbl->get_ROMName(This,pVal);
}
#endif
#endif

#endif


#endif  /* __IController_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWSHDlgCtrl interface
 */
#ifndef __IWSHDlgCtrl_INTERFACE_DEFINED__
#define __IWSHDlgCtrl_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWSHDlgCtrl, 0x18b280d8, 0xb768, 0x4709, 0x86,0xf4, 0x66,0x75,0xf3,0xfe,0x60,0x1b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("18b280d8-b768-4709-86f4-6675f3fe601b")
IWSHDlgCtrl : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Type(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Value(
        VARIANT *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Value(
        VARIANT newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Title(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Title(
        BSTR newVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWSHDlgCtrl, 0x18b280d8, 0xb768, 0x4709, 0x86,0xf4, 0x66,0x75,0xf3,0xfe,0x60,0x1b)
#endif
#else
typedef struct IWSHDlgCtrlVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWSHDlgCtrl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWSHDlgCtrl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWSHDlgCtrl *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWSHDlgCtrl *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWSHDlgCtrl *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWSHDlgCtrl *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWSHDlgCtrl *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWSHDlgCtrl methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IWSHDlgCtrl *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *get_Value)(
        IWSHDlgCtrl *This,
        VARIANT *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Value)(
        IWSHDlgCtrl *This,
        VARIANT newVal);

    HRESULT (STDMETHODCALLTYPE *get_Title)(
        IWSHDlgCtrl *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Title)(
        IWSHDlgCtrl *This,
        BSTR newVal);

    END_INTERFACE
} IWSHDlgCtrlVtbl;

interface IWSHDlgCtrl {
    CONST_VTBL IWSHDlgCtrlVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWSHDlgCtrl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWSHDlgCtrl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWSHDlgCtrl_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWSHDlgCtrl_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWSHDlgCtrl_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWSHDlgCtrl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWSHDlgCtrl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWSHDlgCtrl methods ***/
#define IWSHDlgCtrl_get_Type(This,pVal) (This)->lpVtbl->get_Type(This,pVal)
#define IWSHDlgCtrl_get_Value(This,pVal) (This)->lpVtbl->get_Value(This,pVal)
#define IWSHDlgCtrl_put_Value(This,newVal) (This)->lpVtbl->put_Value(This,newVal)
#define IWSHDlgCtrl_get_Title(This,pVal) (This)->lpVtbl->get_Title(This,pVal)
#define IWSHDlgCtrl_put_Title(This,newVal) (This)->lpVtbl->put_Title(This,newVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrl_QueryInterface(IWSHDlgCtrl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWSHDlgCtrl_AddRef(IWSHDlgCtrl* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWSHDlgCtrl_Release(IWSHDlgCtrl* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrl_GetTypeInfoCount(IWSHDlgCtrl* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_GetTypeInfo(IWSHDlgCtrl* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_GetIDsOfNames(IWSHDlgCtrl* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_Invoke(IWSHDlgCtrl* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWSHDlgCtrl methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrl_get_Type(IWSHDlgCtrl* This,BSTR *pVal) {
    return This->lpVtbl->get_Type(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_get_Value(IWSHDlgCtrl* This,VARIANT *pVal) {
    return This->lpVtbl->get_Value(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_put_Value(IWSHDlgCtrl* This,VARIANT newVal) {
    return This->lpVtbl->put_Value(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_get_Title(IWSHDlgCtrl* This,BSTR *pVal) {
    return This->lpVtbl->get_Title(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrl_put_Title(IWSHDlgCtrl* This,BSTR newVal) {
    return This->lpVtbl->put_Title(This,newVal);
}
#endif
#endif

#endif


#endif  /* __IWSHDlgCtrl_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWSHDlgCtrls interface
 */
#ifndef __IWSHDlgCtrls_INTERFACE_DEFINED__
#define __IWSHDlgCtrls_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWSHDlgCtrls, 0x80936d79, 0xb8ca, 0x45b1, 0x93,0xb5, 0x22,0x44,0x58,0xc8,0xad,0x5a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("80936d79-b8ca-45b1-93b5-224458c8ad5a")
IWSHDlgCtrls : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Count(
        LONG *pnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Item(
        VARIANT *pKey,
        IWSHDlgCtrl **ppWSHDlgCtrl) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IUnknown **ppunkEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWSHDlgCtrls, 0x80936d79, 0xb8ca, 0x45b1, 0x93,0xb5, 0x22,0x44,0x58,0xc8,0xad,0x5a)
#endif
#else
typedef struct IWSHDlgCtrlsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWSHDlgCtrls *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWSHDlgCtrls *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWSHDlgCtrls *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWSHDlgCtrls *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWSHDlgCtrls *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWSHDlgCtrls *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWSHDlgCtrls *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWSHDlgCtrls methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IWSHDlgCtrls *This,
        LONG *pnCount);

    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IWSHDlgCtrls *This,
        VARIANT *pKey,
        IWSHDlgCtrl **ppWSHDlgCtrl);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IWSHDlgCtrls *This,
        IUnknown **ppunkEnum);

    END_INTERFACE
} IWSHDlgCtrlsVtbl;

interface IWSHDlgCtrls {
    CONST_VTBL IWSHDlgCtrlsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWSHDlgCtrls_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWSHDlgCtrls_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWSHDlgCtrls_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWSHDlgCtrls_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWSHDlgCtrls_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWSHDlgCtrls_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWSHDlgCtrls_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWSHDlgCtrls methods ***/
#define IWSHDlgCtrls_get_Count(This,pnCount) (This)->lpVtbl->get_Count(This,pnCount)
#define IWSHDlgCtrls_get_Item(This,pKey,ppWSHDlgCtrl) (This)->lpVtbl->get_Item(This,pKey,ppWSHDlgCtrl)
#define IWSHDlgCtrls_get__NewEnum(This,ppunkEnum) (This)->lpVtbl->get__NewEnum(This,ppunkEnum)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrls_QueryInterface(IWSHDlgCtrls* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWSHDlgCtrls_AddRef(IWSHDlgCtrls* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWSHDlgCtrls_Release(IWSHDlgCtrls* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrls_GetTypeInfoCount(IWSHDlgCtrls* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrls_GetTypeInfo(IWSHDlgCtrls* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrls_GetIDsOfNames(IWSHDlgCtrls* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrls_Invoke(IWSHDlgCtrls* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWSHDlgCtrls methods ***/
static __WIDL_INLINE HRESULT IWSHDlgCtrls_get_Count(IWSHDlgCtrls* This,LONG *pnCount) {
    return This->lpVtbl->get_Count(This,pnCount);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrls_get_Item(IWSHDlgCtrls* This,VARIANT *pKey,IWSHDlgCtrl **ppWSHDlgCtrl) {
    return This->lpVtbl->get_Item(This,pKey,ppWSHDlgCtrl);
}
static __WIDL_INLINE HRESULT IWSHDlgCtrls_get__NewEnum(IWSHDlgCtrls* This,IUnknown **ppunkEnum) {
    return This->lpVtbl->get__NewEnum(This,ppunkEnum);
}
#endif
#endif

#endif


#endif  /* __IWSHDlgCtrls_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumWSHDlgCtrls interface
 */
#ifndef __IEnumWSHDlgCtrls_INTERFACE_DEFINED__
#define __IEnumWSHDlgCtrls_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumWSHDlgCtrls, 0xd52e5842, 0x7a8d, 0x4ab0, 0xa8,0xae, 0xe8,0xff,0xc9,0xec,0x9f,0xb7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d52e5842-7a8d-4ab0-a8ae-e8ffc9ec9fb7")
IEnumWSHDlgCtrls : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        ULONG celt) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IUnknown **ppEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumWSHDlgCtrls, 0xd52e5842, 0x7a8d, 0x4ab0, 0xa8,0xae, 0xe8,0xff,0xc9,0xec,0x9f,0xb7)
#endif
#else
typedef struct IEnumWSHDlgCtrlsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumWSHDlgCtrls *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumWSHDlgCtrls *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumWSHDlgCtrls *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IEnumWSHDlgCtrls *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IEnumWSHDlgCtrls *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IEnumWSHDlgCtrls *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IEnumWSHDlgCtrls *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IEnumWSHDlgCtrls methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumWSHDlgCtrls *This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumWSHDlgCtrls *This,
        ULONG celt);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumWSHDlgCtrls *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumWSHDlgCtrls *This,
        IUnknown **ppEnum);

    END_INTERFACE
} IEnumWSHDlgCtrlsVtbl;

interface IEnumWSHDlgCtrls {
    CONST_VTBL IEnumWSHDlgCtrlsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumWSHDlgCtrls_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumWSHDlgCtrls_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumWSHDlgCtrls_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IEnumWSHDlgCtrls_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IEnumWSHDlgCtrls_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IEnumWSHDlgCtrls_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IEnumWSHDlgCtrls_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IEnumWSHDlgCtrls methods ***/
#define IEnumWSHDlgCtrls_Next(This,celt,rgVar,pCeltFetched) (This)->lpVtbl->Next(This,celt,rgVar,pCeltFetched)
#define IEnumWSHDlgCtrls_Skip(This,celt) (This)->lpVtbl->Skip(This,celt)
#define IEnumWSHDlgCtrls_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumWSHDlgCtrls_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_QueryInterface(IEnumWSHDlgCtrls* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IEnumWSHDlgCtrls_AddRef(IEnumWSHDlgCtrls* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IEnumWSHDlgCtrls_Release(IEnumWSHDlgCtrls* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_GetTypeInfoCount(IEnumWSHDlgCtrls* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_GetTypeInfo(IEnumWSHDlgCtrls* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_GetIDsOfNames(IEnumWSHDlgCtrls* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_Invoke(IEnumWSHDlgCtrls* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IEnumWSHDlgCtrls methods ***/
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_Next(IEnumWSHDlgCtrls* This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched) {
    return This->lpVtbl->Next(This,celt,rgVar,pCeltFetched);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_Skip(IEnumWSHDlgCtrls* This,ULONG celt) {
    return This->lpVtbl->Skip(This,celt);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_Reset(IEnumWSHDlgCtrls* This) {
    return This->lpVtbl->Reset(This);
}
static __WIDL_INLINE HRESULT IEnumWSHDlgCtrls_Clone(IEnumWSHDlgCtrls* This,IUnknown **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
#endif
#endif

#endif


#endif  /* __IEnumWSHDlgCtrls_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWSHDlg interface
 */
#ifndef __IWSHDlg_INTERFACE_DEFINED__
#define __IWSHDlg_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWSHDlg, 0xc0bc59ef, 0xed67, 0x4fc0, 0xae,0xe3, 0x23,0xba,0x10,0x28,0xf6,0x5d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c0bc59ef-ed67-4fc0-aee3-23ba1028f65d")
IWSHDlg : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_x(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_x(
        LONG newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_y(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_y(
        LONG newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_w(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_w(
        LONG newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_h(
        LONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_h(
        LONG newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Title(
        BSTR *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Title(
        BSTR newVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddCtrl(
        BSTR sType,
        LONG x,
        LONG y,
        LONG w,
        LONG h,
        BSTR sTitle,
        IUnknown **pRetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE Show(
        LONG_PTR hParentWnd,
        VARIANT *RetVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Ctrls(
        IWSHDlgCtrls **ppVal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWSHDlg, 0xc0bc59ef, 0xed67, 0x4fc0, 0xae,0xe3, 0x23,0xba,0x10,0x28,0xf6,0x5d)
#endif
#else
typedef struct IWSHDlgVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWSHDlg *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWSHDlg *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWSHDlg *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IWSHDlg *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IWSHDlg *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IWSHDlg *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IWSHDlg *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IWSHDlg methods ***/
    HRESULT (STDMETHODCALLTYPE *get_x)(
        IWSHDlg *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *put_x)(
        IWSHDlg *This,
        LONG newVal);

    HRESULT (STDMETHODCALLTYPE *get_y)(
        IWSHDlg *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *put_y)(
        IWSHDlg *This,
        LONG newVal);

    HRESULT (STDMETHODCALLTYPE *get_w)(
        IWSHDlg *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *put_w)(
        IWSHDlg *This,
        LONG newVal);

    HRESULT (STDMETHODCALLTYPE *get_h)(
        IWSHDlg *This,
        LONG *pVal);

    HRESULT (STDMETHODCALLTYPE *put_h)(
        IWSHDlg *This,
        LONG newVal);

    HRESULT (STDMETHODCALLTYPE *get_Title)(
        IWSHDlg *This,
        BSTR *pVal);

    HRESULT (STDMETHODCALLTYPE *put_Title)(
        IWSHDlg *This,
        BSTR newVal);

    HRESULT (STDMETHODCALLTYPE *AddCtrl)(
        IWSHDlg *This,
        BSTR sType,
        LONG x,
        LONG y,
        LONG w,
        LONG h,
        BSTR sTitle,
        IUnknown **pRetVal);

    HRESULT (STDMETHODCALLTYPE *Show)(
        IWSHDlg *This,
        LONG_PTR hParentWnd,
        VARIANT *RetVal);

    HRESULT (STDMETHODCALLTYPE *get_Ctrls)(
        IWSHDlg *This,
        IWSHDlgCtrls **ppVal);

    END_INTERFACE
} IWSHDlgVtbl;

interface IWSHDlg {
    CONST_VTBL IWSHDlgVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWSHDlg_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWSHDlg_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWSHDlg_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IWSHDlg_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IWSHDlg_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IWSHDlg_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IWSHDlg_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IWSHDlg methods ***/
#define IWSHDlg_get_x(This,pVal) (This)->lpVtbl->get_x(This,pVal)
#define IWSHDlg_put_x(This,newVal) (This)->lpVtbl->put_x(This,newVal)
#define IWSHDlg_get_y(This,pVal) (This)->lpVtbl->get_y(This,pVal)
#define IWSHDlg_put_y(This,newVal) (This)->lpVtbl->put_y(This,newVal)
#define IWSHDlg_get_w(This,pVal) (This)->lpVtbl->get_w(This,pVal)
#define IWSHDlg_put_w(This,newVal) (This)->lpVtbl->put_w(This,newVal)
#define IWSHDlg_get_h(This,pVal) (This)->lpVtbl->get_h(This,pVal)
#define IWSHDlg_put_h(This,newVal) (This)->lpVtbl->put_h(This,newVal)
#define IWSHDlg_get_Title(This,pVal) (This)->lpVtbl->get_Title(This,pVal)
#define IWSHDlg_put_Title(This,newVal) (This)->lpVtbl->put_Title(This,newVal)
#define IWSHDlg_AddCtrl(This,sType,x,y,w,h,sTitle,pRetVal) (This)->lpVtbl->AddCtrl(This,sType,x,y,w,h,sTitle,pRetVal)
#define IWSHDlg_Show(This,hParentWnd,RetVal) (This)->lpVtbl->Show(This,hParentWnd,RetVal)
#define IWSHDlg_get_Ctrls(This,ppVal) (This)->lpVtbl->get_Ctrls(This,ppVal)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IWSHDlg_QueryInterface(IWSHDlg* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IWSHDlg_AddRef(IWSHDlg* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IWSHDlg_Release(IWSHDlg* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IWSHDlg_GetTypeInfoCount(IWSHDlg* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IWSHDlg_GetTypeInfo(IWSHDlg* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IWSHDlg_GetIDsOfNames(IWSHDlg* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IWSHDlg_Invoke(IWSHDlg* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IWSHDlg methods ***/
static __WIDL_INLINE HRESULT IWSHDlg_get_x(IWSHDlg* This,LONG *pVal) {
    return This->lpVtbl->get_x(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_put_x(IWSHDlg* This,LONG newVal) {
    return This->lpVtbl->put_x(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_get_y(IWSHDlg* This,LONG *pVal) {
    return This->lpVtbl->get_y(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_put_y(IWSHDlg* This,LONG newVal) {
    return This->lpVtbl->put_y(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_get_w(IWSHDlg* This,LONG *pVal) {
    return This->lpVtbl->get_w(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_put_w(IWSHDlg* This,LONG newVal) {
    return This->lpVtbl->put_w(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_get_h(IWSHDlg* This,LONG *pVal) {
    return This->lpVtbl->get_h(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_put_h(IWSHDlg* This,LONG newVal) {
    return This->lpVtbl->put_h(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_get_Title(IWSHDlg* This,BSTR *pVal) {
    return This->lpVtbl->get_Title(This,pVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_put_Title(IWSHDlg* This,BSTR newVal) {
    return This->lpVtbl->put_Title(This,newVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_AddCtrl(IWSHDlg* This,BSTR sType,LONG x,LONG y,LONG w,LONG h,BSTR sTitle,IUnknown **pRetVal) {
    return This->lpVtbl->AddCtrl(This,sType,x,y,w,h,sTitle,pRetVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_Show(IWSHDlg* This,LONG_PTR hParentWnd,VARIANT *RetVal) {
    return This->lpVtbl->Show(This,hParentWnd,RetVal);
}
static __WIDL_INLINE HRESULT IWSHDlg_get_Ctrls(IWSHDlg* This,IWSHDlgCtrls **ppVal) {
    return This->lpVtbl->get_Ctrls(This,ppVal);
}
#endif
#endif

#endif


#endif  /* __IWSHDlg_INTERFACE_DEFINED__ */

#ifndef __VPinMAMELib_LIBRARY_DEFINED__
#define __VPinMAMELib_LIBRARY_DEFINED__

DEFINE_GUID(LIBID_VPinMAMELib, 0x57270b76, 0xc846, 0x4b1e, 0x88,0xd4, 0x53,0xc8,0x33,0x7a,0x06,0x23);

/*****************************************************************************
 * Game coclass
 */

DEFINE_GUID(CLSID_Game, 0x75d6fff0, 0x21e5, 0x4b71, 0x90,0xb4, 0x59,0x40,0x9a,0x27,0x29,0x7c);

#ifdef __cplusplus
class DECLSPEC_UUID("75d6fff0-21e5-4b71-90b4-59409a27297c") Game;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Game, 0x75d6fff0, 0x21e5, 0x4b71, 0x90,0xb4, 0x59,0x40,0x9a,0x27,0x29,0x7c)
#endif
#endif

/*****************************************************************************
 * GameSettings coclass
 */

DEFINE_GUID(CLSID_GameSettings, 0xb9af5401, 0x086e, 0x4359, 0xb9,0x98, 0x8b,0x5f,0xa0,0x51,0x0f,0xbc);

#ifdef __cplusplus
class DECLSPEC_UUID("b9af5401-086e-4359-b998-8b5fa0510fbc") GameSettings;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(GameSettings, 0xb9af5401, 0x086e, 0x4359, 0xb9,0x98, 0x8b,0x5f,0xa0,0x51,0x0f,0xbc)
#endif
#endif

/*****************************************************************************
 * Games coclass
 */

DEFINE_GUID(CLSID_Games, 0xb31ad191, 0xc0c5, 0x4e44, 0xaf,0x24, 0xbd,0x04,0x59,0xed,0xa5,0x2f);

#ifdef __cplusplus
class DECLSPEC_UUID("b31ad191-c0c5-4e44-af24-bd0459eda52f") Games;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Games, 0xb31ad191, 0xc0c5, 0x4e44, 0xaf,0x24, 0xbd,0x04,0x59,0xed,0xa5,0x2f)
#endif
#endif

/*****************************************************************************
 * EnumGames coclass
 */

DEFINE_GUID(CLSID_EnumGames, 0xd1fab4a1, 0xf9e6, 0x4fef, 0xa0,0x2f, 0xbd,0x21,0x8e,0xc5,0xb7,0x92);

#ifdef __cplusplus
class DECLSPEC_UUID("d1fab4a1-f9e6-4fef-a02f-bd218ec5b792") EnumGames;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(EnumGames, 0xd1fab4a1, 0xf9e6, 0x4fef, 0xa0,0x2f, 0xbd,0x21,0x8e,0xc5,0xb7,0x92)
#endif
#endif

/*****************************************************************************
 * Rom coclass
 */

DEFINE_GUID(CLSID_Rom, 0xccbad9cc, 0xcc5a, 0x4dd3, 0xba,0x51, 0x39,0x1f,0x37,0x44,0xd8,0x15);

#ifdef __cplusplus
class DECLSPEC_UUID("ccbad9cc-cc5a-4dd3-ba51-391f3744d815") Rom;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Rom, 0xccbad9cc, 0xcc5a, 0x4dd3, 0xba,0x51, 0x39,0x1f,0x37,0x44,0xd8,0x15)
#endif
#endif

/*****************************************************************************
 * Roms coclass
 */

DEFINE_GUID(CLSID_Roms, 0xc983a522, 0x7dc2, 0x4153, 0xbf,0x78, 0x5d,0xd5,0xa2,0xda,0xde,0x01);

#ifdef __cplusplus
class DECLSPEC_UUID("c983a522-7dc2-4153-bf78-5dd5a2dade01") Roms;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Roms, 0xc983a522, 0x7dc2, 0x4153, 0xbf,0x78, 0x5d,0xd5,0xa2,0xda,0xde,0x01)
#endif
#endif

/*****************************************************************************
 * EnumRoms coclass
 */

DEFINE_GUID(CLSID_EnumRoms, 0xef1f6336, 0x7983, 0x4cc4, 0x8f,0xa2, 0x1c,0xe9,0xed,0xfc,0x96,0x4f);

#ifdef __cplusplus
class DECLSPEC_UUID("ef1f6336-7983-4cc4-8fa2-1ce9edfc964f") EnumRoms;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(EnumRoms, 0xef1f6336, 0x7983, 0x4cc4, 0x8f,0xa2, 0x1c,0xe9,0xed,0xfc,0x96,0x4f)
#endif
#endif

/*****************************************************************************
 * _IControllerEvents dispinterface
 */
#ifndef ___IControllerEvents_DISPINTERFACE_DEFINED__
#define ___IControllerEvents_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID__IControllerEvents, 0x2ce80ec7, 0xac05, 0x4087, 0x83,0xe7, 0x41,0x4d,0xe4,0xf0,0xf5,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2ce80ec7-ac05-4087-83e7-414de4f0f545")
_IControllerEvents : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(_IControllerEvents, 0x2ce80ec7, 0xac05, 0x4087, 0x83,0xe7, 0x41,0x4d,0xe4,0xf0,0xf5,0x45)
#endif
#else
typedef struct _IControllerEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        _IControllerEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        _IControllerEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        _IControllerEvents *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        _IControllerEvents *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        _IControllerEvents *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        _IControllerEvents *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        _IControllerEvents *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} _IControllerEventsVtbl;

interface _IControllerEvents {
    CONST_VTBL _IControllerEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define _IControllerEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define _IControllerEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define _IControllerEvents_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define _IControllerEvents_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define _IControllerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define _IControllerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define _IControllerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT _IControllerEvents_QueryInterface(_IControllerEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG _IControllerEvents_AddRef(_IControllerEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG _IControllerEvents_Release(_IControllerEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT _IControllerEvents_GetTypeInfoCount(_IControllerEvents* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT _IControllerEvents_GetTypeInfo(_IControllerEvents* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT _IControllerEvents_GetIDsOfNames(_IControllerEvents* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT _IControllerEvents_Invoke(_IControllerEvents* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
#endif
#endif

#endif

#endif  /* ___IControllerEvents_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * ControllerSettings coclass
 */

DEFINE_GUID(CLSID_ControllerSettings, 0xdc6936cd, 0x13be, 0x4091, 0x98,0xe3, 0x07,0x1a,0xcc,0x38,0xcc,0xb8);

#ifdef __cplusplus
class DECLSPEC_UUID("dc6936cd-13be-4091-98e3-071acc38ccb8") ControllerSettings;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ControllerSettings, 0xdc6936cd, 0x13be, 0x4091, 0x98,0xe3, 0x07,0x1a,0xcc,0x38,0xcc,0xb8)
#endif
#endif

/*****************************************************************************
 * Controller coclass
 */

DEFINE_GUID(CLSID_Controller, 0xf389c8b7, 0x144f, 0x4c63, 0xa2,0xe3, 0x24,0x6d,0x16,0x8f,0x9d,0x39);

#ifdef __cplusplus
class DECLSPEC_UUID("f389c8b7-144f-4c63-a2e3-246d168f9d39") Controller;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Controller, 0xf389c8b7, 0x144f, 0x4c63, 0xa2,0xe3, 0x24,0x6d,0x16,0x8f,0x9d,0x39)
#endif
#endif

/*****************************************************************************
 * WSHDlgCtrl coclass
 */

DEFINE_GUID(CLSID_WSHDlgCtrl, 0xd3ba6587, 0x82a7, 0x46a7, 0xae,0xfe, 0x7a,0x75,0xca,0xd5,0x1f,0x31);

#ifdef __cplusplus
class DECLSPEC_UUID("d3ba6587-82a7-46a7-aefe-7a75cad51f31") WSHDlgCtrl;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WSHDlgCtrl, 0xd3ba6587, 0x82a7, 0x46a7, 0xae,0xfe, 0x7a,0x75,0xca,0xd5,0x1f,0x31)
#endif
#endif

/*****************************************************************************
 * WSHDlgCtrls coclass
 */

DEFINE_GUID(CLSID_WSHDlgCtrls, 0x73c1a53e, 0x2c2b, 0x42a3, 0xbc,0xeb, 0xe9,0xee,0x05,0x39,0xb0,0xff);

#ifdef __cplusplus
class DECLSPEC_UUID("73c1a53e-2c2b-42a3-bceb-e9ee0539b0ff") WSHDlgCtrls;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WSHDlgCtrls, 0x73c1a53e, 0x2c2b, 0x42a3, 0xbc,0xeb, 0xe9,0xee,0x05,0x39,0xb0,0xff)
#endif
#endif

/*****************************************************************************
 * EnumWSHDlgCtrls coclass
 */

DEFINE_GUID(CLSID_EnumWSHDlgCtrls, 0x587ed49f, 0xb712, 0x48c7, 0xa5,0x80, 0x61,0xc2,0x52,0x57,0xeb,0x3e);

#ifdef __cplusplus
class DECLSPEC_UUID("587ed49f-b712-48c7-a580-61c25257eb3e") EnumWSHDlgCtrls;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(EnumWSHDlgCtrls, 0x587ed49f, 0xb712, 0x48c7, 0xa5,0x80, 0x61,0xc2,0x52,0x57,0xeb,0x3e)
#endif
#endif

/*****************************************************************************
 * WSHDlg coclass
 */

DEFINE_GUID(CLSID_WSHDlg, 0x1dcaffa5, 0x978d, 0x4cc0, 0x95,0x76, 0x73,0xbc,0x02,0x93,0xe6,0x7c);

#ifdef __cplusplus
class DECLSPEC_UUID("1dcaffa5-978d-4cc0-9576-73bc0293e67c") WSHDlg;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WSHDlg, 0x1dcaffa5, 0x978d, 0x4cc0, 0x95,0x76, 0x73,0xbc,0x02,0x93,0xe6,0x7c)
#endif
#endif

#endif /* __VPinMAMELib_LIBRARY_DEFINED__ */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __vpinmame_i_h__ */
