/*** Autogenerated by WIDL 8.21 from include/atliface.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __atliface_h__
#define __atliface_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __IRegistrarBase_FWD_DEFINED__
#define __IRegistrarBase_FWD_DEFINED__
typedef interface IRegistrarBase IRegistrarBase;
#ifdef __cplusplus
interface IRegistrarBase;
#endif /* __cplusplus */
#endif

#ifndef __IRegistrar_FWD_DEFINED__
#define __IRegistrar_FWD_DEFINED__
typedef interface IRegistrar IRegistrar;
#ifdef __cplusplus
interface IRegistrar;
#endif /* __cplusplus */
#endif

#ifndef __IDocHostUIHandlerDispatch_FWD_DEFINED__
#define __IDocHostUIHandlerDispatch_FWD_DEFINED__
typedef interface IDocHostUIHandlerDispatch IDocHostUIHandlerDispatch;
#ifdef __cplusplus
interface IDocHostUIHandlerDispatch;
#endif /* __cplusplus */
#endif

#ifndef __IAxWinAmbientDispatch_FWD_DEFINED__
#define __IAxWinAmbientDispatch_FWD_DEFINED__
typedef interface IAxWinAmbientDispatch IAxWinAmbientDispatch;
#ifdef __cplusplus
interface IAxWinAmbientDispatch;
#endif /* __cplusplus */
#endif

#ifndef __IAxWinAmbientDispatchEx_FWD_DEFINED__
#define __IAxWinAmbientDispatchEx_FWD_DEFINED__
typedef interface IAxWinAmbientDispatchEx IAxWinAmbientDispatchEx;
#ifdef __cplusplus
interface IAxWinAmbientDispatchEx;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef ATL_INITGUID
#include <initguid.h>
#endif
/*****************************************************************************
 * IRegistrarBase interface
 */
#ifndef __IRegistrarBase_INTERFACE_DEFINED__
#define __IRegistrarBase_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRegistrarBase, 0xe21f8a85, 0xb05d, 0x4243, 0x81,0x83, 0xc7,0xcb,0x40,0x55,0x88,0xf7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e21f8a85-b05d-4243-8183-c7cb405588f7")
IRegistrarBase : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE AddReplacement(
        LPCOLESTR Key,
        LPCOLESTR item) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearReplacements(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRegistrarBase, 0xe21f8a85, 0xb05d, 0x4243, 0x81,0x83, 0xc7,0xcb,0x40,0x55,0x88,0xf7)
#endif
#else
typedef struct IRegistrarBaseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRegistrarBase *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRegistrarBase *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRegistrarBase *This);

    /*** IRegistrarBase methods ***/
    HRESULT (STDMETHODCALLTYPE *AddReplacement)(
        IRegistrarBase *This,
        LPCOLESTR Key,
        LPCOLESTR item);

    HRESULT (STDMETHODCALLTYPE *ClearReplacements)(
        IRegistrarBase *This);

    END_INTERFACE
} IRegistrarBaseVtbl;

interface IRegistrarBase {
    CONST_VTBL IRegistrarBaseVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRegistrarBase_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRegistrarBase_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRegistrarBase_Release(This) (This)->lpVtbl->Release(This)
/*** IRegistrarBase methods ***/
#define IRegistrarBase_AddReplacement(This,Key,item) (This)->lpVtbl->AddReplacement(This,Key,item)
#define IRegistrarBase_ClearReplacements(This) (This)->lpVtbl->ClearReplacements(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRegistrarBase_QueryInterface(IRegistrarBase* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRegistrarBase_AddRef(IRegistrarBase* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRegistrarBase_Release(IRegistrarBase* This) {
    return This->lpVtbl->Release(This);
}
/*** IRegistrarBase methods ***/
static __WIDL_INLINE HRESULT IRegistrarBase_AddReplacement(IRegistrarBase* This,LPCOLESTR Key,LPCOLESTR item) {
    return This->lpVtbl->AddReplacement(This,Key,item);
}
static __WIDL_INLINE HRESULT IRegistrarBase_ClearReplacements(IRegistrarBase* This) {
    return This->lpVtbl->ClearReplacements(This);
}
#endif
#endif

#endif


#endif  /* __IRegistrarBase_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRegistrar interface
 */
#ifndef __IRegistrar_INTERFACE_DEFINED__
#define __IRegistrar_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRegistrar, 0x44ec053b, 0x400f, 0x11d0, 0x9d,0xcd, 0x00,0xa0,0xc9,0x03,0x91,0xd3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("44ec053b-400f-11d0-9dcd-00a0c90391d3")
IRegistrar : public IRegistrarBase
{
    virtual HRESULT STDMETHODCALLTYPE ResourceRegisterSz(
        LPCOLESTR resFileName,
        LPCOLESTR szID,
        LPCOLESTR szType) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResourceUnregisterSz(
        LPCOLESTR resFileName,
        LPCOLESTR szID,
        LPCOLESTR szType) = 0;

    virtual HRESULT STDMETHODCALLTYPE FileRegister(
        LPCOLESTR fileName) = 0;

    virtual HRESULT STDMETHODCALLTYPE FileUnregister(
        LPCOLESTR fileName) = 0;

    virtual HRESULT STDMETHODCALLTYPE StringRegister(
        LPCOLESTR data) = 0;

    virtual HRESULT STDMETHODCALLTYPE StringUnregister(
        LPCOLESTR data) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResourceRegister(
        LPCOLESTR resFileName,
        UINT nID,
        LPCOLESTR szType) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResourceUnregister(
        LPCOLESTR resFileName,
        UINT nID,
        LPCOLESTR szType) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRegistrar, 0x44ec053b, 0x400f, 0x11d0, 0x9d,0xcd, 0x00,0xa0,0xc9,0x03,0x91,0xd3)
#endif
#else
typedef struct IRegistrarVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRegistrar *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRegistrar *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRegistrar *This);

    /*** IRegistrarBase methods ***/
    HRESULT (STDMETHODCALLTYPE *AddReplacement)(
        IRegistrar *This,
        LPCOLESTR Key,
        LPCOLESTR item);

    HRESULT (STDMETHODCALLTYPE *ClearReplacements)(
        IRegistrar *This);

    /*** IRegistrar methods ***/
    HRESULT (STDMETHODCALLTYPE *ResourceRegisterSz)(
        IRegistrar *This,
        LPCOLESTR resFileName,
        LPCOLESTR szID,
        LPCOLESTR szType);

    HRESULT (STDMETHODCALLTYPE *ResourceUnregisterSz)(
        IRegistrar *This,
        LPCOLESTR resFileName,
        LPCOLESTR szID,
        LPCOLESTR szType);

    HRESULT (STDMETHODCALLTYPE *FileRegister)(
        IRegistrar *This,
        LPCOLESTR fileName);

    HRESULT (STDMETHODCALLTYPE *FileUnregister)(
        IRegistrar *This,
        LPCOLESTR fileName);

    HRESULT (STDMETHODCALLTYPE *StringRegister)(
        IRegistrar *This,
        LPCOLESTR data);

    HRESULT (STDMETHODCALLTYPE *StringUnregister)(
        IRegistrar *This,
        LPCOLESTR data);

    HRESULT (STDMETHODCALLTYPE *ResourceRegister)(
        IRegistrar *This,
        LPCOLESTR resFileName,
        UINT nID,
        LPCOLESTR szType);

    HRESULT (STDMETHODCALLTYPE *ResourceUnregister)(
        IRegistrar *This,
        LPCOLESTR resFileName,
        UINT nID,
        LPCOLESTR szType);

    END_INTERFACE
} IRegistrarVtbl;

interface IRegistrar {
    CONST_VTBL IRegistrarVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRegistrar_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRegistrar_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRegistrar_Release(This) (This)->lpVtbl->Release(This)
/*** IRegistrarBase methods ***/
#define IRegistrar_AddReplacement(This,Key,item) (This)->lpVtbl->AddReplacement(This,Key,item)
#define IRegistrar_ClearReplacements(This) (This)->lpVtbl->ClearReplacements(This)
/*** IRegistrar methods ***/
#define IRegistrar_ResourceRegisterSz(This,resFileName,szID,szType) (This)->lpVtbl->ResourceRegisterSz(This,resFileName,szID,szType)
#define IRegistrar_ResourceUnregisterSz(This,resFileName,szID,szType) (This)->lpVtbl->ResourceUnregisterSz(This,resFileName,szID,szType)
#define IRegistrar_FileRegister(This,fileName) (This)->lpVtbl->FileRegister(This,fileName)
#define IRegistrar_FileUnregister(This,fileName) (This)->lpVtbl->FileUnregister(This,fileName)
#define IRegistrar_StringRegister(This,data) (This)->lpVtbl->StringRegister(This,data)
#define IRegistrar_StringUnregister(This,data) (This)->lpVtbl->StringUnregister(This,data)
#define IRegistrar_ResourceRegister(This,resFileName,nID,szType) (This)->lpVtbl->ResourceRegister(This,resFileName,nID,szType)
#define IRegistrar_ResourceUnregister(This,resFileName,nID,szType) (This)->lpVtbl->ResourceUnregister(This,resFileName,nID,szType)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IRegistrar_QueryInterface(IRegistrar* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IRegistrar_AddRef(IRegistrar* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IRegistrar_Release(IRegistrar* This) {
    return This->lpVtbl->Release(This);
}
/*** IRegistrarBase methods ***/
static __WIDL_INLINE HRESULT IRegistrar_AddReplacement(IRegistrar* This,LPCOLESTR Key,LPCOLESTR item) {
    return This->lpVtbl->AddReplacement(This,Key,item);
}
static __WIDL_INLINE HRESULT IRegistrar_ClearReplacements(IRegistrar* This) {
    return This->lpVtbl->ClearReplacements(This);
}
/*** IRegistrar methods ***/
static __WIDL_INLINE HRESULT IRegistrar_ResourceRegisterSz(IRegistrar* This,LPCOLESTR resFileName,LPCOLESTR szID,LPCOLESTR szType) {
    return This->lpVtbl->ResourceRegisterSz(This,resFileName,szID,szType);
}
static __WIDL_INLINE HRESULT IRegistrar_ResourceUnregisterSz(IRegistrar* This,LPCOLESTR resFileName,LPCOLESTR szID,LPCOLESTR szType) {
    return This->lpVtbl->ResourceUnregisterSz(This,resFileName,szID,szType);
}
static __WIDL_INLINE HRESULT IRegistrar_FileRegister(IRegistrar* This,LPCOLESTR fileName) {
    return This->lpVtbl->FileRegister(This,fileName);
}
static __WIDL_INLINE HRESULT IRegistrar_FileUnregister(IRegistrar* This,LPCOLESTR fileName) {
    return This->lpVtbl->FileUnregister(This,fileName);
}
static __WIDL_INLINE HRESULT IRegistrar_StringRegister(IRegistrar* This,LPCOLESTR data) {
    return This->lpVtbl->StringRegister(This,data);
}
static __WIDL_INLINE HRESULT IRegistrar_StringUnregister(IRegistrar* This,LPCOLESTR data) {
    return This->lpVtbl->StringUnregister(This,data);
}
static __WIDL_INLINE HRESULT IRegistrar_ResourceRegister(IRegistrar* This,LPCOLESTR resFileName,UINT nID,LPCOLESTR szType) {
    return This->lpVtbl->ResourceRegister(This,resFileName,nID,szType);
}
static __WIDL_INLINE HRESULT IRegistrar_ResourceUnregister(IRegistrar* This,LPCOLESTR resFileName,UINT nID,LPCOLESTR szType) {
    return This->lpVtbl->ResourceUnregister(This,resFileName,nID,szType);
}
#endif
#endif

#endif


#endif  /* __IRegistrar_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDocHostUIHandlerDispatch interface
 */
#ifndef __IDocHostUIHandlerDispatch_INTERFACE_DEFINED__
#define __IDocHostUIHandlerDispatch_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDocHostUIHandlerDispatch, 0x425b5af0, 0x65f1, 0x11d1, 0x96,0x11, 0x00,0x00,0xf8,0x1e,0x0d,0x0d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("425b5af0-65f1-11d1-9611-0000f81e0d0d")
IDocHostUIHandlerDispatch : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(
        DWORD id,
        LONG x,
        LONG y,
        IUnknown *unkreserved,
        IDispatch *dispreserved,
        HRESULT *retval) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetHostInfo(
        DWORD *flags,
        DWORD *doubleclick) = 0;

    virtual HRESULT STDMETHODCALLTYPE ShowUI(
        DWORD id,
        IUnknown *activeobject,
        IUnknown *cmdtarget,
        IUnknown *frame,
        IUnknown *doc,
        HRESULT *retval) = 0;

    virtual HRESULT STDMETHODCALLTYPE HideUI(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE UpdateUI(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnableModeless(
        VARIANT_BOOL enable) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnDocWindowActivate(
        VARIANT_BOOL activate) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnFrameWindowActivate(
        VARIANT_BOOL activate) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResizeBorder(
        LONG left,
        LONG top,
        LONG right,
        LONG bottom,
        IUnknown *window,
        VARIANT_BOOL framewindow) = 0;

    virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator(
        HWND hwnd,
        UINT msg,
        WPARAM wparam,
        LPARAM lparam,
        BSTR guid_cmd_group,
        HRESULT *retval) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetOptionKeyPath(
        BSTR *key,
        DWORD reserved) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDropTarget(
        IUnknown *droptarget,
        IUnknown **ret_droptarget) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetExternal(
        IDispatch **disp) = 0;

    virtual HRESULT STDMETHODCALLTYPE TranslateUrl(
        DWORD reserved,
        BSTR url,
        BSTR *translated_url) = 0;

    virtual HRESULT STDMETHODCALLTYPE FilterDataObject(
        IUnknown *dataobject,
        IUnknown **dataobject_ret) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDocHostUIHandlerDispatch, 0x425b5af0, 0x65f1, 0x11d1, 0x96,0x11, 0x00,0x00,0xf8,0x1e,0x0d,0x0d)
#endif
#else
typedef struct IDocHostUIHandlerDispatchVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDocHostUIHandlerDispatch *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDocHostUIHandlerDispatch *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDocHostUIHandlerDispatch *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IDocHostUIHandlerDispatch *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IDocHostUIHandlerDispatch *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IDocHostUIHandlerDispatch *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IDocHostUIHandlerDispatch *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IDocHostUIHandlerDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *ShowContextMenu)(
        IDocHostUIHandlerDispatch *This,
        DWORD id,
        LONG x,
        LONG y,
        IUnknown *unkreserved,
        IDispatch *dispreserved,
        HRESULT *retval);

    HRESULT (STDMETHODCALLTYPE *GetHostInfo)(
        IDocHostUIHandlerDispatch *This,
        DWORD *flags,
        DWORD *doubleclick);

    HRESULT (STDMETHODCALLTYPE *ShowUI)(
        IDocHostUIHandlerDispatch *This,
        DWORD id,
        IUnknown *activeobject,
        IUnknown *cmdtarget,
        IUnknown *frame,
        IUnknown *doc,
        HRESULT *retval);

    HRESULT (STDMETHODCALLTYPE *HideUI)(
        IDocHostUIHandlerDispatch *This);

    HRESULT (STDMETHODCALLTYPE *UpdateUI)(
        IDocHostUIHandlerDispatch *This);

    HRESULT (STDMETHODCALLTYPE *EnableModeless)(
        IDocHostUIHandlerDispatch *This,
        VARIANT_BOOL enable);

    HRESULT (STDMETHODCALLTYPE *OnDocWindowActivate)(
        IDocHostUIHandlerDispatch *This,
        VARIANT_BOOL activate);

    HRESULT (STDMETHODCALLTYPE *OnFrameWindowActivate)(
        IDocHostUIHandlerDispatch *This,
        VARIANT_BOOL activate);

    HRESULT (STDMETHODCALLTYPE *ResizeBorder)(
        IDocHostUIHandlerDispatch *This,
        LONG left,
        LONG top,
        LONG right,
        LONG bottom,
        IUnknown *window,
        VARIANT_BOOL framewindow);

    HRESULT (STDMETHODCALLTYPE *TranslateAccelerator)(
        IDocHostUIHandlerDispatch *This,
        HWND hwnd,
        UINT msg,
        WPARAM wparam,
        LPARAM lparam,
        BSTR guid_cmd_group,
        HRESULT *retval);

    HRESULT (STDMETHODCALLTYPE *GetOptionKeyPath)(
        IDocHostUIHandlerDispatch *This,
        BSTR *key,
        DWORD reserved);

    HRESULT (STDMETHODCALLTYPE *GetDropTarget)(
        IDocHostUIHandlerDispatch *This,
        IUnknown *droptarget,
        IUnknown **ret_droptarget);

    HRESULT (STDMETHODCALLTYPE *GetExternal)(
        IDocHostUIHandlerDispatch *This,
        IDispatch **disp);

    HRESULT (STDMETHODCALLTYPE *TranslateUrl)(
        IDocHostUIHandlerDispatch *This,
        DWORD reserved,
        BSTR url,
        BSTR *translated_url);

    HRESULT (STDMETHODCALLTYPE *FilterDataObject)(
        IDocHostUIHandlerDispatch *This,
        IUnknown *dataobject,
        IUnknown **dataobject_ret);

    END_INTERFACE
} IDocHostUIHandlerDispatchVtbl;

interface IDocHostUIHandlerDispatch {
    CONST_VTBL IDocHostUIHandlerDispatchVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDocHostUIHandlerDispatch_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDocHostUIHandlerDispatch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDocHostUIHandlerDispatch_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IDocHostUIHandlerDispatch_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IDocHostUIHandlerDispatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IDocHostUIHandlerDispatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IDocHostUIHandlerDispatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IDocHostUIHandlerDispatch methods ***/
#define IDocHostUIHandlerDispatch_ShowContextMenu(This,id,x,y,unkreserved,dispreserved,retval) (This)->lpVtbl->ShowContextMenu(This,id,x,y,unkreserved,dispreserved,retval)
#define IDocHostUIHandlerDispatch_GetHostInfo(This,flags,doubleclick) (This)->lpVtbl->GetHostInfo(This,flags,doubleclick)
#define IDocHostUIHandlerDispatch_ShowUI(This,id,activeobject,cmdtarget,frame,doc,retval) (This)->lpVtbl->ShowUI(This,id,activeobject,cmdtarget,frame,doc,retval)
#define IDocHostUIHandlerDispatch_HideUI(This) (This)->lpVtbl->HideUI(This)
#define IDocHostUIHandlerDispatch_UpdateUI(This) (This)->lpVtbl->UpdateUI(This)
#define IDocHostUIHandlerDispatch_EnableModeless(This,enable) (This)->lpVtbl->EnableModeless(This,enable)
#define IDocHostUIHandlerDispatch_OnDocWindowActivate(This,activate) (This)->lpVtbl->OnDocWindowActivate(This,activate)
#define IDocHostUIHandlerDispatch_OnFrameWindowActivate(This,activate) (This)->lpVtbl->OnFrameWindowActivate(This,activate)
#define IDocHostUIHandlerDispatch_ResizeBorder(This,left,top,right,bottom,window,framewindow) (This)->lpVtbl->ResizeBorder(This,left,top,right,bottom,window,framewindow)
#define IDocHostUIHandlerDispatch_TranslateAccelerator(This,hwnd,msg,wparam,lparam,guid_cmd_group,retval) (This)->lpVtbl->TranslateAccelerator(This,hwnd,msg,wparam,lparam,guid_cmd_group,retval)
#define IDocHostUIHandlerDispatch_GetOptionKeyPath(This,key,reserved) (This)->lpVtbl->GetOptionKeyPath(This,key,reserved)
#define IDocHostUIHandlerDispatch_GetDropTarget(This,droptarget,ret_droptarget) (This)->lpVtbl->GetDropTarget(This,droptarget,ret_droptarget)
#define IDocHostUIHandlerDispatch_GetExternal(This,disp) (This)->lpVtbl->GetExternal(This,disp)
#define IDocHostUIHandlerDispatch_TranslateUrl(This,reserved,url,translated_url) (This)->lpVtbl->TranslateUrl(This,reserved,url,translated_url)
#define IDocHostUIHandlerDispatch_FilterDataObject(This,dataobject,dataobject_ret) (This)->lpVtbl->FilterDataObject(This,dataobject,dataobject_ret)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_QueryInterface(IDocHostUIHandlerDispatch* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IDocHostUIHandlerDispatch_AddRef(IDocHostUIHandlerDispatch* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IDocHostUIHandlerDispatch_Release(IDocHostUIHandlerDispatch* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetTypeInfoCount(IDocHostUIHandlerDispatch* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetTypeInfo(IDocHostUIHandlerDispatch* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetIDsOfNames(IDocHostUIHandlerDispatch* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_Invoke(IDocHostUIHandlerDispatch* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IDocHostUIHandlerDispatch methods ***/
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_ShowContextMenu(IDocHostUIHandlerDispatch* This,DWORD id,LONG x,LONG y,IUnknown *unkreserved,IDispatch *dispreserved,HRESULT *retval) {
    return This->lpVtbl->ShowContextMenu(This,id,x,y,unkreserved,dispreserved,retval);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetHostInfo(IDocHostUIHandlerDispatch* This,DWORD *flags,DWORD *doubleclick) {
    return This->lpVtbl->GetHostInfo(This,flags,doubleclick);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_ShowUI(IDocHostUIHandlerDispatch* This,DWORD id,IUnknown *activeobject,IUnknown *cmdtarget,IUnknown *frame,IUnknown *doc,HRESULT *retval) {
    return This->lpVtbl->ShowUI(This,id,activeobject,cmdtarget,frame,doc,retval);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_HideUI(IDocHostUIHandlerDispatch* This) {
    return This->lpVtbl->HideUI(This);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_UpdateUI(IDocHostUIHandlerDispatch* This) {
    return This->lpVtbl->UpdateUI(This);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_EnableModeless(IDocHostUIHandlerDispatch* This,VARIANT_BOOL enable) {
    return This->lpVtbl->EnableModeless(This,enable);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_OnDocWindowActivate(IDocHostUIHandlerDispatch* This,VARIANT_BOOL activate) {
    return This->lpVtbl->OnDocWindowActivate(This,activate);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_OnFrameWindowActivate(IDocHostUIHandlerDispatch* This,VARIANT_BOOL activate) {
    return This->lpVtbl->OnFrameWindowActivate(This,activate);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_ResizeBorder(IDocHostUIHandlerDispatch* This,LONG left,LONG top,LONG right,LONG bottom,IUnknown *window,VARIANT_BOOL framewindow) {
    return This->lpVtbl->ResizeBorder(This,left,top,right,bottom,window,framewindow);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_TranslateAccelerator(IDocHostUIHandlerDispatch* This,HWND hwnd,UINT msg,WPARAM wparam,LPARAM lparam,BSTR guid_cmd_group,HRESULT *retval) {
    return This->lpVtbl->TranslateAccelerator(This,hwnd,msg,wparam,lparam,guid_cmd_group,retval);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetOptionKeyPath(IDocHostUIHandlerDispatch* This,BSTR *key,DWORD reserved) {
    return This->lpVtbl->GetOptionKeyPath(This,key,reserved);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetDropTarget(IDocHostUIHandlerDispatch* This,IUnknown *droptarget,IUnknown **ret_droptarget) {
    return This->lpVtbl->GetDropTarget(This,droptarget,ret_droptarget);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_GetExternal(IDocHostUIHandlerDispatch* This,IDispatch **disp) {
    return This->lpVtbl->GetExternal(This,disp);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_TranslateUrl(IDocHostUIHandlerDispatch* This,DWORD reserved,BSTR url,BSTR *translated_url) {
    return This->lpVtbl->TranslateUrl(This,reserved,url,translated_url);
}
static __WIDL_INLINE HRESULT IDocHostUIHandlerDispatch_FilterDataObject(IDocHostUIHandlerDispatch* This,IUnknown *dataobject,IUnknown **dataobject_ret) {
    return This->lpVtbl->FilterDataObject(This,dataobject,dataobject_ret);
}
#endif
#endif

#endif


#endif  /* __IDocHostUIHandlerDispatch_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IAxWinAmbientDispatch interface
 */
#ifndef __IAxWinAmbientDispatch_INTERFACE_DEFINED__
#define __IAxWinAmbientDispatch_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAxWinAmbientDispatch, 0xb6ea2051, 0x048a, 0x11d1, 0x82,0xb9, 0x00,0xc0,0x4f,0xb9,0x94,0x2e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b6ea2051-048a-11d1-82b9-00c04fb9942e")
IAxWinAmbientDispatch : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE put_AllowWindowlessActivation(
        VARIANT_BOOL allow) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AllowWindowlessActivation(
        VARIANT_BOOL *allowed) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_BackColor(
        OLE_COLOR color) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_BackColor(
        OLE_COLOR *color) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ForeColor(
        OLE_COLOR color) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ForeColor(
        OLE_COLOR *color) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_LocaleID(
        LCID lcid) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LocaleID(
        LCID *lcid) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UserMode(
        VARIANT_BOOL mode) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UserMode(
        VARIANT_BOOL *mode) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisplayAsDefault(
        VARIANT_BOOL display) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayAsDefault(
        VARIANT_BOOL *display) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Font(
        IFontDisp *font) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Font(
        IFontDisp **font) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_MessageReflect(
        VARIANT_BOOL reflect) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_MessageReflect(
        VARIANT_BOOL *reflect) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowGrabHandles(
        VARIANT_BOOL *show) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ShowHatching(
        VARIANT_BOOL *show) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DocHostFlags(
        DWORD flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DocHostFlags(
        DWORD *flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DocHostDoubleClickFlags(
        DWORD flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DocHostDoubleClickFlags(
        DWORD *flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AllowContextMenu(
        VARIANT_BOOL allow) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AllowContextMenu(
        VARIANT_BOOL *allow) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_AllowShowUI(
        VARIANT_BOOL allow) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AllowShowUI(
        VARIANT_BOOL *allow) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_OptionKeyPath(
        BSTR path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OptionKeyPath(
        BSTR *path) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAxWinAmbientDispatch, 0xb6ea2051, 0x048a, 0x11d1, 0x82,0xb9, 0x00,0xc0,0x4f,0xb9,0x94,0x2e)
#endif
#else
typedef struct IAxWinAmbientDispatchVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAxWinAmbientDispatch *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAxWinAmbientDispatch *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAxWinAmbientDispatch *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IAxWinAmbientDispatch *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IAxWinAmbientDispatch *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IAxWinAmbientDispatch *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IAxWinAmbientDispatch *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IAxWinAmbientDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *put_AllowWindowlessActivation)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowWindowlessActivation)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *allowed);

    HRESULT (STDMETHODCALLTYPE *put_BackColor)(
        IAxWinAmbientDispatch *This,
        OLE_COLOR color);

    HRESULT (STDMETHODCALLTYPE *get_BackColor)(
        IAxWinAmbientDispatch *This,
        OLE_COLOR *color);

    HRESULT (STDMETHODCALLTYPE *put_ForeColor)(
        IAxWinAmbientDispatch *This,
        OLE_COLOR color);

    HRESULT (STDMETHODCALLTYPE *get_ForeColor)(
        IAxWinAmbientDispatch *This,
        OLE_COLOR *color);

    HRESULT (STDMETHODCALLTYPE *put_LocaleID)(
        IAxWinAmbientDispatch *This,
        LCID lcid);

    HRESULT (STDMETHODCALLTYPE *get_LocaleID)(
        IAxWinAmbientDispatch *This,
        LCID *lcid);

    HRESULT (STDMETHODCALLTYPE *put_UserMode)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL mode);

    HRESULT (STDMETHODCALLTYPE *get_UserMode)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *mode);

    HRESULT (STDMETHODCALLTYPE *put_DisplayAsDefault)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL display);

    HRESULT (STDMETHODCALLTYPE *get_DisplayAsDefault)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *display);

    HRESULT (STDMETHODCALLTYPE *put_Font)(
        IAxWinAmbientDispatch *This,
        IFontDisp *font);

    HRESULT (STDMETHODCALLTYPE *get_Font)(
        IAxWinAmbientDispatch *This,
        IFontDisp **font);

    HRESULT (STDMETHODCALLTYPE *put_MessageReflect)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL reflect);

    HRESULT (STDMETHODCALLTYPE *get_MessageReflect)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *reflect);

    HRESULT (STDMETHODCALLTYPE *get_ShowGrabHandles)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *show);

    HRESULT (STDMETHODCALLTYPE *get_ShowHatching)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *show);

    HRESULT (STDMETHODCALLTYPE *put_DocHostFlags)(
        IAxWinAmbientDispatch *This,
        DWORD flags);

    HRESULT (STDMETHODCALLTYPE *get_DocHostFlags)(
        IAxWinAmbientDispatch *This,
        DWORD *flags);

    HRESULT (STDMETHODCALLTYPE *put_DocHostDoubleClickFlags)(
        IAxWinAmbientDispatch *This,
        DWORD flags);

    HRESULT (STDMETHODCALLTYPE *get_DocHostDoubleClickFlags)(
        IAxWinAmbientDispatch *This,
        DWORD *flags);

    HRESULT (STDMETHODCALLTYPE *put_AllowContextMenu)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowContextMenu)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *allow);

    HRESULT (STDMETHODCALLTYPE *put_AllowShowUI)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowShowUI)(
        IAxWinAmbientDispatch *This,
        VARIANT_BOOL *allow);

    HRESULT (STDMETHODCALLTYPE *put_OptionKeyPath)(
        IAxWinAmbientDispatch *This,
        BSTR path);

    HRESULT (STDMETHODCALLTYPE *get_OptionKeyPath)(
        IAxWinAmbientDispatch *This,
        BSTR *path);

    END_INTERFACE
} IAxWinAmbientDispatchVtbl;

interface IAxWinAmbientDispatch {
    CONST_VTBL IAxWinAmbientDispatchVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAxWinAmbientDispatch_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAxWinAmbientDispatch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAxWinAmbientDispatch_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IAxWinAmbientDispatch_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAxWinAmbientDispatch_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAxWinAmbientDispatch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAxWinAmbientDispatch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IAxWinAmbientDispatch methods ***/
#define IAxWinAmbientDispatch_put_AllowWindowlessActivation(This,allow) (This)->lpVtbl->put_AllowWindowlessActivation(This,allow)
#define IAxWinAmbientDispatch_get_AllowWindowlessActivation(This,allowed) (This)->lpVtbl->get_AllowWindowlessActivation(This,allowed)
#define IAxWinAmbientDispatch_put_BackColor(This,color) (This)->lpVtbl->put_BackColor(This,color)
#define IAxWinAmbientDispatch_get_BackColor(This,color) (This)->lpVtbl->get_BackColor(This,color)
#define IAxWinAmbientDispatch_put_ForeColor(This,color) (This)->lpVtbl->put_ForeColor(This,color)
#define IAxWinAmbientDispatch_get_ForeColor(This,color) (This)->lpVtbl->get_ForeColor(This,color)
#define IAxWinAmbientDispatch_put_LocaleID(This,lcid) (This)->lpVtbl->put_LocaleID(This,lcid)
#define IAxWinAmbientDispatch_get_LocaleID(This,lcid) (This)->lpVtbl->get_LocaleID(This,lcid)
#define IAxWinAmbientDispatch_put_UserMode(This,mode) (This)->lpVtbl->put_UserMode(This,mode)
#define IAxWinAmbientDispatch_get_UserMode(This,mode) (This)->lpVtbl->get_UserMode(This,mode)
#define IAxWinAmbientDispatch_put_DisplayAsDefault(This,display) (This)->lpVtbl->put_DisplayAsDefault(This,display)
#define IAxWinAmbientDispatch_get_DisplayAsDefault(This,display) (This)->lpVtbl->get_DisplayAsDefault(This,display)
#define IAxWinAmbientDispatch_put_Font(This,font) (This)->lpVtbl->put_Font(This,font)
#define IAxWinAmbientDispatch_get_Font(This,font) (This)->lpVtbl->get_Font(This,font)
#define IAxWinAmbientDispatch_put_MessageReflect(This,reflect) (This)->lpVtbl->put_MessageReflect(This,reflect)
#define IAxWinAmbientDispatch_get_MessageReflect(This,reflect) (This)->lpVtbl->get_MessageReflect(This,reflect)
#define IAxWinAmbientDispatch_get_ShowGrabHandles(This,show) (This)->lpVtbl->get_ShowGrabHandles(This,show)
#define IAxWinAmbientDispatch_get_ShowHatching(This,show) (This)->lpVtbl->get_ShowHatching(This,show)
#define IAxWinAmbientDispatch_put_DocHostFlags(This,flags) (This)->lpVtbl->put_DocHostFlags(This,flags)
#define IAxWinAmbientDispatch_get_DocHostFlags(This,flags) (This)->lpVtbl->get_DocHostFlags(This,flags)
#define IAxWinAmbientDispatch_put_DocHostDoubleClickFlags(This,flags) (This)->lpVtbl->put_DocHostDoubleClickFlags(This,flags)
#define IAxWinAmbientDispatch_get_DocHostDoubleClickFlags(This,flags) (This)->lpVtbl->get_DocHostDoubleClickFlags(This,flags)
#define IAxWinAmbientDispatch_put_AllowContextMenu(This,allow) (This)->lpVtbl->put_AllowContextMenu(This,allow)
#define IAxWinAmbientDispatch_get_AllowContextMenu(This,allow) (This)->lpVtbl->get_AllowContextMenu(This,allow)
#define IAxWinAmbientDispatch_put_AllowShowUI(This,allow) (This)->lpVtbl->put_AllowShowUI(This,allow)
#define IAxWinAmbientDispatch_get_AllowShowUI(This,allow) (This)->lpVtbl->get_AllowShowUI(This,allow)
#define IAxWinAmbientDispatch_put_OptionKeyPath(This,path) (This)->lpVtbl->put_OptionKeyPath(This,path)
#define IAxWinAmbientDispatch_get_OptionKeyPath(This,path) (This)->lpVtbl->get_OptionKeyPath(This,path)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_QueryInterface(IAxWinAmbientDispatch* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IAxWinAmbientDispatch_AddRef(IAxWinAmbientDispatch* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IAxWinAmbientDispatch_Release(IAxWinAmbientDispatch* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_GetTypeInfoCount(IAxWinAmbientDispatch* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_GetTypeInfo(IAxWinAmbientDispatch* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_GetIDsOfNames(IAxWinAmbientDispatch* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_Invoke(IAxWinAmbientDispatch* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IAxWinAmbientDispatch methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_AllowWindowlessActivation(IAxWinAmbientDispatch* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowWindowlessActivation(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_AllowWindowlessActivation(IAxWinAmbientDispatch* This,VARIANT_BOOL *allowed) {
    return This->lpVtbl->get_AllowWindowlessActivation(This,allowed);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_BackColor(IAxWinAmbientDispatch* This,OLE_COLOR color) {
    return This->lpVtbl->put_BackColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_BackColor(IAxWinAmbientDispatch* This,OLE_COLOR *color) {
    return This->lpVtbl->get_BackColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_ForeColor(IAxWinAmbientDispatch* This,OLE_COLOR color) {
    return This->lpVtbl->put_ForeColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_ForeColor(IAxWinAmbientDispatch* This,OLE_COLOR *color) {
    return This->lpVtbl->get_ForeColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_LocaleID(IAxWinAmbientDispatch* This,LCID lcid) {
    return This->lpVtbl->put_LocaleID(This,lcid);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_LocaleID(IAxWinAmbientDispatch* This,LCID *lcid) {
    return This->lpVtbl->get_LocaleID(This,lcid);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_UserMode(IAxWinAmbientDispatch* This,VARIANT_BOOL mode) {
    return This->lpVtbl->put_UserMode(This,mode);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_UserMode(IAxWinAmbientDispatch* This,VARIANT_BOOL *mode) {
    return This->lpVtbl->get_UserMode(This,mode);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_DisplayAsDefault(IAxWinAmbientDispatch* This,VARIANT_BOOL display) {
    return This->lpVtbl->put_DisplayAsDefault(This,display);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_DisplayAsDefault(IAxWinAmbientDispatch* This,VARIANT_BOOL *display) {
    return This->lpVtbl->get_DisplayAsDefault(This,display);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_Font(IAxWinAmbientDispatch* This,IFontDisp *font) {
    return This->lpVtbl->put_Font(This,font);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_Font(IAxWinAmbientDispatch* This,IFontDisp **font) {
    return This->lpVtbl->get_Font(This,font);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_MessageReflect(IAxWinAmbientDispatch* This,VARIANT_BOOL reflect) {
    return This->lpVtbl->put_MessageReflect(This,reflect);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_MessageReflect(IAxWinAmbientDispatch* This,VARIANT_BOOL *reflect) {
    return This->lpVtbl->get_MessageReflect(This,reflect);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_ShowGrabHandles(IAxWinAmbientDispatch* This,VARIANT_BOOL *show) {
    return This->lpVtbl->get_ShowGrabHandles(This,show);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_ShowHatching(IAxWinAmbientDispatch* This,VARIANT_BOOL *show) {
    return This->lpVtbl->get_ShowHatching(This,show);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_DocHostFlags(IAxWinAmbientDispatch* This,DWORD flags) {
    return This->lpVtbl->put_DocHostFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_DocHostFlags(IAxWinAmbientDispatch* This,DWORD *flags) {
    return This->lpVtbl->get_DocHostFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_DocHostDoubleClickFlags(IAxWinAmbientDispatch* This,DWORD flags) {
    return This->lpVtbl->put_DocHostDoubleClickFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_DocHostDoubleClickFlags(IAxWinAmbientDispatch* This,DWORD *flags) {
    return This->lpVtbl->get_DocHostDoubleClickFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_AllowContextMenu(IAxWinAmbientDispatch* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowContextMenu(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_AllowContextMenu(IAxWinAmbientDispatch* This,VARIANT_BOOL *allow) {
    return This->lpVtbl->get_AllowContextMenu(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_AllowShowUI(IAxWinAmbientDispatch* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowShowUI(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_AllowShowUI(IAxWinAmbientDispatch* This,VARIANT_BOOL *allow) {
    return This->lpVtbl->get_AllowShowUI(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_put_OptionKeyPath(IAxWinAmbientDispatch* This,BSTR path) {
    return This->lpVtbl->put_OptionKeyPath(This,path);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatch_get_OptionKeyPath(IAxWinAmbientDispatch* This,BSTR *path) {
    return This->lpVtbl->get_OptionKeyPath(This,path);
}
#endif
#endif

#endif


#endif  /* __IAxWinAmbientDispatch_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IAxWinAmbientDispatchEx interface
 */
#ifndef __IAxWinAmbientDispatchEx_INTERFACE_DEFINED__
#define __IAxWinAmbientDispatchEx_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAxWinAmbientDispatchEx, 0xb2d0778b, 0xac99, 0x4c58, 0xa5,0xc8, 0xe7,0x72,0x4e,0x53,0x16,0xb5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b2d0778b-ac99-4c58-a5c8-e7724e5316b5")
IAxWinAmbientDispatchEx : public IAxWinAmbientDispatch
{
    virtual HRESULT STDMETHODCALLTYPE SetAmbientDispatch(
        IDispatch *disp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAxWinAmbientDispatchEx, 0xb2d0778b, 0xac99, 0x4c58, 0xa5,0xc8, 0xe7,0x72,0x4e,0x53,0x16,0xb5)
#endif
#else
typedef struct IAxWinAmbientDispatchExVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAxWinAmbientDispatchEx *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAxWinAmbientDispatchEx *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAxWinAmbientDispatchEx *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IAxWinAmbientDispatchEx *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IAxWinAmbientDispatchEx *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IAxWinAmbientDispatchEx *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IAxWinAmbientDispatchEx *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IAxWinAmbientDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *put_AllowWindowlessActivation)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowWindowlessActivation)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *allowed);

    HRESULT (STDMETHODCALLTYPE *put_BackColor)(
        IAxWinAmbientDispatchEx *This,
        OLE_COLOR color);

    HRESULT (STDMETHODCALLTYPE *get_BackColor)(
        IAxWinAmbientDispatchEx *This,
        OLE_COLOR *color);

    HRESULT (STDMETHODCALLTYPE *put_ForeColor)(
        IAxWinAmbientDispatchEx *This,
        OLE_COLOR color);

    HRESULT (STDMETHODCALLTYPE *get_ForeColor)(
        IAxWinAmbientDispatchEx *This,
        OLE_COLOR *color);

    HRESULT (STDMETHODCALLTYPE *put_LocaleID)(
        IAxWinAmbientDispatchEx *This,
        LCID lcid);

    HRESULT (STDMETHODCALLTYPE *get_LocaleID)(
        IAxWinAmbientDispatchEx *This,
        LCID *lcid);

    HRESULT (STDMETHODCALLTYPE *put_UserMode)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL mode);

    HRESULT (STDMETHODCALLTYPE *get_UserMode)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *mode);

    HRESULT (STDMETHODCALLTYPE *put_DisplayAsDefault)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL display);

    HRESULT (STDMETHODCALLTYPE *get_DisplayAsDefault)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *display);

    HRESULT (STDMETHODCALLTYPE *put_Font)(
        IAxWinAmbientDispatchEx *This,
        IFontDisp *font);

    HRESULT (STDMETHODCALLTYPE *get_Font)(
        IAxWinAmbientDispatchEx *This,
        IFontDisp **font);

    HRESULT (STDMETHODCALLTYPE *put_MessageReflect)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL reflect);

    HRESULT (STDMETHODCALLTYPE *get_MessageReflect)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *reflect);

    HRESULT (STDMETHODCALLTYPE *get_ShowGrabHandles)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *show);

    HRESULT (STDMETHODCALLTYPE *get_ShowHatching)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *show);

    HRESULT (STDMETHODCALLTYPE *put_DocHostFlags)(
        IAxWinAmbientDispatchEx *This,
        DWORD flags);

    HRESULT (STDMETHODCALLTYPE *get_DocHostFlags)(
        IAxWinAmbientDispatchEx *This,
        DWORD *flags);

    HRESULT (STDMETHODCALLTYPE *put_DocHostDoubleClickFlags)(
        IAxWinAmbientDispatchEx *This,
        DWORD flags);

    HRESULT (STDMETHODCALLTYPE *get_DocHostDoubleClickFlags)(
        IAxWinAmbientDispatchEx *This,
        DWORD *flags);

    HRESULT (STDMETHODCALLTYPE *put_AllowContextMenu)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowContextMenu)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *allow);

    HRESULT (STDMETHODCALLTYPE *put_AllowShowUI)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL allow);

    HRESULT (STDMETHODCALLTYPE *get_AllowShowUI)(
        IAxWinAmbientDispatchEx *This,
        VARIANT_BOOL *allow);

    HRESULT (STDMETHODCALLTYPE *put_OptionKeyPath)(
        IAxWinAmbientDispatchEx *This,
        BSTR path);

    HRESULT (STDMETHODCALLTYPE *get_OptionKeyPath)(
        IAxWinAmbientDispatchEx *This,
        BSTR *path);

    /*** IAxWinAmbientDispatchEx methods ***/
    HRESULT (STDMETHODCALLTYPE *SetAmbientDispatch)(
        IAxWinAmbientDispatchEx *This,
        IDispatch *disp);

    END_INTERFACE
} IAxWinAmbientDispatchExVtbl;

interface IAxWinAmbientDispatchEx {
    CONST_VTBL IAxWinAmbientDispatchExVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAxWinAmbientDispatchEx_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAxWinAmbientDispatchEx_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAxWinAmbientDispatchEx_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IAxWinAmbientDispatchEx_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAxWinAmbientDispatchEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAxWinAmbientDispatchEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAxWinAmbientDispatchEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IAxWinAmbientDispatch methods ***/
#define IAxWinAmbientDispatchEx_put_AllowWindowlessActivation(This,allow) (This)->lpVtbl->put_AllowWindowlessActivation(This,allow)
#define IAxWinAmbientDispatchEx_get_AllowWindowlessActivation(This,allowed) (This)->lpVtbl->get_AllowWindowlessActivation(This,allowed)
#define IAxWinAmbientDispatchEx_put_BackColor(This,color) (This)->lpVtbl->put_BackColor(This,color)
#define IAxWinAmbientDispatchEx_get_BackColor(This,color) (This)->lpVtbl->get_BackColor(This,color)
#define IAxWinAmbientDispatchEx_put_ForeColor(This,color) (This)->lpVtbl->put_ForeColor(This,color)
#define IAxWinAmbientDispatchEx_get_ForeColor(This,color) (This)->lpVtbl->get_ForeColor(This,color)
#define IAxWinAmbientDispatchEx_put_LocaleID(This,lcid) (This)->lpVtbl->put_LocaleID(This,lcid)
#define IAxWinAmbientDispatchEx_get_LocaleID(This,lcid) (This)->lpVtbl->get_LocaleID(This,lcid)
#define IAxWinAmbientDispatchEx_put_UserMode(This,mode) (This)->lpVtbl->put_UserMode(This,mode)
#define IAxWinAmbientDispatchEx_get_UserMode(This,mode) (This)->lpVtbl->get_UserMode(This,mode)
#define IAxWinAmbientDispatchEx_put_DisplayAsDefault(This,display) (This)->lpVtbl->put_DisplayAsDefault(This,display)
#define IAxWinAmbientDispatchEx_get_DisplayAsDefault(This,display) (This)->lpVtbl->get_DisplayAsDefault(This,display)
#define IAxWinAmbientDispatchEx_put_Font(This,font) (This)->lpVtbl->put_Font(This,font)
#define IAxWinAmbientDispatchEx_get_Font(This,font) (This)->lpVtbl->get_Font(This,font)
#define IAxWinAmbientDispatchEx_put_MessageReflect(This,reflect) (This)->lpVtbl->put_MessageReflect(This,reflect)
#define IAxWinAmbientDispatchEx_get_MessageReflect(This,reflect) (This)->lpVtbl->get_MessageReflect(This,reflect)
#define IAxWinAmbientDispatchEx_get_ShowGrabHandles(This,show) (This)->lpVtbl->get_ShowGrabHandles(This,show)
#define IAxWinAmbientDispatchEx_get_ShowHatching(This,show) (This)->lpVtbl->get_ShowHatching(This,show)
#define IAxWinAmbientDispatchEx_put_DocHostFlags(This,flags) (This)->lpVtbl->put_DocHostFlags(This,flags)
#define IAxWinAmbientDispatchEx_get_DocHostFlags(This,flags) (This)->lpVtbl->get_DocHostFlags(This,flags)
#define IAxWinAmbientDispatchEx_put_DocHostDoubleClickFlags(This,flags) (This)->lpVtbl->put_DocHostDoubleClickFlags(This,flags)
#define IAxWinAmbientDispatchEx_get_DocHostDoubleClickFlags(This,flags) (This)->lpVtbl->get_DocHostDoubleClickFlags(This,flags)
#define IAxWinAmbientDispatchEx_put_AllowContextMenu(This,allow) (This)->lpVtbl->put_AllowContextMenu(This,allow)
#define IAxWinAmbientDispatchEx_get_AllowContextMenu(This,allow) (This)->lpVtbl->get_AllowContextMenu(This,allow)
#define IAxWinAmbientDispatchEx_put_AllowShowUI(This,allow) (This)->lpVtbl->put_AllowShowUI(This,allow)
#define IAxWinAmbientDispatchEx_get_AllowShowUI(This,allow) (This)->lpVtbl->get_AllowShowUI(This,allow)
#define IAxWinAmbientDispatchEx_put_OptionKeyPath(This,path) (This)->lpVtbl->put_OptionKeyPath(This,path)
#define IAxWinAmbientDispatchEx_get_OptionKeyPath(This,path) (This)->lpVtbl->get_OptionKeyPath(This,path)
/*** IAxWinAmbientDispatchEx methods ***/
#define IAxWinAmbientDispatchEx_SetAmbientDispatch(This,disp) (This)->lpVtbl->SetAmbientDispatch(This,disp)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_QueryInterface(IAxWinAmbientDispatchEx* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG IAxWinAmbientDispatchEx_AddRef(IAxWinAmbientDispatchEx* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG IAxWinAmbientDispatchEx_Release(IAxWinAmbientDispatchEx* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_GetTypeInfoCount(IAxWinAmbientDispatchEx* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_GetTypeInfo(IAxWinAmbientDispatchEx* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_GetIDsOfNames(IAxWinAmbientDispatchEx* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_Invoke(IAxWinAmbientDispatchEx* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IAxWinAmbientDispatch methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_AllowWindowlessActivation(IAxWinAmbientDispatchEx* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowWindowlessActivation(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_AllowWindowlessActivation(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *allowed) {
    return This->lpVtbl->get_AllowWindowlessActivation(This,allowed);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_BackColor(IAxWinAmbientDispatchEx* This,OLE_COLOR color) {
    return This->lpVtbl->put_BackColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_BackColor(IAxWinAmbientDispatchEx* This,OLE_COLOR *color) {
    return This->lpVtbl->get_BackColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_ForeColor(IAxWinAmbientDispatchEx* This,OLE_COLOR color) {
    return This->lpVtbl->put_ForeColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_ForeColor(IAxWinAmbientDispatchEx* This,OLE_COLOR *color) {
    return This->lpVtbl->get_ForeColor(This,color);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_LocaleID(IAxWinAmbientDispatchEx* This,LCID lcid) {
    return This->lpVtbl->put_LocaleID(This,lcid);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_LocaleID(IAxWinAmbientDispatchEx* This,LCID *lcid) {
    return This->lpVtbl->get_LocaleID(This,lcid);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_UserMode(IAxWinAmbientDispatchEx* This,VARIANT_BOOL mode) {
    return This->lpVtbl->put_UserMode(This,mode);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_UserMode(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *mode) {
    return This->lpVtbl->get_UserMode(This,mode);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_DisplayAsDefault(IAxWinAmbientDispatchEx* This,VARIANT_BOOL display) {
    return This->lpVtbl->put_DisplayAsDefault(This,display);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_DisplayAsDefault(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *display) {
    return This->lpVtbl->get_DisplayAsDefault(This,display);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_Font(IAxWinAmbientDispatchEx* This,IFontDisp *font) {
    return This->lpVtbl->put_Font(This,font);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_Font(IAxWinAmbientDispatchEx* This,IFontDisp **font) {
    return This->lpVtbl->get_Font(This,font);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_MessageReflect(IAxWinAmbientDispatchEx* This,VARIANT_BOOL reflect) {
    return This->lpVtbl->put_MessageReflect(This,reflect);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_MessageReflect(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *reflect) {
    return This->lpVtbl->get_MessageReflect(This,reflect);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_ShowGrabHandles(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *show) {
    return This->lpVtbl->get_ShowGrabHandles(This,show);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_ShowHatching(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *show) {
    return This->lpVtbl->get_ShowHatching(This,show);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_DocHostFlags(IAxWinAmbientDispatchEx* This,DWORD flags) {
    return This->lpVtbl->put_DocHostFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_DocHostFlags(IAxWinAmbientDispatchEx* This,DWORD *flags) {
    return This->lpVtbl->get_DocHostFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_DocHostDoubleClickFlags(IAxWinAmbientDispatchEx* This,DWORD flags) {
    return This->lpVtbl->put_DocHostDoubleClickFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_DocHostDoubleClickFlags(IAxWinAmbientDispatchEx* This,DWORD *flags) {
    return This->lpVtbl->get_DocHostDoubleClickFlags(This,flags);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_AllowContextMenu(IAxWinAmbientDispatchEx* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowContextMenu(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_AllowContextMenu(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *allow) {
    return This->lpVtbl->get_AllowContextMenu(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_AllowShowUI(IAxWinAmbientDispatchEx* This,VARIANT_BOOL allow) {
    return This->lpVtbl->put_AllowShowUI(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_AllowShowUI(IAxWinAmbientDispatchEx* This,VARIANT_BOOL *allow) {
    return This->lpVtbl->get_AllowShowUI(This,allow);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_put_OptionKeyPath(IAxWinAmbientDispatchEx* This,BSTR path) {
    return This->lpVtbl->put_OptionKeyPath(This,path);
}
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_get_OptionKeyPath(IAxWinAmbientDispatchEx* This,BSTR *path) {
    return This->lpVtbl->get_OptionKeyPath(This,path);
}
/*** IAxWinAmbientDispatchEx methods ***/
static __WIDL_INLINE HRESULT IAxWinAmbientDispatchEx_SetAmbientDispatch(IAxWinAmbientDispatchEx* This,IDispatch *disp) {
    return This->lpVtbl->SetAmbientDispatch(This,disp);
}
#endif
#endif

#endif


#endif  /* __IAxWinAmbientDispatchEx_INTERFACE_DEFINED__ */

DEFINE_GUID(CLSID_Registrar,0x44ec053a,0x400f,0x11d0,0x9d,0xcd,0x00,0xa0,0xc9,0x03,0x91,0xd3);
HRESULT WINAPI AtlAxCreateControl(LPCOLESTR,HWND,IStream*,IUnknown**);
HRESULT WINAPI AtlAxCreateControlEx(LPCOLESTR,HWND,IStream*,IUnknown**,IUnknown**,REFIID,IUnknown*);
HRESULT WINAPI AtlAxCreateControlLic(LPCOLESTR,HWND,IStream*,IUnknown**,BSTR);
HRESULT WINAPI AtlAxCreateControlLicEx(LPCOLESTR,HWND,IStream*,IUnknown**,IUnknown**,REFIID,IUnknown*,BSTR);
BOOL WINAPI AtlAxWinInit(void);
HRESULT WINAPI AtlAxGetControl(HWND,IUnknown**);
HRESULT WINAPI AtlAxGetHost(HWND,IUnknown**);
HWND WINAPI AtlAxCreateDialogW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
HWND WINAPI AtlAxCreateDialogA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
#define     AtlAxCreateDialog WINELIB_NAME_AW(AtlAxCreateDialog)
INT_PTR WINAPI AtlAxDialogBoxW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);
INT_PTR WINAPI AtlAxDialogBoxA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
#define        AtlAxDialogBox WINELIB_NAME_AW(AtlAxDialogBox)
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER HWND_UserSize     (ULONG *, ULONG, HWND *);
unsigned char * __RPC_USER HWND_UserMarshal  (ULONG *, unsigned char *, HWND *);
unsigned char * __RPC_USER HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void            __RPC_USER HWND_UserFree     (ULONG *, HWND *);
ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __atliface_h__ */
