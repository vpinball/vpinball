diff --git a/src/bgfx.cpp b/src/bgfx.cpp
index 00e90c17b..68cfc3410 100644
--- a/src/bgfx.cpp
+++ b/src/bgfx.cpp
@@ -3639,0 +3640 @@ namespace bgfx
+		s_renderFrameCalled = false;
@@ -4026,2 +4027,2 @@ namespace bgfx
-		uint32_t srcDepth  = src.isCubeMap() ? 6 : bx::max<uint32_t>(1, src.m_depth >> _srcMip);
-		uint32_t dstDepth  = dst.isCubeMap() ? 6 : bx::max<uint32_t>(1, dst.m_depth >> _dstMip);
+		uint32_t srcDepth = src.isCubeMap() ? 6 * src.m_numLayers : src.m_numLayers > 1 ? src.m_numLayers : bx::max<uint32_t>(1, src.m_depth >> _srcMip);
+		uint32_t dstDepth = dst.isCubeMap() ? 6 * src.m_numLayers : src.m_numLayers > 1 ? src.m_numLayers : bx::max<uint32_t>(1, dst.m_depth >> _dstMip);
diff --git a/tools/shaderc/shaderc.cpp b/tools/shaderc/shaderc.cpp
index 34480f00d..395193097 100644
--- a/tools/shaderc/shaderc.cpp
+++ b/tools/shaderc/shaderc.cpp
@@ -8,0 +9,2 @@
+#include <string>
+#include <sstream>
@@ -2539,0 +2542,17 @@ namespace bgfx
+								const bool usesTextureArray = !bx::findIdentifierMatch(input, s_textureArray).isEmpty();
+								const bool usesViewportLayerArray = !bx::findIdentifierMatch(input, s_ARB_shader_viewport_layer_array).isEmpty();
+
+								if (usesViewportLayerArray)
+								{
+									bx::stringPrintf(code
+										, "#extension GL_ARB_shader_viewport_layer_array : enable\n"
+									);
+								}
+
+								if (usesTextureArray)
+								{
+									bx::stringPrintf(code
+										, "#extension GL_EXT_texture_array : enable\n"
+									);
+								}
+
@@ -2575,0 +2595,30 @@ namespace bgfx
+							std::istringstream stream(code);
+							std::string line;
+							std::vector<std::string> extensions;
+							std::vector<std::string> otherLines;
+							std::string versionLine;
+							bool versionLineFound = false;
+							while (std::getline(stream, line)) {
+								if (line.find("#version") == 0) {
+									versionLine = line;
+									versionLineFound = true;
+								}
+								else if (line.find("#extension") == 0) {
+									extensions.push_back(line);
+								}
+								else {
+									otherLines.push_back(line);
+								}
+							}
+							std::ostringstream output;
+							if (versionLineFound) {
+								output << versionLine << "\n";
+							}
+							for (const auto& ext : extensions) {
+								output << ext << "\n";
+							}
+							for (const auto& other : otherLines) {
+								output << other << "\n";
+							}
+							code = output.str();
+
